     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Amazing Triangles" - This program will take first welcome the user the the program, and then output the     *
     3                                  ;system clock (tics) to the console. After this initial output for the user, the program will then prompt the user for their*
     4                                  ;full name, as well as their title (i.e. Dean, Vice-president, etc.). Once the user has entered their name and title, the   *
     5                                  ;program will tell them good morning, and that this program will take care of their triangles. After, the program will      *
     6                                  ;prompt the user for the sides of the triangle and its angle (this program solves SAS triangles). If the user inputs an     *
     7                                  ;invalid input (negative number, non-float number, or an input that is not a number such as 2.2.3+A), the program will      *
     8                                  ;let the user know that their input is invalid and will then prompt them for another input. After 3 valid inputs are        *
     9                                  ;entered (2 sides and 1 angle), the program will output a thank you message/confirmation of the user's inputted values.     *
    10                                  ;Now that the program has 3 valid inputs, it will use the formula for solving SAS triangles to find the third side, and     *
    11                                  ;will output said answer, as well as letting the user know that the length of the third side will be sent to the driver.    *
    12                                  ;Before this value is sent, the program will output the new system clock (tics). Once back in the driver, it will let the   *
    13                                  ;user know that it has received the value of the third side, and that a zero will be sent to the operating system.          *                                                                                                      
    14                                  ;                                                                                                                           *
    15                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    16                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    17                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    18                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    19                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    20                                  ;****************************************************************************************************************************
    21                                  
    22                                  
    23                                  
    24                                  
    25                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    26                                  ;Author information
    27                                  ;  Author name: Nathan Warner
    28                                  ;  Author email: nwarner4@csu.fullerton.edu
    29                                  ;
    30                                  ;Program information
    31                                  ;  Program name: Amazing Triangles
    32                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    33                                  ;  Date program began: 2024-Feb-11
    34                                  ;  Date of last update: 2024-Feb-19
    35                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    36                                  ;  Testing: Alpha testing completed.  All functions are correct.
    37                                  ;  Status: Ready for release to customers
    38                                  ;
    39                                  ;Purpose
    40                                  ;  This program will take in two sides and an angle of a triangle, and will output the length of the
    41                                  ;   thrd side to the console, as well as sending the value to the driver.
    42                                  ;
    43                                  ;This file:
    44                                  ;  File name: triangle.asm
    45                                  ;  Language: X86-64
    46                                  ;  Max page width: 124 columns
    47                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    48                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    49                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    50                                  ;  Prototype of this function: double triangle_SAS();
    51                                  ; 
    52                                  ;
    53                                  ;
    54                                  ;
    55                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global manager
    61                                  
    62                                  extern printf
    63                                  ; extern fgets
    64                                  extern stdin
    65                                  extern scanf
    66                                  extern input_array
    67                                  extern isfloat
    68                                  
    69                                  ; name_string_size equ 48
    70                                  ; title_string_size equ 48
    71                                  
    72                                  float_size equ 60
    73                                  true equ -1
    74                                  false equ 0
    75                                  
    76                                  segment .data
    77                                  ;This section (or segment) is for declaring initialized arrays
    78                                  
    79 00000000 0A546869732070726F-     program_desc db 10, "This program will manage your arrays of 64-bit floats", 10, 0
    79 00000009 6772616D2077696C6C-
    79 00000012 206D616E6167652079-
    79 0000001B 6F7572206172726179-
    79 00000024 73206F662036342D62-
    79 0000002D 697420666C6F617473-
    79 00000036 0A00               
    80 00000038 466F72207468652061-     prog_instruction db "For the array enter a sequence of 64-bit floats separated by white space.", 10, 0
    80 00000041 7272617920656E7465-
    80 0000004A 722061207365717565-
    80 00000053 6E6365206F66203634-
    80 0000005C 2D62697420666C6F61-
    80 00000065 747320736570617261-
    80 0000006E 746564206279207768-
    80 00000077 697465207370616365-
    80 00000080 2E0A00             
    81 00000083 416674657220746865-     exit_instruction db "After the last input press enter followed by Control+D:", 10, 0
    81 0000008C 206C61737420696E70-
    81 00000095 757420707265737320-
    81 0000009E 656E74657220666F6C-
    81 000000A7 6C6F77656420627920-
    81 000000B0 436F6E74726F6C2B44-
    81 000000B9 3A0A00             
    82 000000BC 5468657365206E756D-     numbers_received db "These numbers were received and placed into an array", 10, 0
    82 000000C5 626572732077657265-
    82 000000CE 207265636569766564-
    82 000000D7 20616E6420706C6163-
    82 000000E0 656420696E746F2061-
    82 000000E9 6E2061727261790A00 
    83 000000F2 546865207661726961-     variance db "The variance of the inputted numbers is %1.6lf", 10, 0
    83 000000FB 6E6365206F66207468-
    83 00000104 6520696E7075747465-
    83 0000010D 64206E756D62657273-
    83 00000116 2069732025312E366C-
    83 0000011F 660A00             
    84 00000122 256C6600                format db "%lf", 0
    85                                  
    86                                  
    87                                  segment .bss
    88                                  ;This section (or segment) is for declaring empty arrays
    89                                  
    90                                  align 64
    91 00000000 <res 340h>              backup_storage_area resb 832
    92 00000340 <res 60h>               array resq 12 ;Array of 12 qwords, will be used to take in user inputs for floats, as well as computing the mean and variance
    93                                  
    94                                  
    95                                  segment .text
    96                                  
    97                                  manager:
    98                                  
    99                                      ;Back up the GPRs (General Purpose Registers)
   100 00000000 55                          push rbp
   101 00000001 4889E5                      mov rbp, rsp
   102 00000004 53                          push rbx
   103 00000005 51                          push rcx
   104 00000006 52                          push rdx
   105 00000007 57                          push rdi
   106 00000008 56                          push rsi
   107 00000009 4150                        push r8
   108 0000000B 4151                        push r9
   109 0000000D 4152                        push r10
   110 0000000F 4153                        push r11
   111 00000011 4154                        push r12
   112 00000013 4155                        push r13
   113 00000015 4156                        push r14
   114 00000017 4157                        push r15
   115 00000019 9C                          pushf
   116                                  
   117                                      ;Backup the registers other than the GPRs
   118 0000001A B807000000                  mov rax,7
   119 0000001F BA00000000                  mov rdx,0
   120 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   121                                  
   122                                  
   123                                  
   124                                      ;Output the program description
   125 0000002C B800000000                  mov rax, 0
   126 00000031 48BF-                       mov rdi, program_desc ;"This program will manage your arrays of 64-bit numbers"
   126 00000033 [0000000000000000] 
   127 0000003B E8(00000000)                call printf
   128                                  
   129                                      ;Output the program instructions
   130 00000040 B800000000                  mov rax, 0
   131 00000045 48BF-                       mov rdi, prog_instruction ;"For the array enter a sequence of 64-bit floats separated by white space."
   131 00000047 [3800000000000000] 
   132 0000004F E8(00000000)                call printf
   133                                  
   134                                      ;Output the instruction to exit the prompt loop for inputting numbers into the array
   135 00000054 B800000000                  mov rax, 0
   136 00000059 48BF-                       mov rdi, exit_instruction ;After the last input press enter followed by Control+D"
   136 0000005B [8300000000000000] 
   137 00000063 E8(00000000)                call printf
   138                                  
   139                                  
   140                                      
   141                                      ;Block to call input_array, which will take in floats from the user, as well as validating their inputs
   142 00000068 B800000000                  mov rax, 0
   143 0000006D 48BF-                       mov rdi, array
   143 0000006F [4003000000000000] 
   144 00000077 BE0C000000                  mov rsi, 12 ;array_size
   145 0000007C E8(00000000)                call input_array
   146 00000081 4989C5                      mov r13, rax ;input_array will return the number of values in the array, and r13 will hold that value
   147                                      
   148                                  
   149                                  
   150                                  
   151                                      ;Output letting the user know the numbers they input were received and placed into the array
   152 00000084 B800000000                  mov rax, 0
   153 00000089 48BF-                       mov rdi, numbers_received ;"These numbers were receive and placed into an array"
   153 0000008B [BC00000000000000] 
   154 00000093 E8(00000000)                call printf
   155                                  
   156                                  
   157                                  
   158                                  
   159                                      ;Output the variance of the array input by the user
   160 00000098 B801000000                  mov rax, 1
   161 0000009D 48BF-                       mov rdi, variance ;The variance of the inputted numbers is %1.6lf"
   161 0000009F [F200000000000000] 
   162 000000A7 48BE-                       mov rsi, format
   162 000000A9 [2201000000000000] 
   163 000000B1 F2410F10C7                  movsd xmm0, xmm15
   164 000000B6 E8(00000000)                call printf
   165                                  
   166                                  
   167                                      ; ;Back up value in xmm15 before restoring registers
   168                                      ; push qword 0
   169                                      ; movsd [rsp], xmm15
   170                                  
   171                                  
   172                                      ;Restore the values to non-GPRs
   173 000000BB B807000000                  mov rax, 7
   174 000000C0 BA00000000                  mov rdx, 0
   175 000000C5 0FAE2C25[00000000]          xrstor [backup_storage_area]
   176                                  
   177                                  
   178                                      ; movsd xmm0, [rsp]
   179                                      ; pop rax
   180                                  
   181                                  
   182                                      ;Restore the GPRs
   183 000000CD 9D                          popf
   184 000000CE 415F                        pop r15
   185 000000D0 415E                        pop r14
   186 000000D2 415D                        pop r13
   187 000000D4 415C                        pop r12
   188 000000D6 415B                        pop r11
   189 000000D8 415A                        pop r10
   190 000000DA 4159                        pop r9
   191 000000DC 4158                        pop r8
   192 000000DE 5E                          pop rsi
   193 000000DF 5F                          pop rdi
   194 000000E0 5A                          pop rdx
   195 000000E1 59                          pop rcx
   196 000000E2 5B                          pop rbx
   197 000000E3 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   198 000000E4 C3                          ret
   199                                  ;End of the function manager.asm ====================================================================
