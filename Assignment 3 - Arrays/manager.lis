     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Amazing Triangles" - This program will take first welcome the user the the program, and then output the     *
     3                                  ;system clock (tics) to the console. After this initial output for the user, the program will then prompt the user for their*
     4                                  ;full name, as well as their title (i.e. Dean, Vice-president, etc.). Once the user has entered their name and title, the   *
     5                                  ;program will tell them good morning, and that this program will take care of their triangles. After, the program will      *
     6                                  ;prompt the user for the sides of the triangle and its angle (this program solves SAS triangles). If the user inputs an     *
     7                                  ;invalid input (negative number, non-float number, or an input that is not a number such as 2.2.3+A), the program will      *
     8                                  ;let the user know that their input is invalid and will then prompt them for another input. After 3 valid inputs are        *
     9                                  ;entered (2 sides and 1 angle), the program will output a thank you message/confirmation of the user's inputted values.     *
    10                                  ;Now that the program has 3 valid inputs, it will use the formula for solving SAS triangles to find the third side, and     *
    11                                  ;will output said answer, as well as letting the user know that the length of the third side will be sent to the driver.    *
    12                                  ;Before this value is sent, the program will output the new system clock (tics). Once back in the driver, it will let the   *
    13                                  ;user know that it has received the value of the third side, and that a zero will be sent to the operating system.          *                                                                                                      
    14                                  ;                                                                                                                           *
    15                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    16                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    17                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    18                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    19                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    20                                  ;****************************************************************************************************************************
    21                                  
    22                                  
    23                                  
    24                                  
    25                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    26                                  ;Author information
    27                                  ;  Author name: Nathan Warner
    28                                  ;  Author email: nwarner4@csu.fullerton.edu
    29                                  ;
    30                                  ;Program information
    31                                  ;  Program name: Amazing Triangles
    32                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    33                                  ;  Date program began: 2024-Feb-11
    34                                  ;  Date of last update: 2024-Feb-19
    35                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    36                                  ;  Testing: Alpha testing completed.  All functions are correct.
    37                                  ;  Status: Ready for release to customers
    38                                  ;
    39                                  ;Purpose
    40                                  ;  This program will take in two sides and an angle of a triangle, and will output the length of the
    41                                  ;   thrd side to the console, as well as sending the value to the driver.
    42                                  ;
    43                                  ;This file:
    44                                  ;  File name: triangle.asm
    45                                  ;  Language: X86-64
    46                                  ;  Max page width: 124 columns
    47                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    48                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    49                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    50                                  ;  Prototype of this function: double triangle_SAS();
    51                                  ; 
    52                                  ;
    53                                  ;
    54                                  ;
    55                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global manager
    61                                  
    62                                  extern printf
    63                                  ; extern fgets
    64                                  extern stdin
    65                                  extern scanf
    66                                  extern input_array
    67                                  extern isfloat
    68                                  
    69                                  ; name_string_size equ 48
    70                                  ; title_string_size equ 48
    71                                  
    72                                  float_size equ 60
    73                                  true equ -1
    74                                  false equ 0
    75                                  
    76                                  segment .data
    77                                  ;This section (or segment) is for declaring initialized arrays
    78                                  
    79 00000000 0A546869732070726F-     program_desc db 10, "This program will manage your arrays of 64-bit floats", 10, 0
    79 00000009 6772616D2077696C6C-
    79 00000012 206D616E6167652079-
    79 0000001B 6F7572206172726179-
    79 00000024 73206F662036342D62-
    79 0000002D 697420666C6F617473-
    79 00000036 0A00               
    80 00000038 466F72207468652061-     prog_instruction db "For the array enter a sequence of 64-bit floats separated by white space.", 10, 0
    80 00000041 7272617920656E7465-
    80 0000004A 722061207365717565-
    80 00000053 6E6365206F66203634-
    80 0000005C 2D62697420666C6F61-
    80 00000065 747320736570617261-
    80 0000006E 746564206279207768-
    80 00000077 697465207370616365-
    80 00000080 2E0A00             
    81 00000083 416674657220746865-     exit_instruction db "After the last input press enter followed by Control+D:", 10, 0
    81 0000008C 206C61737420696E70-
    81 00000095 757420707265737320-
    81 0000009E 656E74657220666F6C-
    81 000000A7 6C6F77656420627920-
    81 000000B0 436F6E74726F6C2B44-
    81 000000B9 3A0A00             
    82 000000BC 5468657365206E756D-     numbers_received db "These numbers were received and placed into an array", 10, 0
    82 000000C5 626572732077657265-
    82 000000CE 207265636569766564-
    82 000000D7 20616E6420706C6163-
    82 000000E0 656420696E746F2061-
    82 000000E9 6E2061727261790A00 
    83 000000F2 546865207661726961-     variance db "The variance of the inputted numbers is %1.6lf", 10, 0
    83 000000FB 6E6365206F66207468-
    83 00000104 6520696E7075747465-
    83 0000010D 64206E756D62657273-
    83 00000116 2069732025312E366C-
    83 0000011F 660A00             
    84 00000122 256C6600                format db "%lf", 0
    85                                  
    86                                  ;TESTING
    87 00000126 0A5468652063757272-     current_index db 10, "The current index is: %lu", 10, 0
    87 0000012F 656E7420696E646578-
    87 00000138 2069733A20256C750A-
    87 00000141 00                 
    88                                  
    89                                  
    90                                  segment .bss
    91                                  ;This section (or segment) is for declaring empty arrays
    92                                  
    93                                  align 64
    94 00000000 <res 340h>              backup_storage_area resb 832
    95 00000340 <res 60h>               array resq 12 ;Array of 12 qwords, will be used to take in user inputs for floats, as well as computing the mean and variance
    96                                  
    97                                  
    98                                  segment .text
    99                                  
   100                                  manager:
   101                                  
   102                                      ;Back up the GPRs (General Purpose Registers)
   103 00000000 55                          push rbp
   104 00000001 4889E5                      mov rbp, rsp
   105 00000004 53                          push rbx
   106 00000005 51                          push rcx
   107 00000006 52                          push rdx
   108 00000007 57                          push rdi
   109 00000008 56                          push rsi
   110 00000009 4150                        push r8
   111 0000000B 4151                        push r9
   112 0000000D 4152                        push r10
   113 0000000F 4153                        push r11
   114 00000011 4154                        push r12
   115 00000013 4155                        push r13
   116 00000015 4156                        push r14
   117 00000017 4157                        push r15
   118 00000019 9C                          pushf
   119                                  
   120                                      ;Backup the registers other than the GPRs
   121 0000001A B807000000                  mov rax,7
   122 0000001F BA00000000                  mov rdx,0
   123 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   124                                  
   125                                  
   126                                  
   127                                      ;Output the program description
   128 0000002C B800000000                  mov rax, 0
   129 00000031 48BF-                       mov rdi, program_desc ;"This program will manage your arrays of 64-bit numbers"
   129 00000033 [0000000000000000] 
   130 0000003B E8(00000000)                call printf
   131                                  
   132                                      ;Output the program instructions
   133 00000040 B800000000                  mov rax, 0
   134 00000045 48BF-                       mov rdi, prog_instruction ;"For the array enter a sequence of 64-bit floats separated by white space."
   134 00000047 [3800000000000000] 
   135 0000004F E8(00000000)                call printf
   136                                  
   137                                      ;Output the instruction to exit the prompt loop for inputting numbers into the array
   138 00000054 B800000000                  mov rax, 0
   139 00000059 48BF-                       mov rdi, exit_instruction ;After the last input press enter followed by Control+D"
   139 0000005B [8300000000000000] 
   140 00000063 E8(00000000)                call printf
   141                                  
   142                                  
   143                                      
   144                                      ;Block to call input_array, which will take in floats from the user, as well as validating their inputs
   145 00000068 B800000000                  mov rax, 0
   146 0000006D 48BF-                       mov rdi, array
   146 0000006F [4003000000000000] 
   147 00000077 BE0C000000                  mov rsi, 12 ;array_size
   148 0000007C E8(00000000)                call input_array
   149 00000081 4989C5                      mov r13, rax ;input_array will return the number of values in the array, and r13 will hold that value
   150                                      
   151                                      ;TESTING INDEX
   152 00000084 B800000000                  mov rax, 0
   153 00000089 4C89EF                      mov rdi, r13
   154 0000008C 48BE-                       mov rsi, current_index
   154 0000008E [2601000000000000] 
   155 00000096 E8(00000000)                call printf
   156                                  
   157                                  
   158                                      ;Output letting the user know the numbers they input were received and placed into the array
   159 0000009B B800000000                  mov rax, 0
   160 000000A0 48BF-                       mov rdi, numbers_received ;"These numbers were receive and placed into an array"
   160 000000A2 [BC00000000000000] 
   161 000000AA E8(00000000)                call printf
   162                                  
   163                                  
   164                                  
   165                                  
   166                                      ;Output the variance of the array input by the user
   167 000000AF B801000000                  mov rax, 1
   168 000000B4 48BF-                       mov rdi, variance ;The variance of the inputted numbers is %1.6lf"
   168 000000B6 [F200000000000000] 
   169 000000BE 48BE-                       mov rsi, format ;"%lf"
   169 000000C0 [2201000000000000] 
   170 000000C8 F2410F10C7                  movsd xmm0, xmm15
   171 000000CD E8(00000000)                call printf
   172                                  
   173                                  
   174                                      ; ;Back up value in xmm15 before restoring registers
   175                                      ; push qword 0
   176                                      ; movsd [rsp], xmm15
   177                                  
   178                                  
   179                                      ;Restore the values to non-GPRs
   180 000000D2 B807000000                  mov rax, 7
   181 000000D7 BA00000000                  mov rdx, 0
   182 000000DC 0FAE2C25[00000000]          xrstor [backup_storage_area]
   183                                  
   184                                  
   185                                      ; movsd xmm0, [rsp]
   186                                      ; pop rax
   187                                  
   188                                  
   189                                      ;Restore the GPRs
   190 000000E4 9D                          popf
   191 000000E5 415F                        pop r15
   192 000000E7 415E                        pop r14
   193 000000E9 415D                        pop r13
   194 000000EB 415C                        pop r12
   195 000000ED 415B                        pop r11
   196 000000EF 415A                        pop r10
   197 000000F1 4159                        pop r9
   198 000000F3 4158                        pop r8
   199 000000F5 5E                          pop rsi
   200 000000F6 5F                          pop rdi
   201 000000F7 5A                          pop rdx
   202 000000F8 59                          pop rcx
   203 000000F9 5B                          pop rbx
   204 000000FA 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   205 000000FB C3                          ret
   206                                  ;End of the function manager.asm ====================================================================
