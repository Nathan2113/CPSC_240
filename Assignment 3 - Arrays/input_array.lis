     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Amazing Triangles" - This program will take first welcome the user the the program, and then output the     *
     3                                  ;system clock (tics) to the console. After this initial output for the user, the program will then prompt the user for their*
     4                                  ;full name, as well as their title (i.e. Dean, Vice-president, etc.). Once the user has entered their name and title, the   *
     5                                  ;program will tell them good morning, and that this program will take care of their triangles. After, the program will      *
     6                                  ;prompt the user for the sides of the triangle and its angle (this program solves SAS triangles). If the user inputs an     *
     7                                  ;invalid input (negative number, non-float number, or an input that is not a number such as 2.2.3+A), the program will      *
     8                                  ;let the user know that their input is invalid and will then prompt them for another input. After 3 valid inputs are        *
     9                                  ;entered (2 sides and 1 angle), the program will output a thank you message/confirmation of the user's inputted values.     *
    10                                  ;Now that the program has 3 valid inputs, it will use the formula for solving SAS triangles to find the third side, and     *
    11                                  ;will output said answer, as well as letting the user know that the length of the third side will be sent to the driver.    *
    12                                  ;Before this value is sent, the program will output the new system clock (tics). Once back in the driver, it will let the   *
    13                                  ;user know that it has received the value of the third side, and that a zero will be sent to the operating system.          *                                                                                                      
    14                                  ;                                                                                                                           *
    15                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    16                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    17                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    18                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    19                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    20                                  ;****************************************************************************************************************************
    21                                  
    22                                  
    23                                  
    24                                  
    25                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    26                                  ;Author information
    27                                  ;  Author name: Nathan Warner
    28                                  ;  Author email: nwarner4@csu.fullerton.edu
    29                                  ;
    30                                  ;Program information
    31                                  ;  Program name: Amazing Triangles
    32                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    33                                  ;  Date program began: 2024-Feb-11
    34                                  ;  Date of last update: 2024-Feb-19
    35                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    36                                  ;  Testing: Alpha testing completed.  All functions are correct.
    37                                  ;  Status: Ready for release to customers
    38                                  ;
    39                                  ;Purpose
    40                                  ;  This program will take in two sides and an angle of a triangle, and will output the length of the
    41                                  ;   thrd side to the console, as well as sending the value to the driver.
    42                                  ;
    43                                  ;This file:
    44                                  ;  File name: triangle.asm
    45                                  ;  Language: X86-64
    46                                  ;  Max page width: 124 columns
    47                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    48                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    49                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    50                                  ;  Prototype of this function: double triangle_SAS();
    51                                  ; 
    52                                  ;
    53                                  ;
    54                                  ;
    55                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global input_array
    61                                  
    62                                  extern isfloat
    63                                  extern atof
    64                                  extern printf
    65                                  extern scanf
    66                                  
    67                                  segment .data
    68 00000000 257300                      string_format db "%s", 0
    69 00000003 546865206C61737420-         user_invalid_input db "The last input was invalid and not entered into the array.", 10, 0
    69 0000000C 696E70757420776173-
    69 00000015 20696E76616C696420-
    69 0000001E 616E64206E6F742065-
    69 00000027 6E746572656420696E-
    69 00000030 746F20746865206172-
    69 00000039 7261792E0A00       
    70                                  
    71                                  
    72                                  segment .bss
    73                                  align 64
    74 00000000 <res 340h>              backup_storage_area resb 832
    75                                  
    76                                  
    77                                  segment .text
    78                                  
    79                                  input_array:
    80                                      ;Back up the GPRs (General Purpose Registers)
    81 00000000 55                          push rbp
    82 00000001 4889E5                      mov rbp, rsp
    83 00000004 53                          push rbx
    84 00000005 51                          push rcx
    85 00000006 52                          push rdx
    86 00000007 57                          push rdi
    87 00000008 56                          push rsi
    88 00000009 4150                        push r8
    89 0000000B 4151                        push r9
    90 0000000D 4152                        push r10
    91 0000000F 4153                        push r11
    92 00000011 4154                        push r12
    93 00000013 4155                        push r13
    94 00000015 4156                        push r14
    95 00000017 4157                        push r15
    96 00000019 9C                          pushf
    97                                  
    98                                  
    99                                      ;Backup the registers other than the GPRs
   100 0000001A B807000000                  mov rax,7
   101 0000001F BA00000000                  mov rdx,0
   102 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   103                                  
   104                                  
   105                                      ;Setting up values for input_array execution
   106 0000002C 4989FD                      mov r13, rdi ;r13 is the array
   107 0000002F 4989F6                      mov r14, rsi ;r14 is the max number of values that can be in the array (12)
   108 00000032 B900000000                  mov rcx, 0 ;rcx is the current index
   109                                  
   110                                  
   111                                  
   112 00000037 4881EC00040000              sub rsp, 1024
   113                                  
   114                                  begin:
   115                                      ;Ends the loop if the current array size is 12 (maxed out array)
   116 0000003E 4883F90C                    cmp rcx, 12
   117 00000042 745F                        je quit_loop
   118                                  
   119 00000044 B800000000                  mov rax, 0
   120 00000049 48BF-                       mov rdi, string_format ;"%s"
   120 0000004B [0000000000000000] 
   121 00000053 4889E6                      mov rsi, rsp
   122 00000056 E8(00000000)                call scanf
   123                                  
   124 0000005B 4883F8FF                    cmp rax, -1
   125 0000005F 7442                        je quit_loop
   126                                  
   127                                  
   128                                      ;Check user input with isfloat
   129 00000061 B800000000                  mov rax, 0
   130 00000066 4889E7                      mov rdi, rsp
   131 00000069 E8(00000000)                call isfloat
   132 0000006E 4883F800                    cmp rax, 0
   133 00000072 7419                        je invalid_input
   134                                  
   135                                      
   136                                      ;Set up call to atof
   137 00000074 B800000000                  mov rax, 0
   138 00000079 4889E7                      mov rdi, rsp
   139 0000007C E8(00000000)                call atof ;double atof(char *w)
   140                                  
   141                                      ;copy number into the array
   142 00000081 F2410F1144CD00              movsd [r13+rcx*8], xmm0 ;rcx is the index
   143 00000088 48FFC1                      inc rcx ;rcx++
   144 0000008B EBB1                        jmp begin
   145                                  
   146                                  
   147                                  invalid_input:
   148 0000008D B800000000                  mov rax, 0
   149 00000092 48BF-                       mov rdi, user_invalid_input
   149 00000094 [0300000000000000] 
   150 0000009C E8(00000000)                call printf
   151                                  
   152 000000A1 EB9B                        jmp begin
   153                                  
   154                                  
   155                                  quit_loop: ;No more looping - restore regs, but save rcx
   156 000000A3 4881C400040000              add rsp, 1024 ;Fixes the stack
   157                                  
   158                                  
   159                                  
   160                                  
   161                                      ; ;Back up value in xmm15 before restoring registers
   162                                      ; push qword 0
   163                                      ; movsd [rsp], xmm15
   164                                  
   165                                  
   166                                      ; Restore the values to non-GPRs
   167 000000AA B807000000                  mov rax, 7
   168 000000AF BA00000000                  mov rdx, 0
   169 000000B4 0FAE2C25[00000000]          xrstor [backup_storage_area]
   170                                  
   171                                  
   172                                      ; movsd xmm0, [rsp]
   173                                      ; pop rax
   174                                  
   175                                  
   176                                      ;Restore the GPRs
   177 000000BC 9D                          popf
   178 000000BD 415F                        pop r15
   179 000000BF 415E                        pop r14
   180 000000C1 415D                        pop r13
   181 000000C3 415C                        pop r12
   182 000000C5 415B                        pop r11
   183 000000C7 415A                        pop r10
   184 000000C9 4159                        pop r9
   185 000000CB 4158                        pop r8
   186 000000CD 5E                          pop rsi
   187 000000CE 5F                          pop rdi
   188 000000CF 5A                          pop rdx
   189 000000D0 59                          pop rcx
   190 000000D1 5B                          pop rbx
   191 000000D2 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   192 000000D3 C3                          ret
   193                                  ;End of the function input_array.asm ====================================================================
