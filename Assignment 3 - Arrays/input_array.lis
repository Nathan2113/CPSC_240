     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Amazing Triangles" - This program will take first welcome the user the the program, and then output the     *
     3                                  ;system clock (tics) to the console. After this initial output for the user, the program will then prompt the user for their*
     4                                  ;full name, as well as their title (i.e. Dean, Vice-president, etc.). Once the user has entered their name and title, the   *
     5                                  ;program will tell them good morning, and that this program will take care of their triangles. After, the program will      *
     6                                  ;prompt the user for the sides of the triangle and its angle (this program solves SAS triangles). If the user inputs an     *
     7                                  ;invalid input (negative number, non-float number, or an input that is not a number such as 2.2.3+A), the program will      *
     8                                  ;let the user know that their input is invalid and will then prompt them for another input. After 3 valid inputs are        *
     9                                  ;entered (2 sides and 1 angle), the program will output a thank you message/confirmation of the user's inputted values.     *
    10                                  ;Now that the program has 3 valid inputs, it will use the formula for solving SAS triangles to find the third side, and     *
    11                                  ;will output said answer, as well as letting the user know that the length of the third side will be sent to the driver.    *
    12                                  ;Before this value is sent, the program will output the new system clock (tics). Once back in the driver, it will let the   *
    13                                  ;user know that it has received the value of the third side, and that a zero will be sent to the operating system.          *                                                                                                      
    14                                  ;                                                                                                                           *
    15                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    16                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    17                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    18                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    19                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    20                                  ;****************************************************************************************************************************
    21                                  
    22                                  
    23                                  
    24                                  
    25                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    26                                  ;Author information
    27                                  ;  Author name: Nathan Warner
    28                                  ;  Author email: nwarner4@csu.fullerton.edu
    29                                  ;
    30                                  ;Program information
    31                                  ;  Program name: Amazing Triangles
    32                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    33                                  ;  Date program began: 2024-Feb-11
    34                                  ;  Date of last update: 2024-Feb-19
    35                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    36                                  ;  Testing: Alpha testing completed.  All functions are correct.
    37                                  ;  Status: Ready for release to customers
    38                                  ;
    39                                  ;Purpose
    40                                  ;  This program will take in two sides and an angle of a triangle, and will output the length of the
    41                                  ;   thrd side to the console, as well as sending the value to the driver.
    42                                  ;
    43                                  ;This file:
    44                                  ;  File name: triangle.asm
    45                                  ;  Language: X86-64
    46                                  ;  Max page width: 124 columns
    47                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    48                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    49                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    50                                  ;  Prototype of this function: double triangle_SAS();
    51                                  ; 
    52                                  ;
    53                                  ;
    54                                  ;
    55                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global input_array
    61                                  
    62                                  extern isfloat
    63                                  extern atof
    64                                  extern printf
    65                                  extern scanf
    66                                  
    67                                  segment .data
    68 00000000 257300                      string_format db "%s", 0
    69 00000003 546865206C61737420-         user_invalid_input db "The last input was invalid and not entered into the array.", 10, 0
    69 0000000C 696E70757420776173-
    69 00000015 20696E76616C696420-
    69 0000001E 616E64206E6F742065-
    69 00000027 6E746572656420696E-
    69 00000030 746F20746865206172-
    69 00000039 7261792E0A00       
    70                                  
    71                                      ;TEST
    72 0000003F 5468652066696E616C-         rcx_final_val db "The final value of rcx is: %lu", 10, 0
    72 00000048 2076616C7565206F66-
    72 00000051 207263782069733A20-
    72 0000005A 256C750A00         
    73                                  
    74                                  segment .bss
    75                                  align 64
    76 00000000 <res 340h>              backup_storage_area resb 832
    77                                  
    78                                  
    79                                  segment .text
    80                                  
    81                                  input_array:
    82                                      ;Back up the GPRs (General Purpose Registers)
    83 00000000 55                          push rbp
    84 00000001 4889E5                      mov rbp, rsp
    85 00000004 53                          push rbx
    86 00000005 51                          push rcx
    87 00000006 52                          push rdx
    88 00000007 57                          push rdi
    89 00000008 56                          push rsi
    90 00000009 4150                        push r8
    91 0000000B 4151                        push r9
    92 0000000D 4152                        push r10
    93 0000000F 4153                        push r11
    94 00000011 4154                        push r12
    95 00000013 4155                        push r13
    96 00000015 4156                        push r14
    97 00000017 4157                        push r15
    98 00000019 9C                          pushf
    99                                  
   100                                  
   101                                      ;Backup the registers other than the GPRs
   102 0000001A B807000000                  mov rax,7
   103 0000001F BA00000000                  mov rdx,0
   104 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   105                                  
   106                                  
   107                                      ;Setting up values for input_array execution
   108 0000002C 4989FD                      mov r13, rdi ;r13 is the array
   109 0000002F 4989F6                      mov r14, rsi ;r14 is the max number of values that can be in the array (12)
   110                                      ; mov rcx, 0 ;rcx is the current index
   111 00000032 41BF00000000                mov r15, 0
   112                                  
   113                                  
   114                                  
   115                                      
   116                                  
   117                                  begin:
   118 00000038 4881EC00040000              sub rsp, 1024
   119                                  
   120                                      ;Ends the loop if the current array size is 12 (maxed out array)
   121                                      ; cmp rcx, r14
   122 0000003F 4D39F7                      cmp r15, r14
   123 00000042 746F                        je quit_loop
   124                                  
   125 00000044 B800000000                  mov rax, 0
   126 00000049 48BF-                       mov rdi, string_format ;"%s"
   126 0000004B [0000000000000000] 
   127 00000053 4889E6                      mov rsi, rsp
   128 00000056 E8(00000000)                call scanf
   129                                  
   130 0000005B 4898                        cdqe
   131 0000005D 4883F8FF                    cmp rax, -1
   132 00000061 7450                        je quit_loop
   133                                  
   134                                  
   135                                      ;Check user input with isfloat
   136 00000063 B800000000                  mov rax, 0
   137 00000068 4889E7                      mov rdi, rsp
   138 0000006B E8(00000000)                call isfloat
   139 00000070 4883F800                    cmp rax, 0
   140 00000074 7420                        je invalid_input
   141                                  
   142 00000076 4881C400040000              add rsp, 1024 ;Fixes the stack
   143                                  
   144                                      
   145                                      ;Set up call to atof
   146 0000007D B800000000                  mov rax, 0
   147 00000082 4889E7                      mov rdi, rsp
   148 00000085 E8(00000000)                call atof ;double atof(char *w)
   149                                  
   150                                      ;copy number into the array
   151 0000008A F2410F1144CD00              movsd [r13+rcx*8], xmm0 ;rcx is the index
   152                                      ; inc rcx ;rcx++
   153 00000091 49FFC7                      inc r15
   154 00000094 EBA2                        jmp begin
   155                                  
   156                                  
   157                                  invalid_input:
   158 00000096 4881C400040000              add rsp, 1024 ;Fixes the stack
   159 0000009D B800000000                  mov rax, 0
   160 000000A2 48BF-                       mov rdi, user_invalid_input
   160 000000A4 [0300000000000000] 
   161 000000AC E8(00000000)                call printf
   162                                  
   163 000000B1 EB85                        jmp begin
   164                                  
   165                                  
   166                                  quit_loop: ;No more looping - restore regs, but save rcx
   167 000000B3 4881C400040000              add rsp, 1024
   168                                  
   169                                  
   170                                  
   171                                  
   172                                      ; ;Back up value in xmm15 before restoring registers
   173                                      ; push qword 0
   174                                      ; movsd [rsp], xmm15
   175                                  
   176 000000BA B800000000                  mov rax, 0
   177 000000BF 48BF-                       mov rdi, rcx_final_val
   177 000000C1 [3F00000000000000] 
   178 000000C9 4C89FE                      mov rsi, r15
   179 000000CC E8(00000000)                call printf
   180                                  
   181                                  
   182                                  
   183                                      ; Restore the values to non-GPRs
   184 000000D1 B807000000                  mov rax, 7
   185 000000D6 BA00000000                  mov rdx, 0
   186 000000DB 0FAE2C25[00000000]          xrstor [backup_storage_area]
   187                                  
   188 000000E3 4C89F8                      mov rax, r15
   189                                  
   190                                  
   191                                      ; movsd xmm0, [rsp]
   192                                      ; pop rax
   193                                  
   194                                  
   195                                      ;Restore the GPRs
   196 000000E6 9D                          popf
   197 000000E7 415F                        pop r15
   198 000000E9 415E                        pop r14
   199 000000EB 415D                        pop r13
   200 000000ED 415C                        pop r12
   201 000000EF 415B                        pop r11
   202 000000F1 415A                        pop r10
   203 000000F3 4159                        pop r9
   204 000000F5 4158                        pop r8
   205 000000F7 5E                          pop rsi
   206 000000F8 5F                          pop rdi
   207 000000F9 5A                          pop rdx
   208 000000FA 59                          pop rcx
   209 000000FB 5B                          pop rbx
   210 000000FC 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   211 000000FD C3                          ret
   212                                  ;End of the function input_array.asm ====================================================================
