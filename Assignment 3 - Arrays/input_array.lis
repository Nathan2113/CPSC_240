     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Amazing Triangles" - This program will take first welcome the user the the program, and then output the     *
     3                                  ;system clock (tics) to the console. After this initial output for the user, the program will then prompt the user for their*
     4                                  ;full name, as well as their title (i.e. Dean, Vice-president, etc.). Once the user has entered their name and title, the   *
     5                                  ;program will tell them good morning, and that this program will take care of their triangles. After, the program will      *
     6                                  ;prompt the user for the sides of the triangle and its angle (this program solves SAS triangles). If the user inputs an     *
     7                                  ;invalid input (negative number, non-float number, or an input that is not a number such as 2.2.3+A), the program will      *
     8                                  ;let the user know that their input is invalid and will then prompt them for another input. After 3 valid inputs are        *
     9                                  ;entered (2 sides and 1 angle), the program will output a thank you message/confirmation of the user's inputted values.     *
    10                                  ;Now that the program has 3 valid inputs, it will use the formula for solving SAS triangles to find the third side, and     *
    11                                  ;will output said answer, as well as letting the user know that the length of the third side will be sent to the driver.    *
    12                                  ;Before this value is sent, the program will output the new system clock (tics). Once back in the driver, it will let the   *
    13                                  ;user know that it has received the value of the third side, and that a zero will be sent to the operating system.          *                                                                                                      
    14                                  ;                                                                                                                           *
    15                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    16                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    17                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    18                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    19                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    20                                  ;****************************************************************************************************************************
    21                                  
    22                                  
    23                                  
    24                                  
    25                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    26                                  ;Author information
    27                                  ;  Author name: Nathan Warner
    28                                  ;  Author email: nwarner4@csu.fullerton.edu
    29                                  ;
    30                                  ;Program information
    31                                  ;  Program name: Amazing Triangles
    32                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    33                                  ;  Date program began: 2024-Feb-11
    34                                  ;  Date of last update: 2024-Feb-19
    35                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    36                                  ;  Testing: Alpha testing completed.  All functions are correct.
    37                                  ;  Status: Ready for release to customers
    38                                  ;
    39                                  ;Purpose
    40                                  ;  This program will take in two sides and an angle of a triangle, and will output the length of the
    41                                  ;   thrd side to the console, as well as sending the value to the driver.
    42                                  ;
    43                                  ;This file:
    44                                  ;  File name: triangle.asm
    45                                  ;  Language: X86-64
    46                                  ;  Max page width: 124 columns
    47                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    48                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    49                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    50                                  ;  Prototype of this function: double triangle_SAS();
    51                                  ; 
    52                                  ;
    53                                  ;
    54                                  ;
    55                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global input_array
    61                                  
    62                                  extern isfloat
    63                                  extern atof
    64                                  extern printf
    65                                  extern scanf
    66                                  
    67                                  
    68                                  segment .data
    69                                  ;This section (or segment) is for declaring initialized arrays
    70 00000000 257300                      string_format db "%s", 0
    71 00000003 546865206C61737420-         user_invalid_input db "The last input was invalid and not entered into the array.", 10, 0
    71 0000000C 696E70757420776173-
    71 00000015 20696E76616C696420-
    71 0000001E 616E64206E6F742065-
    71 00000027 6E746572656420696E-
    71 00000030 746F20746865206172-
    71 00000039 7261792E0A00       
    72                                  
    73                                  
    74                                  segment .bss
    75                                  ;This section (or segment) is for declaring empty arrays
    76                                  align 64
    77 00000000 <res 340h>              backup_storage_area resb 832
    78                                  
    79                                  
    80                                  segment .text
    81                                  
    82                                  input_array:
    83                                      ;Back up the GPRs (General Purpose Registers)
    84 00000000 55                          push rbp
    85 00000001 4889E5                      mov rbp, rsp
    86 00000004 53                          push rbx
    87 00000005 51                          push rcx
    88 00000006 52                          push rdx
    89 00000007 57                          push rdi
    90 00000008 56                          push rsi
    91 00000009 4150                        push r8
    92 0000000B 4151                        push r9
    93 0000000D 4152                        push r10
    94 0000000F 4153                        push r11
    95 00000011 4154                        push r12
    96 00000013 4155                        push r13
    97 00000015 4156                        push r14
    98 00000017 4157                        push r15
    99 00000019 9C                          pushf
   100                                  
   101                                  
   102                                      ;Backup the registers other than the GPRs
   103 0000001A B807000000                  mov rax,7
   104 0000001F BA00000000                  mov rdx,0
   105 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   106                                  
   107                                  
   108                                      ;Setting up values for input_array execution
   109 0000002C 4989FD                      mov r13, rdi ;r13 is the array
   110 0000002F 4989F6                      mov r14, rsi ;r14 is the max number of values that can be in the array (12)
   111 00000032 41BF00000000                mov r15, 0 ;r15 is the current index of the array
   112                                  
   113                                  
   114                                  
   115                                      
   116                                  
   117                                  begin:
   118 00000038 4881EC00040000              sub rsp, 1024
   119                                  
   120                                      ;Ends the loop if the current array size is 12 (maxed out array)
   121 0000003F 4D39F7                      cmp r15, r14
   122 00000042 746F                        je quit_loop
   123                                  
   124 00000044 B800000000                  mov rax, 0
   125 00000049 48BF-                       mov rdi, string_format ;"%s"
   125 0000004B [0000000000000000] 
   126 00000053 4889E6                      mov rsi, rsp
   127 00000056 E8(00000000)                call scanf
   128                                  
   129 0000005B 4898                        cdqe
   130 0000005D 4883F8FF                    cmp rax, -1
   131 00000061 7450                        je quit_loop
   132                                  
   133                                  
   134                                      ;Check user input with isfloat
   135 00000063 B800000000                  mov rax, 0
   136 00000068 4889E7                      mov rdi, rsp
   137 0000006B E8(00000000)                call isfloat
   138 00000070 4883F800                    cmp rax, 0
   139 00000074 7420                        je invalid_input
   140                                  
   141                                      
   142                                      ;Set up call to atof
   143 00000076 B800000000                  mov rax, 0
   144 0000007B 4889E7                      mov rdi, rsp
   145 0000007E E8(00000000)                call atof ;double atof(char *w)
   146                                  
   147                                      ;copy number into the array
   148 00000083 F2430F1144FD00              movsd [r13+r15*8], xmm0 ;r15 is the index
   149 0000008A 49FFC7                      inc r15
   150                                  
   151 0000008D 4881C400040000              add rsp, 1024 ;Fixes the stack
   152 00000094 EBA2                        jmp begin
   153                                  
   154                                  
   155                                  invalid_input:
   156 00000096 4881C400040000              add rsp, 1024 ;Fixes the stack
   157 0000009D B800000000                  mov rax, 0
   158 000000A2 48BF-                       mov rdi, user_invalid_input
   158 000000A4 [0300000000000000] 
   159 000000AC E8(00000000)                call printf
   160                                  
   161 000000B1 EB85                        jmp begin
   162                                  
   163                                  
   164                                  quit_loop: ;No more looping - restore regs, but save r15
   165 000000B3 4881C400040000              add rsp, 1024
   166                                  
   167                                  
   168                                  
   169                                      ; Restore the values to non-GPRs
   170 000000BA B807000000                  mov rax, 7
   171 000000BF BA00000000                  mov rdx, 0
   172 000000C4 0FAE2C25[00000000]          xrstor [backup_storage_area]
   173                                  
   174 000000CC 4C89F8                      mov rax, r15
   175                                  
   176                                  
   177                                  
   178                                      ;Restore the GPRs
   179 000000CF 9D                          popf
   180 000000D0 415F                        pop r15
   181 000000D2 415E                        pop r14
   182 000000D4 415D                        pop r13
   183 000000D6 415C                        pop r12
   184 000000D8 415B                        pop r11
   185 000000DA 415A                        pop r10
   186 000000DC 4159                        pop r9
   187 000000DE 4158                        pop r8
   188 000000E0 5E                          pop rsi
   189 000000E1 5F                          pop rdi
   190 000000E2 5A                          pop rdx
   191 000000E3 59                          pop rcx
   192 000000E4 5B                          pop rbx
   193 000000E5 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   194 000000E6 C3                          ret
   195                                  ;End of the function input_array.asm ====================================================================
