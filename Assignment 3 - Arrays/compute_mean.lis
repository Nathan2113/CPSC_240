     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays" - This program will first welcome the user to the program, as well as outputting its developer.     *
     3                                  ;After this initial message, the program will let the user know the directions of the program, which is as follows:         *
     4                                  ;                                                                                                                           *
     5                                  ;"This program will manage your arrays of 64-bit floats                                                                     *
     6                                  ;For the array enter a sequence of 64-bit floats separated by white space.                                                  *
     7                                  ;After the last input press enter followed by Control+D:"                                                                   *
     8                                  ;                                                                                                                           *
     9                                  ;The program will then take in user input, validating each input to make sure they are entering valid float numbers, and    *
    10                                  ;this process is done through the input_array.asm file, using isfloat.asm to validate their inputs. If the user inputs an   *
    11                                  ;invalid input, the program will let them know with the following message:                                                  *
    12                                  ;                                                                                                                           *
    13                                  ;"The last input was invalid and not entered into the array.""                                                              *
    14                                  ;                                                                                                                           *
    15                                  ;Once the array has been fully entered, the program will output the entire array to the screen, which is done in the        *
    16                                  ;output_array.c file using the C language. Once the array has been output, the program will then compute the mean of the    *
    17                                  ;array using compute_mean.asm, and will then use the mean it found to compute the variance using compute_variance.cpp,      *
    18                                  ;which uses C++. Once the variance has been found, the program will output the variance to the screen for the user, and     *
    19                                  ;will then send the variance to main.c, where the program will let the user know that the variance will be kept for         *
    20                                  ;future use, and that a 0 will be sent to the operating system.                                                             *
    21                                  ;                                                                                                                           *
    22                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    23                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    24                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    25                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    26                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    27                                  ;****************************************************************************************************************************
    28                                  
    29                                  
    30                                  
    31                                  
    32                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    33                                  ;Author information
    34                                  ;  Author name: Nathan Warner
    35                                  ;  Author email: nwarner4@csu.fullerton.edu
    36                                  ;
    37                                  ;Program information
    38                                  ;  Program name: Arrays
    39                                  ;  Programming languages: Two modules in C, four modules in x86_64, one module in C++, and one module in bash
    40                                  ;  Date program began: 2024-Mar-3
    41                                  ;  Date of last update: 2024-Mar-7
    42                                  ;  Files in this program: main.c, manager.asm, r.sh, output_array.c, compute_mean.asm, compute_variance.cpp, input_array.asm, isfloat.asm
    43                                  ;  Testing: Alpha testing completed.  All functions are correct.
    44                                  ;  Status: Ready for release to customers
    45                                  ;
    46                                  ;Purpose
    47                                  ;  The program will take in an array of valid floating point numbers from the user, find the mean of the array, 
    48                                  ;       and find the variance, which it will output to the screen and send to main.c
    49                                  ;
    50                                  ;This file:
    51                                  ;  File name: compute_mean.asm
    52                                  ;  Language: X86-64
    53                                  ;  Max page width: 124 columns
    54                                  ;  Assemble (standard): nasm -f elf64 -l compute_mean.lis -o compute_mean.o compute_mean.asm
    55                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    56                                  ;  Prototype of this function: double compute_mean(double *array, int size);
    57                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    58                                  
    59                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    60                                  ;not have its own place of declaration
    61                                  
    62                                  global compute_mean
    63                                  
    64                                  extern printf
    65                                  
    66                                  segment .data
    67                                  ;This section (or segment) is for declaring initialized arrays
    68 00000000 0A5468652072657475-         return_value db 10, "The return value is: %1.6lf", 10, 0
    68 00000009 726E2076616C756520-
    68 00000012 69733A2025312E366C-
    68 0000001B 660A00             
    69 0000001E 256C6600                    format db "%lf", 0
    70 00000022 0A5468652072657475-         return_value_reg db 10, "The return value is: %lu", 10, 0
    70 0000002B 726E2076616C756520-
    70 00000034 69733A20256C750A00 
    71                                  
    72                                  segment .bss
    73                                  ;This section (or segment) is for declaring empty arrays
    74                                  align 64
    75 00000000 <res 340h>              backup_storage_area resb 832
    76                                  
    77                                  
    78                                  segment .text
    79                                  
    80                                  compute_mean:
    81                                      ;Back up the GPRs (General Purpose Registers)
    82 00000000 55                          push rbp
    83 00000001 4889E5                      mov rbp, rsp
    84 00000004 53                          push rbx
    85 00000005 51                          push rcx
    86 00000006 52                          push rdx
    87 00000007 57                          push rdi
    88 00000008 56                          push rsi
    89 00000009 4150                        push r8
    90 0000000B 4151                        push r9
    91 0000000D 4152                        push r10
    92 0000000F 4153                        push r11
    93 00000011 4154                        push r12
    94 00000013 4155                        push r13
    95 00000015 4156                        push r14
    96 00000017 4157                        push r15
    97 00000019 9C                          pushf
    98                                  
    99                                  
   100                                      ;Backup the registers other than the GPRs
   101 0000001A B807000000                  mov rax,7
   102 0000001F BA00000000                  mov rdx,0
   103 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   104                                  
   105                                  
   106                                      ;Setting up values for compute_mean execution
   107 0000002C 4989FD                      mov r13, rdi ;r13 is the array
   108 0000002F 4989F6                      mov r14, rsi ;r14 is the size of the array
   109 00000032 41BF00000000                mov r15, 0   ;r15 is the current index
   110                                  
   111 00000038 F2450F106D00                movsd xmm13, [r13]
   112 0000003E F24D0F2AF6                  cvtsi2sd xmm14, r14 ;Converting size of the array to float and storing value in xmm14
   113                                  
   114                                  
   115                                  begin:
   116                                      ;If the current index (r15) is equal to the size of the array (r14), then the loop terminates
   117 00000043 4D39F7                      cmp r15, r14
   118 00000046 740C                        je quit
   119                                  
   120 00000048 F2470F5864FD00              addsd xmm12, [r13+r15*8]
   121 0000004F 49FFC7                      inc r15
   122 00000052 EBEF                        jmp begin
   123                                      
   124                                  quit:
   125                                      ;Takes the sum of the array and divides it by the number of elements (mean)
   126 00000054 F2450F5EE6                  divsd xmm12, xmm14
   127                                      
   128                                  
   129 00000059 6A00                        push qword 0
   130 0000005B F2440F112424                movsd [rsp], xmm12
   131                                  
   132                                  
   133                                      ; Restore the values to non-GPRs
   134 00000061 B807000000                  mov rax, 7
   135 00000066 BA00000000                  mov rdx, 0
   136 0000006B 0FAE2C25[00000000]          xrstor [backup_storage_area]
   137                                  
   138                                  
   139 00000073 F20F100424                  movsd xmm0, [rsp]
   140 00000078 58                          pop rax
   141                                  
   142                                  
   143                                      ;Restore the GPRs
   144 00000079 9D                          popf
   145 0000007A 415F                        pop r15
   146 0000007C 415E                        pop r14
   147 0000007E 415D                        pop r13
   148 00000080 415C                        pop r12
   149 00000082 415B                        pop r11
   150 00000084 415A                        pop r10
   151 00000086 4159                        pop r9
   152 00000088 4158                        pop r8
   153 0000008A 5E                          pop rsi
   154 0000008B 5F                          pop rdi
   155 0000008C 5A                          pop rdx
   156 0000008D 59                          pop rcx
   157 0000008E 5B                          pop rbx
   158 0000008F 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   159 00000090 C3                          ret
   160                                  ;End of the function compute_mean.asm ====================================================================
