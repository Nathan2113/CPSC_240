     1                                  ; Program name: "Program Name". A short description of the purpose of the program
     2                                  ; Copyright (C) <2023>  <Your Name>
     3                                  
     4                                  ; This file is part of the software program "Program Name".
     5                                  
     6                                  ; "Program Name" is free software: you can redistribute it and/or modify
     7                                  ; it under the terms of the GNU General Public License as published by
     8                                  ; the Free Software Foundation, either version 3 of the License, or
     9                                  ; (at your option) any later version.
    10                                  
    11                                  ; "Program Name" is distributed in the hope that it will be useful,
    12                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    13                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14                                  ; GNU General Public License for more details.
    15                                  
    16                                  ; You should have received a copy of the GNU General Public License
    17                                  ; along with this program.  If not, see <https://www.gnu.org/licenses/>. 
    18                                  
    19                                  ; Author information
    20                                  ;   Author name : Code Goblin
    21                                  ;   Author email: instalock_caitlyn@bronze2.botlane
    22                                  ;   Author section: 240-99
    23                                  ;   Author CWID : 000000000
    24                                  
    25                                  ; For research purpose only. Please don't copy word for word. Avoid academic dishonesty. 
    26                                  
    27                                  global validation
    28                                  
    29                                  extern printf
    30                                  extern fgets
    31                                  extern stdin
    32                                  extern strlen
    33                                  extern atof
    34                                  extern isfloat
    35                                  extern cos
    36                                  
    37                                  float_size equ 60
    38                                  true equ -1
    39                                  false equ 0
    40                                  
    41                                  segment .data
    42 00000000 506C6561736520656E-         prompt_for_float db "Please enter a float number: ", 0
    42 00000009 746572206120666C6F-
    42 00000012 6174206E756D626572-
    42 0000001B 3A2000             
    43 0000001E 546861742061696E27-         print_bad_input db "That ain't no float, try again!", 10, 0 
    43 00000027 74206E6F20666C6F61-
    43 00000030 742C20747279206167-
    43 00000039 61696E210A00       
    44                                  
    45 0000003F 256C6600                    format_float db "%lf", 0
    46                                  
    47 00000043 EA2E4454FB210940            pi dq 3.14159265359
    48 0000004B 0000000000806640            one_eddy dq 180.0
    49                                  
    50                                  segment .bss
    51                                      align 64
    52 00000000 <res 340h>                  storedata resb 832
    53 00000340 <res 3Ch>                   input_float resb float_size
    54                                  
    55                                  segment .text
    56                                  validation:
    57                                      ; Back up GPRs
    58 00000000 55                          push    rbp
    59 00000001 4889E5                      mov     rbp, rsp
    60 00000004 53                          push    rbx
    61 00000005 51                          push    rcx
    62 00000006 52                          push    rdx
    63 00000007 56                          push    rsi
    64 00000008 57                          push    rdi
    65 00000009 4150                        push    r8 
    66 0000000B 4151                        push    r9 
    67 0000000D 4152                        push    r10
    68 0000000F 4153                        push    r11
    69 00000011 4154                        push    r12
    70 00000013 4155                        push    r13
    71 00000015 4156                        push    r14
    72 00000017 4157                        push    r15
    73 00000019 9C                          pushf
    74                                  
    75                                      ; Save all the floating-point numbers
    76 0000001A B807000000                  mov     rax, 7
    77 0000001F BA00000000                  mov     rdx, 0
    78 00000024 0FAE2425[00000000]          xsave   [storedata]
    79                                  
    80                                  get_input:
    81                                      ; Prompt user for a float
    82 0000002C B800000000                  mov     rax, 0
    83 00000031 48BF-                       mov     rdi, prompt_for_float   ; Please enter a float number:
    83 00000033 [0000000000000000] 
    84 0000003B E8(00000000)                call    printf
    85                                  
    86                                      ; Get user name input
    87 00000040 B800000000                  mov     rax, 0
    88 00000045 48BF-                       mov     rdi, input_float
    88 00000047 [4003000000000000] 
    89 0000004F BE3C000000                  mov     rsi, float_size
    90 00000054 488B1425[00000000]          mov     rdx, [stdin]
    91 0000005C E8(00000000)                call    fgets
    92                                  
    93                                      ; Remove the newline character
    94 00000061 B800000000                  mov     rax, 0
    95 00000066 48BF-                       mov     rdi, input_float
    95 00000068 [4003000000000000] 
    96 00000070 E8(00000000)                call    strlen
    97 00000075 C680[3F030000]00            mov     [input_float + rax - 1], byte 0
    98                                  
    99                                      ;Check if input is a float
   100 0000007C B800000000                  mov     rax, 0
   101 00000081 48BF-                       mov     rdi, input_float
   101 00000083 [4003000000000000] 
   102 0000008B E8(00000000)                call    isfloat
   103 00000090 4883F800                    cmp     rax, false
   104 00000094 743E                        je      bad_input
   105                                  
   106                                      ; Convert the input from string to float
   107 00000096 B800000000                  mov     rax, 0
   108 0000009B 48BF-                       mov     rdi, input_float
   108 0000009D [4003000000000000] 
   109 000000A5 E8(00000000)                call    atof
   110 000000AA F2440F10F8                  movsd   xmm15, xmm0 ; xmm15 contains the angle
   111                                  
   112                                      ; Convert the float from degree to radian
   113 000000AF F2440F593C25-               mulsd   xmm15, qword[pi]
   113 000000B5 [43000000]         
   114 000000B9 F2440F5E3C25-               divsd   xmm15, qword[one_eddy]
   114 000000BF [4B000000]         
   115                                  
   116                                      ; Find cos of the angle
   117 000000C3 B801000000                  mov     rax, 1
   118 000000C8 F2410F10C7                  movsd   xmm0, xmm15
   119 000000CD E8(00000000)                call    cos
   120                                  
   121 000000D2 EB19                        jmp     exit
   122                                  
   123                                  bad_input:
   124                                      ; Tell the user the input is bad 
   125 000000D4 B800000000                  mov     rax, 0
   126 000000D9 48BF-                       mov     rdi, print_bad_input    ;That ain't no float, try again!
   126 000000DB [1E00000000000000] 
   127 000000E3 E8(00000000)                call    printf
   128                                  
   129                                      ; 'Loop' back to the beginning
   130 000000E8 E93FFFFFFF                  jmp     get_input
   131                                  
   132                                  exit:
   133                                      ; 'Save' the result onto the stack
   134 000000ED 6A00                        push    qword 0
   135 000000EF F20F110424                  movsd   [rsp], xmm0
   136                                  
   137                                      ; Restore all the floating-point numbers
   138 000000F4 B807000000                  mov     rax, 7
   139 000000F9 BA00000000                  mov     rdx, 0
   140 000000FE 0FAE2C25[00000000]          xrstor  [storedata]
   141                                  
   142                                      ; Retrieve the result from the stack
   143 00000106 F20F100424                  movsd   xmm0, [rsp]
   144 0000010B 58                          pop     rax
   145                                  
   146                                      ;Restore the original values to the GPRs
   147 0000010C 9D                          popf          
   148 0000010D 415F                        pop     r15
   149 0000010F 415E                        pop     r14
   150 00000111 415D                        pop     r13
   151 00000113 415C                        pop     r12
   152 00000115 415B                        pop     r11
   153 00000117 415A                        pop     r10
   154 00000119 4159                        pop     r9 
   155 0000011B 4158                        pop     r8 
   156 0000011D 5F                          pop     rdi
   157 0000011E 5E                          pop     rsi
   158 0000011F 5A                          pop     rdx
   159 00000120 59                          pop     rcx
   160 00000121 5B                          pop     rbx
   161 00000122 5D                          pop     rbp
   162                                  
   163 00000123 C3                          ret
