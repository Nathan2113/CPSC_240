     1                                  ;Change Comments
     2                                  
     3                                  ;****************************************************************************************************************************
     4                                  ;Program name: "Driving Time". This program will take in the user's full name, their title, and the distances they have     *
     5                                  ;traveled from Fullerton -> Santa Ana, Santa Ana -> Long Beach, and Long Beach -> Fullerton, as well as their average       *
     6                                  ;speed for each trip. Once the program has the total distance traveled and the average speed of the entire trip, the        *
     7                                  ;program will calculate the total time of the trip, then the assembly file will send the average speed back to the driver
     8                                  ;function                                                                                                                   *
     9                                  ;                                                                                                                           *
    10                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    11                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    12                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    13                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    14                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    15                                  ;****************************************************************************************************************************
    16                                  
    17                                  
    18                                  
    19                                  
    20                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    21                                  ;Author information
    22                                  ;  Author name: Nathan Warner
    23                                  ;  Author email: nwarner4@csu.fullerton.edu
    24                                  ;
    25                                  ;Program information
    26                                  ;  Program name: Driving Time
    27                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    28                                  ;  Date program began: 2024-Jan-30
    29                                  ;  Date of last update: 2024-Feb-2
    30                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    31                                  ;  Testing: Alpha testing completed.  All functions are correct.
    32                                  ;  Status: Ready for release to customers
    33                                  ;
    34                                  ;Purpose
    35                                  ;  This program will take in total distance traveled and average speed and find the total time of the trip,
    36                                  ;  as well as sending the average speed of the entirety of the trip back to the driver
    37                                  ;
    38                                  ;This file:
    39                                  ;  File name: average.asm
    40                                  ;  Language: X86-64
    41                                  ;  Max page width: 124 columns
    42                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    43                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    44                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    45                                  ;  Prototype of this function: double average();
    46                                  ; 
    47                                  ;
    48                                  ;
    49                                  ;
    50                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    51                                  
    52                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    53                                  ;not have its own place of declaration
    54                                  
    55                                  extern printf
    56                                  
    57                                  extern fgets
    58                                  
    59                                  extern stdin
    60                                  
    61                                  extern strlen
    62                                  
    63                                  extern scanf
    64                                  
    65                                  extern cos
    66                                  
    67                                  global triangle_SAS
    68                                  
    69                                  name_string_size equ 48
    70                                  
    71                                  title_string_size equ 48
    72                                  
    73                                  segment .data
    74                                  ;This section (or segment) is for declaring initialized arrays
    75                                  
    76 00000000 506C6561736520656E-     name_prompt db "Please enter your name: ", 0
    76 00000009 74657220796F757220-
    76 00000012 6E616D653A2000     
    77 00000019 506C6561736520656E-     title_prompt db "Please enter your title (Sergeant, Chief, CEO, President, Teacher, etc): ", 0
    77 00000022 74657220796F757220-
    77 0000002B 7469746C6520285365-
    77 00000034 726765616E742C2043-
    77 0000003D 686965662C2043454F-
    77 00000046 2C2050726573696465-
    77 0000004F 6E742C205465616368-
    77 00000058 65722C20657463293A-
    77 00000061 2000               
    78 00000063 0A476F6F64206D6F72-     good_morning_msg db 10, "Good morning %s %s. We take care of all your triangles.", 10, 0
    78 0000006C 6E696E672025732025-
    78 00000075 732E2057652074616B-
    78 0000007E 652063617265206F66-
    78 00000087 20616C6C20796F7572-
    78 00000090 20747269616E676C65-
    78 00000099 732E0A00           
    79 0000009D 0A506C656173652065-     first_side_prompt db 10, "Please enter the length of the first side: ", 0
    79 000000A6 6E7465722074686520-
    79 000000AF 6C656E677468206F66-
    79 000000B8 207468652066697273-
    79 000000C1 7420736964653A2000 
    80 000000CA 506C6561736520656E-     second_side_prompt db "Please enter the length of the second side: ", 0
    80 000000D3 74657220746865206C-
    80 000000DC 656E677468206F6620-
    80 000000E5 746865207365636F6E-
    80 000000EE 6420736964653A2000 
    81 000000F7 506C6561736520656E-     angle_prompt db "Please enter the angle in degrees: ", 0
    81 00000100 746572207468652061-
    81 00000109 6E676C6520696E2064-
    81 00000112 6567726565733A2000 
    82 0000011B 256C6600                format db "%lf", 0
    83 0000011F 0A4669727374207369-     output_values_test db 10, "First side: %1.6lf, Second side: %1.6lf, Angle size: %1.3lf", 0
    83 00000128 64653A2025312E366C-
    83 00000131 662C205365636F6E64-
    83 0000013A 20736964653A202531-
    83 00000143 2E366C662C20416E67-
    83 0000014C 6C652073697A653A20-
    83 00000155 25312E336C6600     
    84 0000015C 0A546865206C656E67-     output_third_length db 10, "The length of the third side is %1.6lf", 10, 0
    84 00000165 7468206F6620746865-
    84 0000016E 207468697264207369-
    84 00000177 64652069732025312E-
    84 00000180 366C660A00         
    85 00000185 0A546865206C656E67-     length_send_message db 10, "The length will be sent to the driver program", 10, 0
    85 0000018E 74682077696C6C2062-
    85 00000197 652073656E7420746F-
    85 000001A0 207468652064726976-
    85 000001A9 65722070726F677261-
    85 000001B2 6D0A00             
    86 000001B5 0A54686520636F7369-     cosine_test db 10, "The cosine of the angle is: %1.6lf", 10, 10, 0
    86 000001BE 6E65206F6620746865-
    86 000001C7 20616E676C65206973-
    86 000001D0 3A2025312E366C660A-
    86 000001D9 0A00               
    87 000001DB 0A5468652073717561-     square_val_test db 10, "The squared value is: %1.6lf", 10, 0
    87 000001E4 7265642076616C7565-
    87 000001ED 2069733A2025312E36-
    87 000001F6 6C660A00           
    88 000001FA 0A5468652063757272-     current_2_val_test db 10, "The current values being multiplied are: %1.6lf, and %1.6lf", 10, 0
    88 00000203 656E742076616C7565-
    88 0000020C 73206265696E67206D-
    88 00000215 756C7469706C696564-
    88 0000021E 206172653A2025312E-
    88 00000227 366C662C20616E6420-
    88 00000230 25312E366C660A00   
    89 00000238 0A5468652063757272-     current_1_val_test db 10, "The current value being held is: %1.6lf", 10, 0
    89 00000241 656E742076616C7565-
    89 0000024A 206265696E67206865-
    89 00000253 6C642069733A202531-
    89 0000025C 2E366C660A00       
    90 00000262 0A54686520636F7369-     cosine_val_test db 10, "The cosine of the angle is %.16lf", 10, 0
    90 0000026B 6E65206F6620746865-
    90 00000274 20616E676C65206973-
    90 0000027D 20252E31366C660A00 
    91 00000286 0A5468652072657375-     part_1_output_test db 10, "The result of b^2 + c^2 is: %1.6lf", 10, 0
    91 0000028F 6C74206F6620625E32-
    91 00000298 202B20635E32206973-
    91 000002A1 3A2025312E366C660A-
    91 000002AA 00                 
    92 000002AB 0A5468652072657375-     part_2_output_test db 10, "The result of 2bc(cosA) is: %1.6lf", 10, 0
    92 000002B4 6C74206F6620326263-
    92 000002BD 28636F734129206973-
    92 000002C6 3A2025312E366C660A-
    92 000002CF 00                 
    93 000002D0 0A5468652072657375-     subtraction_val_test db 10, "The result of the subtraction is: %1.6lf", 10, 0
    93 000002D9 6C74206F6620746865-
    93 000002E2 207375627472616374-
    93 000002EB 696F6E2069733A2025-
    93 000002F4 312E366C660A00     
    94 000002FB 0A625E32202B20635E-     test_addition_result db 10, "b^2 + c^2 is: %1.6lf", 10, 0
    94 00000304 322069733A2025312E-
    94 0000030D 366C660A00         
    95 00000312 0A322A622A63206973-     test_mult_result db 10, "2*b*c is: %1.6lf", 10, 0
    95 0000031B 3A2025312E366C660A-
    95 00000324 00                 
    96                                  
    97 00000325 0000000000000040        val dq 2.0
    98 0000032D 0000000000806640        angle_180 dq 180.0
    99 00000335 EA2E4454FB210940        pi dq 3.14159265359
   100                                  
   101                                  
   102                                  segment .bss
   103                                  ;This section (or segment) is for declaring empty arrays
   104                                  
   105                                  align 64
   106 00000000 <res 340h>              backup_storage_area resb 832
   107                                  
   108 00000340 <res 30h>               user_name resb name_string_size
   109                                  
   110 00000370 <res 30h>               user_title resb title_string_size
   111                                  
   112                                  segment .text
   113                                  
   114                                  triangle_SAS:
   115                                  
   116                                  ;Back up the GPRs (General Purpose Registers)
   117 00000000 55                      push rbp
   118 00000001 4889E5                  mov rbp, rsp
   119 00000004 53                      push rbx
   120 00000005 51                      push rcx
   121 00000006 52                      push rdx
   122 00000007 57                      push rdi
   123 00000008 56                      push rsi
   124 00000009 4150                    push r8
   125 0000000B 4151                    push r9
   126 0000000D 4152                    push r10
   127 0000000F 4153                    push r11
   128 00000011 4154                    push r12
   129 00000013 4155                    push r13
   130 00000015 4156                    push r14
   131 00000017 4157                    push r15
   132 00000019 9C                      pushf
   133                                  
   134                                  ;Backup the registers other than the GPRs
   135 0000001A B807000000              mov rax,7
   136 0000001F BA00000000              mov rdx,0
   137 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
   138                                  
   139                                  ;Output prompt for first and last name
   140 0000002C B800000000              mov rax, 0
   141 00000031 48BF-                   mov rdi, name_prompt
   141 00000033 [0000000000000000] 
   142 0000003B E8(00000000)            call printf
   143                                  
   144                                  ;Input user names
   145 00000040 B800000000              mov rax, 0
   146 00000045 48BF-                   mov rdi, user_name
   146 00000047 [4003000000000000] 
   147 0000004F BE30000000              mov rsi, name_string_size
   148 00000054 488B1425[00000000]      mov rdx, [stdin]
   149 0000005C E8(00000000)            call fgets
   150                                  
   151                                  ;Remove newline
   152 00000061 B800000000              mov rax, 0
   153 00000066 48BF-                   mov rdi, user_name
   153 00000068 [4003000000000000] 
   154 00000070 E8(00000000)            call strlen
   155 00000075 C680[3F030000]00        mov [user_name+rax-1], byte 0
   156                                  
   157                                  ;Output prompt for user's title
   158 0000007C B800000000              mov rax, 0
   159 00000081 48BF-                   mov rdi, title_prompt
   159 00000083 [1900000000000000] 
   160 0000008B E8(00000000)            call printf
   161                                  
   162                                  ;Input user title
   163 00000090 B800000000              mov rax, 0
   164 00000095 48BF-                   mov rdi, user_title
   164 00000097 [7003000000000000] 
   165 0000009F BE30000000              mov rsi, title_string_size
   166 000000A4 488B1425[00000000]      mov rdx, [stdin]
   167 000000AC E8(00000000)            call fgets
   168                                  
   169                                  ;Remove newline
   170 000000B1 B800000000              mov rax, 0
   171 000000B6 48BF-                   mov rdi, user_title
   171 000000B8 [7003000000000000] 
   172 000000C0 E8(00000000)            call strlen
   173 000000C5 C680[6F030000]00        mov [user_title+rax-1], byte 0
   174                                  
   175                                  
   176                                  
   177                                  ;Say good morning to the user
   178 000000CC B800000000              mov rax, 0
   179 000000D1 48BF-                   mov rdi, good_morning_msg
   179 000000D3 [6300000000000000] 
   180 000000DB 48BE-                   mov rsi, user_title
   180 000000DD [7003000000000000] 
   181 000000E5 48BA-                   mov rdx, user_name
   181 000000E7 [4003000000000000] 
   182 000000EF E8(00000000)            call printf
   183                                  
   184                                  
   185                                  
   186                                  ;Ask for length of first side
   187 000000F4 B800000000              mov rax, 0
   188 000000F9 48BF-                   mov rdi, first_side_prompt
   188 000000FB [9D00000000000000] 
   189 00000103 E8(00000000)            call printf
   190                                  
   191                                  ;Input length of first side
   192 00000108 48BF-                   mov rdi, format
   192 0000010A [1B01000000000000] 
   193 00000112 6AF7                    push qword -9
   194 00000114 6AF7                    push qword -9
   195 00000116 4889E6                  mov rsi, rsp
   196 00000119 E8(00000000)            call scanf
   197 0000011E F2440F100424            movsd xmm8, [rsp]
   198 00000124 4159                    pop r9
   199 00000126 4158                    pop r8
   200                                  
   201                                  
   202                                  
   203                                  ;Ask for length of second side
   204 00000128 B800000000              mov rax, 0
   205 0000012D 48BF-                   mov rdi, second_side_prompt
   205 0000012F [CA00000000000000] 
   206 00000137 E8(00000000)            call printf
   207                                  
   208                                  ;Input length of second side
   209 0000013C 48BF-                   mov rdi, format
   209 0000013E [1B01000000000000] 
   210 00000146 6AF7                    push qword -9
   211 00000148 6AF7                    push qword -9
   212 0000014A 4889E6                  mov rsi, rsp
   213 0000014D E8(00000000)            call scanf
   214 00000152 F2440F100C24            movsd xmm9, [rsp]
   215 00000158 4159                    pop r9
   216 0000015A 4158                    pop r8
   217                                  
   218                                  
   219                                  ;Ask for size of the angle
   220 0000015C B800000000              mov rax, 0
   221 00000161 48BF-                   mov rdi, angle_prompt
   221 00000163 [F700000000000000] 
   222 0000016B E8(00000000)            call printf
   223                                  
   224                                  ;Input size of angle
   225 00000170 48BF-                   mov rdi, format
   225 00000172 [1B01000000000000] 
   226 0000017A 6AF7                    push qword -9
   227 0000017C 6AF7                    push qword -9
   228 0000017E 4889E6                  mov rsi, rsp
   229 00000181 E8(00000000)            call scanf
   230 00000186 F2440F101424            movsd xmm10, [rsp]
   231 0000018C 4159                    pop r9
   232 0000018E 4158                    pop r8
   233                                  
   234                                  
   235                                  
   236                                  ;Calculate the length of the third side, answer should come out to 9.01971
   237                                  ;Formula for SAS Triangles: a^2 = b^2 + c^2 - 2bc(cosA)
   238                                  ;The following registers and their respective values they hold:
   239                                  ;b = xmm8
   240                                  ;c = xmm9
   241                                  ;A = xmm10
   242                                  ;b^2 = xmm11
   243                                  ;c^2 = xmm12
   244                                  ;2 = xmm13
   245                                  ;2*b*c = xmm13 (values will be multiplied into xmm13, which already holds 2)
   246                                  ;cos(A) = xmm14
   247                                  ;a = xmm15 (value of third side being calculated)
   248                                  ;xmm11 will hold the cosine of the angle
   249                                  
   250                                  
   251                                  
   252                                  
   253                                  ;Square value of b (xmm8) and store value in xmm11
   254 00000190 F2450F10D8              movsd xmm11, xmm8
   255 00000195 F2450F59DB              mulsd xmm11, xmm11
   256                                  
   257                                  ; ;Output square value
   258                                  ; mov rax, 1
   259                                  ; mov rdi, square_val_test
   260                                  ; mov rsi, format
   261                                  ; movsd xmm0, xmm11
   262                                  ; call printf
   263                                  
   264                                  
   265                                  
   266                                  ;Square value of c (xmm9) and store value in xmm12
   267 0000019A F2450F10E1              movsd xmm12, xmm9
   268 0000019F F2450F59E4              mulsd xmm12, xmm12
   269                                  
   270                                  ; ;Output square value
   271                                  ; mov rax, 1
   272                                  ; mov rdi, square_val_test
   273                                  ; mov rsi, format
   274                                  ; movsd xmm0, xmm12
   275                                  ; call printf
   276                                  
   277                                  
   278                                  ;Add b^2 and c^2 (xmm8 + xmm9) and store result in xmm11
   279 000001A4 F2450F58DC              addsd xmm11, xmm12
   280                                  
   281                                  ; ;Output result of b^2 + c^2
   282                                  ; mov rax, 1
   283                                  ; mov rdi, test_addition_result
   284                                  ; mov rsi, format
   285                                  ; movsd xmm0, xmm11
   286                                  ; call printf
   287                                  
   288                                  
   289                                  
   290                                  ;Block of code for 2*b*c
   291                                  ;2 will be stored in xmm13
   292                                  ;Product of 2*b*c
   293 000001A9 F2440F102C25-           movsd xmm13, qword [val]
   293 000001AF [25030000]         
   294 000001B3 F2450F59E8              mulsd xmm13, xmm8
   295 000001B8 F2450F59E9              mulsd xmm13, xmm9
   296                                  
   297                                  ; ;Output result of 2*b*c
   298                                  ; mov rax, 1
   299                                  ; mov rdi, test_mult_result
   300                                  ; mov rsi, format
   301                                  ; movsd xmm0, xmm13
   302                                  ; call printf
   303                                  
   304                                  
   305                                  ;Convert degrees to radians before calling cosine
   306 000001BD F2440F100425-           movsd xmm8, qword [angle_180]
   306 000001C3 [2D030000]         
   307 000001C7 F2440F100C25-           movsd xmm9, qword [pi]
   307 000001CD [35030000]         
   308 000001D1 F2450F5EC8              divsd xmm9, xmm8
   309 000001D6 F2450F59D1              mulsd xmm10, xmm9
   310                                  
   311                                  ;Cosine function
   312 000001DB B801000000              mov rax, 1
   313 000001E0 F2410F10C2              movsd xmm0, xmm10
   314 000001E5 E8(00000000)            call cos
   315 000001EA F2440F10F0              movsd xmm14, xmm0
   316                                  
   317                                  
   318                                  ; ;Output result of cosine function
   319                                  ; mov rax, 1
   320                                  ; mov rdi, cosine_test
   321                                  ; mov rsi, format
   322                                  ; movsd xmm0, xmm14
   323                                  ; call printf
   324                                  
   325                                  
   326                                  
   327                                  ;Multiply (2*b*c) * cos(A)
   328 000001EF F2450F59F5              mulsd xmm14, xmm13
   329                                  
   330                                  
   331                                  ; ;Output value of b^2 + c^2
   332                                  ; mov rax, 1
   333                                  ; mov rdi, part_1_output_test
   334                                  ; mov rsi, format
   335                                  ; movsd xmm0, xmm11
   336                                  ; call printf
   337                                  
   338                                  ; ;Output value of 2bc(cosA)
   339                                  ; mov rax, 1
   340                                  ; mov rdi, part_2_output_test
   341                                  ; mov rsi, format
   342                                  ; movsd xmm0, xmm14
   343                                  ; call printf
   344                                  
   345                                  
   346                                  ;Subtract b^2 + c^2 - 2bc(cosA) (xmm11 - xmm14)
   347 000001F4 F2450F5CDE              subsd xmm11, xmm14
   348                                  
   349                                  ; ;Output the value of the subtraction
   350                                  ; mov rax, 1
   351                                  ; mov rdi, subtraction_val_test
   352                                  ; mov rsi, format
   353                                  ; movsd xmm0, xmm11
   354                                  ; call printf
   355                                  
   356                                  ;Move the difference into xmm15 and square root the value
   357 000001F9 F2450F10FB              movsd xmm15, xmm11
   358 000001FE F2450F51FF              sqrtsd xmm15, xmm15
   359                                  
   360                                  
   361                                  ;Output length of third side
   362 00000203 B801000000              mov rax, 1
   363 00000208 48BF-                   mov rdi, output_third_length
   363 0000020A [5C01000000000000] 
   364 00000212 48BE-                   mov rsi, format
   364 00000214 [1B01000000000000] 
   365 0000021C F2410F10C7              movsd xmm0, xmm15
   366 00000221 E8(00000000)            call printf
   367                                  
   368                                  
   369                                  
   370                                  ;Output confirmation that the third length is being sent to driver
   371 00000226 B801000000              mov rax, 1
   372 0000022B 48BF-                   mov rdi, length_send_message
   372 0000022D [8501000000000000] 
   373 00000235 48BE-                   mov rsi, format
   373 00000237 [1B01000000000000] 
   374 0000023F F2410F10C7              movsd xmm0, xmm15
   375 00000244 E8(00000000)            call printf
   376                                  
   377                                  
   378                                  ;Back up value in xmm14 before restoring registers
   379 00000249 6A00                    push qword 0
   380 0000024B F2440F113C24            movsd [rsp], xmm15
   381                                  
   382                                  
   383                                  ;Restore the values to non-GPRs
   384 00000251 B807000000              mov rax, 7
   385 00000256 BA00000000              mov rdx, 0
   386 0000025B 0FAE2C25[00000000]      xrstor [backup_storage_area]
   387                                  
   388                                  
   389 00000263 F20F100424              movsd xmm0, [rsp]
   390 00000268 58                      pop rax
   391                                  
   392                                  
   393                                  ;Restore the GPRs
   394 00000269 9D                      popf
   395 0000026A 415F                    pop r15
   396 0000026C 415E                    pop r14
   397 0000026E 415D                    pop r13
   398 00000270 415C                    pop r12
   399 00000272 415B                    pop r11
   400 00000274 415A                    pop r10
   401 00000276 4159                    pop r9
   402 00000278 4158                    pop r8
   403 0000027A 5E                      pop rsi
   404 0000027B 5F                      pop rdi
   405 0000027C 5A                      pop rdx
   406 0000027D 59                      pop rcx
   407 0000027E 5B                      pop rbx
   408 0000027F 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   409 00000280 C3                      ret
   410                                  ;End of the function average.asm ====================================================================
   411                                  
   412                                  ;Change Comments
