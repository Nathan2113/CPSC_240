     1                                  ;Change Comments
     2                                  
     3                                  ;****************************************************************************************************************************
     4                                  ;Program name: "Driving Time". This program will take in the user's full name, their title, and the distances they have     *
     5                                  ;traveled from Fullerton -> Santa Ana, Santa Ana -> Long Beach, and Long Beach -> Fullerton, as well as their average       *
     6                                  ;speed for each trip. Once the program has the total distance traveled and the average speed of the entire trip, the        *
     7                                  ;program will calculate the total time of the trip, then the assembly file will send the average speed back to the driver
     8                                  ;function                                                                                                                   *
     9                                  ;                                                                                                                           *
    10                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    11                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    12                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    13                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    14                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    15                                  ;****************************************************************************************************************************
    16                                  
    17                                  
    18                                  
    19                                  
    20                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    21                                  ;Author information
    22                                  ;  Author name: Nathan Warner
    23                                  ;  Author email: nwarner4@csu.fullerton.edu
    24                                  ;
    25                                  ;Program information
    26                                  ;  Program name: Driving Time
    27                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    28                                  ;  Date program began: 2024-Jan-30
    29                                  ;  Date of last update: 2024-Feb-2
    30                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    31                                  ;  Testing: Alpha testing completed.  All functions are correct.
    32                                  ;  Status: Ready for release to customers
    33                                  ;
    34                                  ;Purpose
    35                                  ;  This program will take in total distance traveled and average speed and find the total time of the trip,
    36                                  ;  as well as sending the average speed of the entirety of the trip back to the driver
    37                                  ;
    38                                  ;This file:
    39                                  ;  File name: average.asm
    40                                  ;  Language: X86-64
    41                                  ;  Max page width: 124 columns
    42                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    43                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    44                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    45                                  ;  Prototype of this function: double average();
    46                                  ; 
    47                                  ;
    48                                  ;
    49                                  ;
    50                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    51                                  
    52                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    53                                  ;not have its own place of declaration
    54                                  
    55                                  global triangle_SAS
    56                                  
    57                                  extern printf
    58                                  extern fgets
    59                                  extern stdin
    60                                  extern strlen
    61                                  extern scanf
    62                                  extern cos
    63                                  extern atof
    64                                  extern isfloat
    65                                  
    66                                  name_string_size equ 48
    67                                  title_string_size equ 48
    68                                  
    69                                  float_size equ 60
    70                                  true equ -1
    71                                  false equ 0
    72                                  
    73                                  segment .data
    74                                  ;This section (or segment) is for declaring initialized arrays
    75                                  
    76 00000000 0A506C656173652065-     name_prompt db 10, "Please enter your name: ", 0
    76 00000009 6E74657220796F7572-
    76 00000012 206E616D653A2000   
    77 0000001A 0A506C656173652065-     title_prompt db 10, "Please enter your title (Sergeant, Chief, CEO, President, Teacher, etc): ", 0
    77 00000023 6E74657220796F7572-
    77 0000002C 207469746C65202853-
    77 00000035 65726765616E742C20-
    77 0000003E 43686965662C204345-
    77 00000047 4F2C20507265736964-
    77 00000050 656E742C2054656163-
    77 00000059 6865722C2065746329-
    77 00000062 3A2000             
    78 00000065 0A476F6F64206D6F72-     good_morning_msg db 10, "Good morning %s %s. We take care of all your triangles.", 10, 10, 0
    78 0000006E 6E696E672025732025-
    78 00000077 732E2057652074616B-
    78 00000080 652063617265206F66-
    78 00000089 20616C6C20796F7572-
    78 00000092 20747269616E676C65-
    78 0000009B 732E0A0A00         
    79 000000A0 506C6561736520656E-     first_side_prompt db "Please enter the length of the first side: ", 0
    79 000000A9 74657220746865206C-
    79 000000B2 656E677468206F6620-
    79 000000BB 746865206669727374-
    79 000000C4 20736964653A2000   
    80 000000CC 506C6561736520656E-     second_side_prompt db "Please enter the length of the second side: ", 0
    80 000000D5 74657220746865206C-
    80 000000DE 656E677468206F6620-
    80 000000E7 746865207365636F6E-
    80 000000F0 6420736964653A2000 
    81 000000F9 506C6561736520656E-     angle_prompt db "Please enter the angle in degrees: ", 0
    81 00000102 746572207468652061-
    81 0000010B 6E676C6520696E2064-
    81 00000114 6567726565733A2000 
    82 0000011D 256C6600                format db "%lf", 0
    83 00000121 0A4669727374207369-     output_values_test db 10, "First side: %1.6lf, Second side: %1.6lf, Angle size: %1.3lf", 0
    83 0000012A 64653A2025312E366C-
    83 00000133 662C205365636F6E64-
    83 0000013C 20736964653A202531-
    83 00000145 2E366C662C20416E67-
    83 0000014E 6C652073697A653A20-
    83 00000157 25312E336C6600     
    84 0000015E 0A546865206C656E67-     output_third_length db 10, "The length of the third side is %1.6lf", 10, 0
    84 00000167 7468206F6620746865-
    84 00000170 207468697264207369-
    84 00000179 64652069732025312E-
    84 00000182 366C660A00         
    85 00000187 0A546865206C656E67-     length_send_message db 10, "The length will be sent to the driver program", 10, 0
    85 00000190 74682077696C6C2062-
    85 00000199 652073656E7420746F-
    85 000001A2 207468652064726976-
    85 000001AB 65722070726F677261-
    85 000001B4 6D0A00             
    86 000001B7 496E76616C69642069-     print_bad_input db "Invalid input. Try again", 10, 0
    86 000001C0 6E7075742E20547279-
    86 000001C9 20616761696E0A00   
    87 000001D1 0A5468616E6B20796F-     thank_you_message db 10, "Thank you %s. You entered %1.6lf %1.6lf and %1.6lf", 10, 0
    87 000001DA 752025732E20596F75-
    87 000001E3 20656E746572656420-
    87 000001EC 25312E366C66202531-
    87 000001F5 2E366C6620616E6420-
    87 000001FE 25312E366C660A00   
    88                                  
    89 00000206 0000000000000040        two dq 2.0
    90 0000020E 0000000000806640        angle_180 dq 180.0
    91 00000216 EA2E4454FB210940        pi dq 3.14159265359
    92                                  
    93                                  
    94                                  segment .bss
    95                                  ;This section (or segment) is for declaring empty arrays
    96                                  
    97                                  align 64
    98 00000000 <res 340h>              backup_storage_area resb 832
    99                                  
   100 00000340 <res 30h>               user_name resb name_string_size
   101                                  
   102 00000370 <res 30h>               user_title resb title_string_size
   103                                  
   104                                  segment .text
   105                                  
   106                                  triangle_SAS:
   107                                  
   108                                      ;Back up the GPRs (General Purpose Registers)
   109 00000000 55                          push rbp
   110 00000001 4889E5                      mov rbp, rsp
   111 00000004 53                          push rbx
   112 00000005 51                          push rcx
   113 00000006 52                          push rdx
   114 00000007 57                          push rdi
   115 00000008 56                          push rsi
   116 00000009 4150                        push r8
   117 0000000B 4151                        push r9
   118 0000000D 4152                        push r10
   119 0000000F 4153                        push r11
   120 00000011 4154                        push r12
   121 00000013 4155                        push r13
   122 00000015 4156                        push r14
   123 00000017 4157                        push r15
   124 00000019 9C                          pushf
   125                                  
   126                                      ;Backup the registers other than the GPRs
   127 0000001A B807000000                  mov rax,7
   128 0000001F BA00000000                  mov rdx,0
   129 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   130                                  
   131                                      ;Output prompt for first and last name
   132 0000002C B800000000                  mov rax, 0
   133 00000031 48BF-                       mov rdi, name_prompt
   133 00000033 [0000000000000000] 
   134 0000003B E8(00000000)                call printf
   135                                  
   136                                      ;Input user names
   137 00000040 B800000000                  mov rax, 0
   138 00000045 48BF-                       mov rdi, user_name
   138 00000047 [4003000000000000] 
   139 0000004F BE30000000                  mov rsi, name_string_size
   140 00000054 488B1425[00000000]          mov rdx, [stdin]
   141 0000005C E8(00000000)                call fgets
   142                                  
   143                                      ;Remove newline
   144 00000061 B800000000                  mov rax, 0
   145 00000066 48BF-                       mov rdi, user_name
   145 00000068 [4003000000000000] 
   146 00000070 E8(00000000)                call strlen
   147 00000075 C680[3F030000]00            mov [user_name+rax-1], byte 0
   148                                  
   149                                      ;Output prompt for user's title
   150 0000007C B800000000                  mov rax, 0
   151 00000081 48BF-                       mov rdi, title_prompt
   151 00000083 [1A00000000000000] 
   152 0000008B E8(00000000)                call printf
   153                                  
   154                                      ;Input user title
   155 00000090 B800000000                  mov rax, 0
   156 00000095 48BF-                       mov rdi, user_title
   156 00000097 [7003000000000000] 
   157 0000009F BE30000000                  mov rsi, title_string_size
   158 000000A4 488B1425[00000000]          mov rdx, [stdin]
   159 000000AC E8(00000000)                call fgets
   160                                  
   161                                      ;Remove newline
   162 000000B1 B800000000                  mov rax, 0
   163 000000B6 48BF-                       mov rdi, user_title
   163 000000B8 [7003000000000000] 
   164 000000C0 E8(00000000)                call strlen
   165 000000C5 C680[6F030000]00            mov [user_title+rax-1], byte 0
   166                                  
   167                                  
   168                                  
   169                                      ;Say good morning to the user
   170 000000CC B800000000                  mov rax, 0
   171 000000D1 48BF-                       mov rdi, good_morning_msg
   171 000000D3 [6500000000000000] 
   172 000000DB 48BE-                       mov rsi, user_title
   172 000000DD [7003000000000000] 
   173 000000E5 48BA-                       mov rdx, user_name
   173 000000E7 [4003000000000000] 
   174 000000EF E8(00000000)                call printf
   175                                  
   176 000000F4 41BF00000000                mov r15, 0 ;r15 is used to determine which input block to jump to (0 = first side, 1 = second side, 2 = angle)
   177                                  
   178                                  get_first_side:
   179                                      ;Ask for length of first side
   180 000000FA B800000000                  mov rax, 0
   181 000000FF 48BF-                       mov rdi, first_side_prompt
   181 00000101 [A000000000000000] 
   182 00000109 E8(00000000)                call printf
   183                                  
   184                                  
   185                                      ;Gets user input for first side
   186 0000010E B800000000                  mov rax, 0
   187 00000113 4881EC00100000              sub rsp, 4096
   188 0000011A 4889E7                      mov rdi, rsp
   189 0000011D BE00100000                  mov rsi, 4096
   190 00000122 488B1425[00000000]          mov rdx, [stdin]
   191 0000012A E8(00000000)                call fgets
   192                                  
   193                                      ;Remove newline
   194 0000012F B800000000                  mov rax, 0
   195 00000134 4889E7                      mov rdi, rsp
   196 00000137 E8(00000000)                call strlen
   197 0000013C C64404FF00                  mov [rsp + rax - 1], byte 0
   198                                  
   199                                      ;Check if input is a postive float
   200 00000141 B800000000                  mov rax, 0
   201 00000146 4889E7                      mov rdi, rsp
   202 00000149 E8(00000000)                call isfloat
   203 0000014E 4883F800                    cmp rax, false
   204 00000152 0F8415010000                je bad_input
   205                                  
   206                                      ;Convert the input from string to float
   207 00000158 B800000000                  mov rax, 0
   208 0000015D 4889E7                      mov rdi, rsp
   209 00000160 E8(00000000)                call atof
   210 00000165 F2440F10D0                  movsd xmm10, xmm0
   211                                  
   212                                      ;Adds 1 to r15, which enables the program to jump to get_second_side after invalid inputs
   213 0000016A 4983C701                    add r15, 1
   214                                  
   215                                      ;Fixes the stack
   216 0000016E 4881C400100000              add rsp, 4096
   217                                  
   218 00000175 EB00                        jmp get_second_side
   219                                  
   220                                  
   221                                  
   222                                  get_second_side:
   223                                      ;Ask for length of second side
   224 00000177 B800000000                  mov rax, 0
   225 0000017C 48BF-                       mov rdi, second_side_prompt
   225 0000017E [CC00000000000000] 
   226 00000186 E8(00000000)                call printf
   227                                  
   228                                  
   229                                      ;Gets user input for second side
   230 0000018B B800000000                  mov rax, 0
   231 00000190 4881EC00100000              sub rsp, 4096
   232 00000197 4889E7                      mov rdi, rsp
   233 0000019A BE00100000                  mov rsi, 4096
   234 0000019F 488B1425[00000000]          mov rdx, [stdin]
   235 000001A7 E8(00000000)                call fgets
   236                                  
   237                                      ;Remove newline
   238 000001AC B800000000                  mov rax, 0
   239 000001B1 4889E7                      mov rdi, rsp
   240 000001B4 E8(00000000)                call strlen
   241 000001B9 C64404FF00                  mov [rsp + rax - 1], byte 0
   242                                  
   243                                      ;Check if input is a float
   244 000001BE B800000000                  mov rax, 0
   245 000001C3 4889E7                      mov rdi, rsp
   246 000001C6 E8(00000000)                call isfloat
   247 000001CB 4883F800                    cmp rax, false
   248 000001CF 0F8498000000                je bad_input
   249                                  
   250                                      ;Convert the input from string to float
   251 000001D5 B800000000                  mov rax, 0
   252 000001DA 4889E7                      mov rdi, rsp
   253 000001DD E8(00000000)                call atof
   254 000001E2 F2440F10D8                  movsd xmm11, xmm0
   255                                  
   256                                      ;Adds 1 to r15, which enables the program to jump to get_second_side after invalid inputs
   257 000001E7 4983C701                    add r15, 1
   258                                  
   259                                      ;Fixes the stack
   260 000001EB 4881C400100000              add rsp, 4096
   261                                  
   262 000001F2 EB00                        jmp get_angle
   263                                  
   264                                  
   265                                  
   266                                  get_angle:
   267                                      ;Ask for size of the angle
   268 000001F4 B800000000                  mov rax, 0
   269 000001F9 48BF-                       mov rdi, angle_prompt
   269 000001FB [F900000000000000] 
   270 00000203 E8(00000000)                call printf
   271                                  
   272                                  
   273                                      ;Gets user input for angle
   274 00000208 B800000000                  mov rax, 0
   275 0000020D 4881EC00100000              sub rsp, 4096
   276 00000214 4889E7                      mov rdi, rsp
   277 00000217 BE00100000                  mov rsi, 4096
   278 0000021C 488B1425[00000000]          mov rdx, [stdin]
   279 00000224 E8(00000000)                call fgets
   280                                  
   281                                      ;Remove newline
   282 00000229 B800000000                  mov rax, 0
   283 0000022E 4889E7                      mov rdi, rsp
   284 00000231 E8(00000000)                call strlen
   285 00000236 C64404FF00                  mov [rsp + rax - 1], byte 0
   286                                  
   287                                      ;Check if input is a float
   288 0000023B B800000000                  mov rax, 0
   289 00000240 4889E7                      mov rdi, rsp
   290 00000243 E8(00000000)                call isfloat
   291 00000248 4883F800                    cmp rax, false
   292 0000024C 741F                        je bad_input
   293                                  
   294                                      ;Convert the input from string to float
   295 0000024E B800000000                  mov rax, 0
   296 00000253 4889E7                      mov rdi, rsp
   297 00000256 E8(00000000)                call atof
   298 0000025B F2440F10E0                  movsd xmm12, xmm0
   299                                  
   300                                      ;Adds 1 to r15, which enables the program to jump to get_second_side after invalid inputs
   301 00000260 4983C701                    add r15, 1
   302                                  
   303                                      ;Fixes stack
   304 00000264 4881C400100000              add rsp, 4096
   305                                  
   306                                      ;Jumps to exit
   307 0000026B EB39                        jmp exit
   308                                  
   309                                  
   310                                  
   311                                  bad_input:
   312                                  ;bad_input will have a tracker for which input the user is on (first side, second side, angle) and
   313                                  ;depending on the number in the register (will use 0 for first side, 1 for second side, and 2 for angle)
   314                                  ;the program will jump to the correct code block
   315                                  
   316                                  ;if(tracker == 0)
   317                                      ;jump to first side input
   318                                  ;elseif(tracker == 1)
   319                                      ;jump to second side input
   320                                  ;elseif(tracker == 2)
   321                                      ;jump to angle input
   322                                  
   323 0000026D 4881C400100000              add rsp, 4096
   324                                  
   325                                      ;Tell the user their input is invalid and have them enter another input
   326 00000274 B800000000                  mov rax, 0
   327 00000279 48BF-                       mov rdi, print_bad_input
   327 0000027B [B701000000000000] 
   328 00000283 E8(00000000)                call printf
   329                                  
   330 00000288 4983FF00                    cmp r15, 0
   331 0000028C 0F8468FEFFFF                je get_first_side
   332                                  
   333 00000292 4983FF01                    cmp r15, 1
   334 00000296 0F84DBFEFFFF                je get_second_side
   335                                  
   336 0000029C 4983FF02                    cmp r15, 2
   337 000002A0 0F844EFFFFFF                je get_angle
   338                                  
   339                                      ;Jump back to correct input block depending on value of r15
   340                                  
   341                                  
   342                                  exit:
   343                                      ;Output thank you message along with values the user entered
   344 000002A6 B803000000                  mov rax, 3
   345 000002AB 48BF-                       mov rdi, thank_you_message
   345 000002AD [D101000000000000] 
   346 000002B5 48BE-                       mov rsi, user_name
   346 000002B7 [4003000000000000] 
   347 000002BF 48B9-                       mov rcx, format
   347 000002C1 [1D01000000000000] 
   348 000002C9 F2410F10C2                  movsd xmm0, xmm10
   349 000002CE F2410F10CB                  movsd xmm1, xmm11
   350 000002D3 F2410F10D4                  movsd xmm2, xmm12
   351 000002D8 E8(00000000)                call printf
   352                                  
   353 000002DD F2450F10C2                  movsd xmm8, xmm10
   354 000002E2 F2450F10CB                  movsd xmm9, xmm11
   355 000002E7 F2450F10D4                  movsd xmm10, xmm12
   356                                  
   357                                  
   358                                  
   359                                      ;Calculate the length of the third side
   360                                      ;Formula for SAS Triangles: a = sqrt(b^2 + c^2 - 2bc(cosA))
   361                                      ;The following registers and their respective values they hold:
   362                                      ;b = xmm8
   363                                      ;c = xmm9
   364                                      ;A = xmm10
   365                                      ;b^2 = xmm11
   366                                      ;c^2 = xmm12
   367                                      ;2 = xmm13
   368                                      ;2*b*c = xmm13 (values will be multiplied into xmm13, which already holds 2)
   369                                      ;cos(A) = xmm14
   370                                      ;a = xmm15 (value of third side being calculated)
   371                                      ;xmm11 will hold the cosine of the angle
   372                                  
   373                                  
   374                                  
   375                                  
   376                                      ;Square value of b (xmm8) and store value in xmm11
   377 000002EC F2450F10D8                  movsd xmm11, xmm8
   378 000002F1 F2450F59DB                  mulsd xmm11, xmm11
   379                                  
   380                                  
   381                                      ;Square value of c (xmm9) and store value in xmm12
   382 000002F6 F2450F10E1                  movsd xmm12, xmm9
   383 000002FB F2450F59E4                  mulsd xmm12, xmm12
   384                                  
   385                                  
   386                                      ;Add b^2 and c^2 (xmm8 + xmm9) and store result in xmm11
   387 00000300 F2450F58DC                  addsd xmm11, xmm12
   388                                  
   389                                  
   390                                      ;Block of code for 2*b*c
   391                                      ;2 will be stored in xmm13
   392                                      ;Product of 2*b*c
   393 00000305 F2440F102C25-               movsd xmm13, qword [two]
   393 0000030B [06020000]         
   394 0000030F F2450F59E8                  mulsd xmm13, xmm8
   395 00000314 F2450F59E9                  mulsd xmm13, xmm9
   396                                  
   397                                  
   398                                      ;Convert degrees to radians before calling cosine
   399 00000319 F2440F100425-               movsd xmm8, qword [angle_180]
   399 0000031F [0E020000]         
   400 00000323 F2440F100C25-               movsd xmm9, qword [pi]
   400 00000329 [16020000]         
   401 0000032D F2450F5EC8                  divsd xmm9, xmm8
   402 00000332 F2450F59D1                  mulsd xmm10, xmm9
   403                                  
   404                                      ;Cosine function
   405 00000337 B801000000                  mov rax, 1
   406 0000033C F2410F10C2                  movsd xmm0, xmm10
   407 00000341 E8(00000000)                call cos
   408 00000346 F2440F10F0                  movsd xmm14, xmm0
   409                                  
   410                                  
   411                                  
   412                                      ;Multiply (2*b*c) * cos(A)
   413 0000034B F2450F59F5                  mulsd xmm14, xmm13
   414                                  
   415                                  
   416                                      ;Subtract b^2 + c^2 - 2bc(cosA) (xmm11 - xmm14)
   417 00000350 F2450F5CDE                  subsd xmm11, xmm14
   418                                  
   419                                  
   420                                      ;Move the difference into xmm15 and square root the value
   421 00000355 F2450F10FB                  movsd xmm15, xmm11
   422 0000035A F2450F51FF                  sqrtsd xmm15, xmm15
   423                                  
   424                                  
   425                                      ;Output length of third side
   426 0000035F B801000000                  mov rax, 1
   427 00000364 48BF-                       mov rdi, output_third_length
   427 00000366 [5E01000000000000] 
   428 0000036E 48BE-                       mov rsi, format
   428 00000370 [1D01000000000000] 
   429 00000378 F2410F10C7                  movsd xmm0, xmm15
   430 0000037D E8(00000000)                call printf
   431                                  
   432                                  
   433                                  
   434                                      ;Output confirmation that the third length is being sent to driver
   435 00000382 B801000000                  mov rax, 1
   436 00000387 48BF-                       mov rdi, length_send_message
   436 00000389 [8701000000000000] 
   437 00000391 48BE-                       mov rsi, format
   437 00000393 [1D01000000000000] 
   438 0000039B F2410F10C7                  movsd xmm0, xmm15
   439 000003A0 E8(00000000)                call printf
   440                                  
   441                                  
   442                                      ;Back up value in xmm14 before restoring registers
   443 000003A5 6A00                        push qword 0
   444 000003A7 F2440F113C24                movsd [rsp], xmm15
   445                                  
   446                                  
   447                                      ;Restore the values to non-GPRs
   448 000003AD B807000000                  mov rax, 7
   449 000003B2 BA00000000                  mov rdx, 0
   450 000003B7 0FAE2C25[00000000]          xrstor [backup_storage_area]
   451                                  
   452                                  
   453 000003BF F20F100424                  movsd xmm0, [rsp]
   454 000003C4 58                          pop rax
   455                                  
   456                                  
   457                                      ;Restore the GPRs
   458 000003C5 9D                          popf
   459 000003C6 415F                        pop r15
   460 000003C8 415E                        pop r14
   461 000003CA 415D                        pop r13
   462 000003CC 415C                        pop r12
   463 000003CE 415B                        pop r11
   464 000003D0 415A                        pop r10
   465 000003D2 4159                        pop r9
   466 000003D4 4158                        pop r8
   467 000003D6 5E                          pop rsi
   468 000003D7 5F                          pop rdi
   469 000003D8 5A                          pop rdx
   470 000003D9 59                          pop rcx
   471 000003DA 5B                          pop rbx
   472 000003DB 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   473 000003DC C3                          ret
   474                                  ;End of the function average.asm ====================================================================
   475                                  
   476                                  ;Change Comments
   477                                  ;Show what string variables are printing to screen
