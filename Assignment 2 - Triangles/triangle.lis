     1                                  ;Change Comments
     2                                  
     3                                  ;****************************************************************************************************************************
     4                                  ;Program name: "Driving Time". This program will take in the user's full name, their title, and the distances they have     *
     5                                  ;traveled from Fullerton -> Santa Ana, Santa Ana -> Long Beach, and Long Beach -> Fullerton, as well as their average       *
     6                                  ;speed for each trip. Once the program has the total distance traveled and the average speed of the entire trip, the        *
     7                                  ;program will calculate the total time of the trip, then the assembly file will send the average speed back to the driver
     8                                  ;function                                                                                                                   *
     9                                  ;                                                                                                                           *
    10                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    11                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    12                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    13                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    14                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    15                                  ;****************************************************************************************************************************
    16                                  
    17                                  
    18                                  
    19                                  
    20                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    21                                  ;Author information
    22                                  ;  Author name: Nathan Warner
    23                                  ;  Author email: nwarner4@csu.fullerton.edu
    24                                  ;
    25                                  ;Program information
    26                                  ;  Program name: Driving Time
    27                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    28                                  ;  Date program began: 2024-Jan-30
    29                                  ;  Date of last update: 2024-Feb-2
    30                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    31                                  ;  Testing: Alpha testing completed.  All functions are correct.
    32                                  ;  Status: Ready for release to customers
    33                                  ;
    34                                  ;Purpose
    35                                  ;  This program will take in total distance traveled and average speed and find the total time of the trip,
    36                                  ;  as well as sending the average speed of the entirety of the trip back to the driver
    37                                  ;
    38                                  ;This file:
    39                                  ;  File name: average.asm
    40                                  ;  Language: X86-64
    41                                  ;  Max page width: 124 columns
    42                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    43                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    44                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    45                                  ;  Prototype of this function: double average();
    46                                  ; 
    47                                  ;
    48                                  ;
    49                                  ;
    50                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    51                                  
    52                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    53                                  ;not have its own place of declaration
    54                                  
    55                                  global triangle_SAS
    56                                  
    57                                  extern printf
    58                                  extern fgets
    59                                  extern stdin
    60                                  extern strlen
    61                                  extern scanf
    62                                  extern cos
    63                                  extern atof
    64                                  extern isfloat
    65                                  
    66                                  name_string_size equ 48
    67                                  title_string_size equ 48
    68                                  
    69                                  float_size equ 60
    70                                  true equ -1
    71                                  false equ 0
    72                                  
    73                                  segment .data
    74                                  ;This section (or segment) is for declaring initialized arrays
    75                                  
    76 00000000 506C6561736520656E-     name_prompt db "Please enter your name: ", 0
    76 00000009 74657220796F757220-
    76 00000012 6E616D653A2000     
    77 00000019 506C6561736520656E-     title_prompt db "Please enter your title (Sergeant, Chief, CEO, President, Teacher, etc): ", 0
    77 00000022 74657220796F757220-
    77 0000002B 7469746C6520285365-
    77 00000034 726765616E742C2043-
    77 0000003D 686965662C2043454F-
    77 00000046 2C2050726573696465-
    77 0000004F 6E742C205465616368-
    77 00000058 65722C20657463293A-
    77 00000061 2000               
    78 00000063 0A476F6F64206D6F72-     good_morning_msg db 10, "Good morning %s %s. We take care of all your triangles.", 10, 10, 0
    78 0000006C 6E696E672025732025-
    78 00000075 732E2057652074616B-
    78 0000007E 652063617265206F66-
    78 00000087 20616C6C20796F7572-
    78 00000090 20747269616E676C65-
    78 00000099 732E0A0A00         
    79 0000009E 506C6561736520656E-     first_side_prompt db "Please enter the length of the first side: ", 0
    79 000000A7 74657220746865206C-
    79 000000B0 656E677468206F6620-
    79 000000B9 746865206669727374-
    79 000000C2 20736964653A2000   
    80 000000CA 506C6561736520656E-     second_side_prompt db "Please enter the length of the second side: ", 0
    80 000000D3 74657220746865206C-
    80 000000DC 656E677468206F6620-
    80 000000E5 746865207365636F6E-
    80 000000EE 6420736964653A2000 
    81 000000F7 506C6561736520656E-     angle_prompt db "Please enter the angle in degrees: ", 0
    81 00000100 746572207468652061-
    81 00000109 6E676C6520696E2064-
    81 00000112 6567726565733A2000 
    82 0000011B 256C6600                format db "%lf", 0
    83 0000011F 0A4669727374207369-     output_values_test db 10, "First side: %1.6lf, Second side: %1.6lf, Angle size: %1.3lf", 0
    83 00000128 64653A2025312E366C-
    83 00000131 662C205365636F6E64-
    83 0000013A 20736964653A202531-
    83 00000143 2E366C662C20416E67-
    83 0000014C 6C652073697A653A20-
    83 00000155 25312E336C6600     
    84 0000015C 0A546865206C656E67-     output_third_length db 10, "The length of the third side is %1.6lf", 10, 0
    84 00000165 7468206F6620746865-
    84 0000016E 207468697264207369-
    84 00000177 64652069732025312E-
    84 00000180 366C660A00         
    85 00000185 0A546865206C656E67-     length_send_message db 10, "The length will be sent to the driver program", 10, 0
    85 0000018E 74682077696C6C2062-
    85 00000197 652073656E7420746F-
    85 000001A0 207468652064726976-
    85 000001A9 65722070726F677261-
    85 000001B2 6D0A00             
    86 000001B5 496E76616C69642069-     print_bad_input db "Invalid input. Try again", 10, 0
    86 000001BE 6E7075742E20547279-
    86 000001C7 20616761696E0A00   
    87 000001CF 0A5468616E6B20796F-     thank_you_message db 10, "Thank you %s. You entered %1.6lf %1.6lf and %1.6lf", 10, 0
    87 000001D8 752025732E20596F75-
    87 000001E1 20656E746572656420-
    87 000001EA 25312E366C66202531-
    87 000001F3 2E366C6620616E6420-
    87 000001FC 25312E366C660A00   
    88                                  
    89 00000204 0000000000000040        two dq 2.0
    90 0000020C 0000000000806640        angle_180 dq 180.0
    91 00000214 EA2E4454FB210940        pi dq 3.14159265359
    92                                  
    93                                  
    94                                  segment .bss
    95                                  ;This section (or segment) is for declaring empty arrays
    96                                  
    97                                  align 64
    98 00000000 <res 340h>              backup_storage_area resb 832
    99                                  
   100 00000340 <res 30h>               user_name resb name_string_size
   101                                  
   102 00000370 <res 30h>               user_title resb title_string_size
   103                                  
   104                                  segment .text
   105                                  
   106                                  triangle_SAS:
   107                                  
   108                                      ;Back up the GPRs (General Purpose Registers)
   109 00000000 55                          push rbp
   110 00000001 4889E5                      mov rbp, rsp
   111 00000004 53                          push rbx
   112 00000005 51                          push rcx
   113 00000006 52                          push rdx
   114 00000007 57                          push rdi
   115 00000008 56                          push rsi
   116 00000009 4150                        push r8
   117 0000000B 4151                        push r9
   118 0000000D 4152                        push r10
   119 0000000F 4153                        push r11
   120 00000011 4154                        push r12
   121 00000013 4155                        push r13
   122 00000015 4156                        push r14
   123 00000017 4157                        push r15
   124 00000019 9C                          pushf
   125                                  
   126                                      ;Backup the registers other than the GPRs
   127 0000001A B807000000                  mov rax,7
   128 0000001F BA00000000                  mov rdx,0
   129 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   130                                  
   131                                      ;Output prompt for first and last name
   132 0000002C B800000000                  mov rax, 0
   133 00000031 48BF-                       mov rdi, name_prompt
   133 00000033 [0000000000000000] 
   134 0000003B E8(00000000)                call printf
   135                                  
   136                                      ;Input user names
   137 00000040 B800000000                  mov rax, 0
   138 00000045 48BF-                       mov rdi, user_name
   138 00000047 [4003000000000000] 
   139 0000004F BE30000000                  mov rsi, name_string_size
   140 00000054 488B1425[00000000]          mov rdx, [stdin]
   141 0000005C E8(00000000)                call fgets
   142                                  
   143                                      ;Remove newline
   144 00000061 B800000000                  mov rax, 0
   145 00000066 48BF-                       mov rdi, user_name
   145 00000068 [4003000000000000] 
   146 00000070 E8(00000000)                call strlen
   147 00000075 C680[3F030000]00            mov [user_name+rax-1], byte 0
   148                                  
   149                                      ;Output prompt for user's title
   150 0000007C B800000000                  mov rax, 0
   151 00000081 48BF-                       mov rdi, title_prompt
   151 00000083 [1900000000000000] 
   152 0000008B E8(00000000)                call printf
   153                                  
   154                                      ;Input user title
   155 00000090 B800000000                  mov rax, 0
   156 00000095 48BF-                       mov rdi, user_title
   156 00000097 [7003000000000000] 
   157 0000009F BE30000000                  mov rsi, title_string_size
   158 000000A4 488B1425[00000000]          mov rdx, [stdin]
   159 000000AC E8(00000000)                call fgets
   160                                  
   161                                      ;Remove newline
   162 000000B1 B800000000                  mov rax, 0
   163 000000B6 48BF-                       mov rdi, user_title
   163 000000B8 [7003000000000000] 
   164 000000C0 E8(00000000)                call strlen
   165 000000C5 C680[6F030000]00            mov [user_title+rax-1], byte 0
   166                                  
   167                                  
   168                                  
   169                                      ;Say good morning to the user
   170 000000CC B800000000                  mov rax, 0
   171 000000D1 48BF-                       mov rdi, good_morning_msg
   171 000000D3 [6300000000000000] 
   172 000000DB 48BE-                       mov rsi, user_title
   172 000000DD [7003000000000000] 
   173 000000E5 48BA-                       mov rdx, user_name
   173 000000E7 [4003000000000000] 
   174 000000EF E8(00000000)                call printf
   175                                  
   176 000000F4 41BF00000000                mov r15, 0 ;r15 is used to determine which input block to jump to (0 = first side, 1 = second side, 2 = angle)
   177                                  
   178                                  get_first_side:
   179                                      ;Ask for length of first side
   180 000000FA B800000000                  mov rax, 0
   181 000000FF 48BF-                       mov rdi, first_side_prompt
   181 00000101 [9E00000000000000] 
   182 00000109 E8(00000000)                call printf
   183                                  
   184                                  
   185                                      ;Gets user input for first side
   186 0000010E B800000000                  mov rax, 0
   187 00000113 4881EC00100000              sub rsp, 4096
   188 0000011A 4889E7                      mov rdi, rsp
   189 0000011D BE00100000                  mov rsi, 4096
   190 00000122 488B1425[00000000]          mov rdx, [stdin]
   191 0000012A E8(00000000)                call fgets
   192                                  
   193                                      ;Remove newline
   194 0000012F B800000000                  mov rax, 0
   195 00000134 4889E7                      mov rdi, rsp
   196 00000137 E8(00000000)                call strlen
   197 0000013C C64404FF00                  mov [rsp + rax - 1], byte 0
   198                                  
   199                                      ;Check if input is a float
   200 00000141 B800000000                  mov rax, 0
   201 00000146 4889E7                      mov rdi, rsp
   202 00000149 E8(00000000)                call isfloat
   203 0000014E 4883F800                    cmp rax, false
   204 00000152 0F840F010000                je bad_input
   205                                  
   206                                      ;Convert the input from string to float
   207 00000158 B800000000                  mov rax, 0
   208 0000015D 4889E7                      mov rdi, rsp
   209 00000160 E8(00000000)                call atof
   210 00000165 F2440F10C0                  movsd xmm8, xmm0
   211 0000016A 4983C701                    add r15, 1
   212 0000016E 4881C400100000              add rsp, 4096
   213                                  
   214                                  
   215                                  
   216                                  get_second_side:
   217                                      ;Ask for length of second side
   218 00000175 B800000000                  mov rax, 0
   219 0000017A 48BF-                       mov rdi, second_side_prompt
   219 0000017C [CA00000000000000] 
   220 00000184 E8(00000000)                call printf
   221                                  
   222                                  
   223                                      ;Gets user input for second side
   224 00000189 B800000000                  mov rax, 0
   225 0000018E 4881EC00100000              sub rsp, 4096
   226 00000195 4889E7                      mov rdi, rsp
   227 00000198 BE00100000                  mov rsi, 4096
   228 0000019D 488B1425[00000000]          mov rdx, [stdin]
   229 000001A5 E8(00000000)                call fgets
   230                                  
   231                                      ;Remove newline
   232 000001AA B800000000                  mov rax, 0
   233 000001AF 4889E7                      mov rdi, rsp
   234 000001B2 E8(00000000)                call strlen
   235 000001B7 C64404FF00                  mov [rsp + rax - 1], byte 0
   236                                  
   237                                      ;Check if input is a float
   238 000001BC B800000000                  mov rax, 0
   239 000001C1 4889E7                      mov rdi, rsp
   240 000001C4 E8(00000000)                call isfloat
   241 000001C9 4883F800                    cmp rax, false
   242 000001CD 0F8494000000                je bad_input
   243                                  
   244                                      ;Convert the input from string to float
   245 000001D3 B800000000                  mov rax, 0
   246 000001D8 4889E7                      mov rdi, rsp
   247 000001DB E8(00000000)                call atof
   248 000001E0 F2440F10C8                  movsd xmm9, xmm0
   249 000001E5 4983C701                    add r15, 1
   250 000001E9 4881C400100000              add rsp, 4096
   251                                  
   252                                  
   253                                  
   254                                  get_angle:
   255                                      ;Ask for size of the angle
   256 000001F0 B800000000                  mov rax, 0
   257 000001F5 48BF-                       mov rdi, angle_prompt
   257 000001F7 [F700000000000000] 
   258 000001FF E8(00000000)                call printf
   259                                  
   260                                  
   261                                      ;Gets user input for angle
   262 00000204 B800000000                  mov rax, 0
   263 00000209 4881EC00100000              sub rsp, 4096
   264 00000210 4889E7                      mov rdi, rsp
   265 00000213 BE00100000                  mov rsi, 4096
   266 00000218 488B1425[00000000]          mov rdx, [stdin]
   267 00000220 E8(00000000)                call fgets
   268                                  
   269                                      ;Remove newline
   270 00000225 B800000000                  mov rax, 0
   271 0000022A 4889E7                      mov rdi, rsp
   272 0000022D E8(00000000)                call strlen
   273 00000232 C64404FF00                  mov [rsp + rax - 1], byte 0
   274                                  
   275                                      ;Check if input is a float
   276 00000237 B800000000                  mov rax, 0
   277 0000023C 4889E7                      mov rdi, rsp
   278 0000023F E8(00000000)                call isfloat
   279 00000244 4883F800                    cmp rax, false
   280 00000248 741D                        je bad_input
   281                                  
   282                                      ;Convert the input from string to float
   283 0000024A B800000000                  mov rax, 0
   284 0000024F 4889E7                      mov rdi, rsp
   285 00000252 E8(00000000)                call atof
   286 00000257 F2440F10D0                  movsd xmm10, xmm0
   287 0000025C 4983C701                    add r15, 1
   288 00000260 4881C400100000              add rsp, 4096
   289                                  
   290                                  
   291                                  
   292                                  bad_input:
   293                                  ;bad_input will have a tracker for which input the user is on (first side, second side, angle) and
   294                                  ;depending on the number in the register (will use 0 for first side, 1 for second side, and 2 for angle)
   295                                  ;the program will jump to the correct code block
   296                                  
   297                                  ;if(tracker == 0)
   298                                      ;jump to first side input
   299                                  ;elseif(tracker == 1)
   300                                      ;jump to second side input
   301                                  ;elseif(tracker == 2)
   302                                      ;jump to angle input
   303                                  
   304 00000267 4881C400100000              add rsp, 4096
   305                                  
   306                                      ;Tell the user their input is invalid and have them enter another input
   307 0000026E B800000000                  mov rax, 0
   308 00000273 48BF-                       mov rdi, print_bad_input
   308 00000275 [B501000000000000] 
   309 0000027D E8(00000000)                call printf
   310                                  
   311 00000282 4983FF00                    cmp r15, 0
   312 00000286 0F846EFEFFFF                je get_first_side
   313                                  
   314 0000028C 4983FF01                    cmp r15, 1
   315 00000290 0F84DFFEFFFF                je get_second_side
   316                                  
   317 00000296 4983FF02                    cmp r15, 2
   318 0000029A 0F8450FFFFFF                je get_angle
   319                                  
   320                                      ;Jump back to correct input block depending on value of r15
   321                                  
   322                                  
   323                                  exit:
   324                                      ;Output thank you message along with values the user entered
   325 000002A0 B803000000                  mov rax, 3
   326 000002A5 48BF-                       mov rdi, thank_you_message
   326 000002A7 [CF01000000000000] 
   327 000002AF 48BE-                       mov rsi, user_name
   327 000002B1 [4003000000000000] 
   328 000002B9 48B9-                       mov rcx, format
   328 000002BB [1B01000000000000] 
   329 000002C3 F2410F10C0                  movsd xmm0, xmm8
   330 000002C8 F2410F10C9                  movsd xmm1, xmm9
   331 000002CD F2410F10D2                  movsd xmm2, xmm10
   332 000002D2 E8(00000000)                call printf
   333                                  
   334                                  
   335                                  
   336                                      ;Calculate the length of the third side
   337                                      ;Formula for SAS Triangles: a = sqrt(b^2 + c^2 - 2bc(cosA))
   338                                      ;The following registers and their respective values they hold:
   339                                      ;b = xmm8
   340                                      ;c = xmm9
   341                                      ;A = xmm10
   342                                      ;b^2 = xmm11
   343                                      ;c^2 = xmm12
   344                                      ;2 = xmm13
   345                                      ;2*b*c = xmm13 (values will be multiplied into xmm13, which already holds 2)
   346                                      ;cos(A) = xmm14
   347                                      ;a = xmm15 (value of third side being calculated)
   348                                      ;xmm11 will hold the cosine of the angle
   349                                  
   350                                  
   351                                  
   352                                  
   353                                      ;Square value of b (xmm8) and store value in xmm11
   354 000002D7 F2450F10D8                  movsd xmm11, xmm8
   355 000002DC F2450F59DB                  mulsd xmm11, xmm11
   356                                  
   357                                  
   358                                      ;Square value of c (xmm9) and store value in xmm12
   359 000002E1 F2450F10E1                  movsd xmm12, xmm9
   360 000002E6 F2450F59E4                  mulsd xmm12, xmm12
   361                                  
   362                                  
   363                                      ;Add b^2 and c^2 (xmm8 + xmm9) and store result in xmm11
   364 000002EB F2450F58DC                  addsd xmm11, xmm12
   365                                  
   366                                  
   367                                      ;Block of code for 2*b*c
   368                                      ;2 will be stored in xmm13
   369                                      ;Product of 2*b*c
   370 000002F0 F2440F102C25-               movsd xmm13, qword [two]
   370 000002F6 [04020000]         
   371 000002FA F2450F59E8                  mulsd xmm13, xmm8
   372 000002FF F2450F59E9                  mulsd xmm13, xmm9
   373                                  
   374                                  
   375                                      ;Convert degrees to radians before calling cosine
   376 00000304 F2440F100425-               movsd xmm8, qword [angle_180]
   376 0000030A [0C020000]         
   377 0000030E F2440F100C25-               movsd xmm9, qword [pi]
   377 00000314 [14020000]         
   378 00000318 F2450F5EC8                  divsd xmm9, xmm8
   379 0000031D F2450F59D1                  mulsd xmm10, xmm9
   380                                  
   381                                      ;Cosine function
   382 00000322 B801000000                  mov rax, 1
   383 00000327 F2410F10C2                  movsd xmm0, xmm10
   384 0000032C E8(00000000)                call cos
   385 00000331 F2440F10F0                  movsd xmm14, xmm0
   386                                  
   387                                  
   388                                  
   389                                      ;Multiply (2*b*c) * cos(A)
   390 00000336 F2450F59F5                  mulsd xmm14, xmm13
   391                                  
   392                                  
   393                                      ;Subtract b^2 + c^2 - 2bc(cosA) (xmm11 - xmm14)
   394 0000033B F2450F5CDE                  subsd xmm11, xmm14
   395                                  
   396                                  
   397                                      ;Move the difference into xmm15 and square root the value
   398 00000340 F2450F10FB                  movsd xmm15, xmm11
   399 00000345 F2450F51FF                  sqrtsd xmm15, xmm15
   400                                  
   401                                  
   402                                      ;Output length of third side
   403 0000034A B801000000                  mov rax, 1
   404 0000034F 48BF-                       mov rdi, output_third_length
   404 00000351 [5C01000000000000] 
   405 00000359 48BE-                       mov rsi, format
   405 0000035B [1B01000000000000] 
   406 00000363 F2410F10C7                  movsd xmm0, xmm15
   407 00000368 E8(00000000)                call printf
   408                                  
   409                                  
   410                                  
   411                                      ;Output confirmation that the third length is being sent to driver
   412 0000036D B801000000                  mov rax, 1
   413 00000372 48BF-                       mov rdi, length_send_message
   413 00000374 [8501000000000000] 
   414 0000037C 48BE-                       mov rsi, format
   414 0000037E [1B01000000000000] 
   415 00000386 F2410F10C7                  movsd xmm0, xmm15
   416 0000038B E8(00000000)                call printf
   417                                  
   418                                  
   419                                      ;Back up value in xmm14 before restoring registers
   420 00000390 6A00                        push qword 0
   421 00000392 F2440F113C24                movsd [rsp], xmm15
   422                                  
   423                                  
   424                                      ;Restore the values to non-GPRs
   425 00000398 B807000000                  mov rax, 7
   426 0000039D BA00000000                  mov rdx, 0
   427 000003A2 0FAE2C25[00000000]          xrstor [backup_storage_area]
   428                                  
   429                                  
   430 000003AA F20F100424                  movsd xmm0, [rsp]
   431 000003AF 58                          pop rax
   432                                  
   433                                  
   434                                      ;Restore the GPRs
   435 000003B0 9D                          popf
   436 000003B1 415F                        pop r15
   437 000003B3 415E                        pop r14
   438 000003B5 415D                        pop r13
   439 000003B7 415C                        pop r12
   440 000003B9 415B                        pop r11
   441 000003BB 415A                        pop r10
   442 000003BD 4159                        pop r9
   443 000003BF 4158                        pop r8
   444 000003C1 5E                          pop rsi
   445 000003C2 5F                          pop rdi
   446 000003C3 5A                          pop rdx
   447 000003C4 59                          pop rcx
   448 000003C5 5B                          pop rbx
   449 000003C6 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   450 000003C7 C3                          ret
   451                                  ;End of the function average.asm ====================================================================
   452                                  
   453                                  ;Change Comments
   454                                  ;Show what string variables are printing to screen
