     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Amazing Triangles" - This program will take first welcome the user the the program, and then output the     *
     3                                  ;system clock (tics) to the console. After this initial output for the user, the program will then prompt the user for their*
     4                                  ;full name, as well as their title (i.e. Dean, Vice-president, etc.). Once the user has entered their name and title, the   *
     5                                  ;program will tell them good morning, and that this program will take care of their triangles. After, the program will      *
     6                                  ;prompt the user for the sides of the triangle and its angle (this program solves SAS triangles). If the user inputs an     *
     7                                  ;invalid input (negative number, non-float number, or an input that is not a number such as 2.2.3+A), the program will      *
     8                                  ;let the user know that their input is invalid and will then prompt them for another input. After 3 valid inputs are        *
     9                                  ;entered (2 sides and 1 angle), the program will output a thank you message/confirmation of the user's inputted values.     *
    10                                  ;Now that the program has 3 valid inputs, it will use the formula for solving SAS triangles to find the third side, and     *
    11                                  ;will output said answer, as well as letting the user know that the length of the third side will be sent to the driver.    *
    12                                  ;Before this value is sent, the program will output the new system clock (tics). Once back in the driver, it will let the   *
    13                                  ;user know that it has received the value of the third side, and that a zero will be sent to the operating system.          *                                                                                                      
    14                                  ;                                                                                                                           *
    15                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    16                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    17                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    18                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    19                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    20                                  ;****************************************************************************************************************************
    21                                  
    22                                  
    23                                  
    24                                  
    25                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    26                                  ;Author information
    27                                  ;  Author name: Nathan Warner
    28                                  ;  Author email: nwarner4@csu.fullerton.edu
    29                                  ;
    30                                  ;Program information
    31                                  ;  Program name: Amazing Triangles
    32                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    33                                  ;  Date program began: 2024-Feb-11
    34                                  ;  Date of last update: 2024-Feb-19
    35                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    36                                  ;  Testing: Alpha testing completed.  All functions are correct.
    37                                  ;  Status: Ready for release to customers
    38                                  ;
    39                                  ;Purpose
    40                                  ;  This program will take in two sides and an angle of a triangle, and will output the length of the
    41                                  ;   thrd side to the console, as well as sending the value to the driver.
    42                                  ;
    43                                  ;This file:
    44                                  ;  File name: triangle.asm
    45                                  ;  Language: X86-64
    46                                  ;  Max page width: 124 columns
    47                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    48                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    49                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    50                                  ;  Prototype of this function: double triangle_SAS();
    51                                  ; 
    52                                  ;
    53                                  ;
    54                                  ;
    55                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global triangle_SAS
    61                                  
    62                                  extern printf
    63                                  extern fgets
    64                                  extern stdin
    65                                  extern strlen
    66                                  extern scanf
    67                                  extern cos
    68                                  extern atof
    69                                  extern isfloat
    70                                  
    71                                  name_string_size equ 48
    72                                  title_string_size equ 48
    73                                  
    74                                  float_size equ 60
    75                                  true equ -1
    76                                  false equ 0
    77                                  
    78                                  segment .data
    79                                  ;This section (or segment) is for declaring initialized arrays
    80                                  
    81 00000000 0A506C656173652065-     name_prompt db 10, "Please enter your name: ", 0
    81 00000009 6E74657220796F7572-
    81 00000012 206E616D653A2000   
    82 0000001A 0A506C656173652065-     title_prompt db 10, "Please enter your title (Sergeant, Chief, CEO, President, Teacher, etc): ", 0
    82 00000023 6E74657220796F7572-
    82 0000002C 207469746C65202853-
    82 00000035 65726765616E742C20-
    82 0000003E 43686965662C204345-
    82 00000047 4F2C20507265736964-
    82 00000050 656E742C2054656163-
    82 00000059 6865722C2065746329-
    82 00000062 3A2000             
    83 00000065 0A476F6F64206D6F72-     good_morning_msg db 10, "Good morning %s %s. We take care of all your triangles.", 10, 10, 0
    83 0000006E 6E696E672025732025-
    83 00000077 732E2057652074616B-
    83 00000080 652063617265206F66-
    83 00000089 20616C6C20796F7572-
    83 00000092 20747269616E676C65-
    83 0000009B 732E0A0A00         
    84 000000A0 506C6561736520656E-     first_side_prompt db "Please enter the length of the first side: ", 0
    84 000000A9 74657220746865206C-
    84 000000B2 656E677468206F6620-
    84 000000BB 746865206669727374-
    84 000000C4 20736964653A2000   
    85 000000CC 506C6561736520656E-     second_side_prompt db "Please enter the length of the second side: ", 0
    85 000000D5 74657220746865206C-
    85 000000DE 656E677468206F6620-
    85 000000E7 746865207365636F6E-
    85 000000F0 6420736964653A2000 
    86 000000F9 506C6561736520656E-     angle_prompt db "Please enter the angle in degrees: ", 0
    86 00000102 746572207468652061-
    86 0000010B 6E676C6520696E2064-
    86 00000114 6567726565733A2000 
    87 0000011D 256C6600                format db "%lf", 0
    88 00000121 0A4669727374207369-     output_values_test db 10, "First side: %1.6lf, Second side: %1.6lf, Angle size: %1.3lf", 0
    88 0000012A 64653A2025312E366C-
    88 00000133 662C205365636F6E64-
    88 0000013C 20736964653A202531-
    88 00000145 2E366C662C20416E67-
    88 0000014E 6C652073697A653A20-
    88 00000157 25312E336C6600     
    89 0000015E 0A546865206C656E67-     output_third_length db 10, "The length of the third side is %1.6lf", 10, 0
    89 00000167 7468206F6620746865-
    89 00000170 207468697264207369-
    89 00000179 64652069732025312E-
    89 00000182 366C660A00         
    90 00000187 0A546865206C656E67-     length_send_message db 10, "The length will be sent to the driver program", 10, 0
    90 00000190 74682077696C6C2062-
    90 00000199 652073656E7420746F-
    90 000001A2 207468652064726976-
    90 000001AB 65722070726F677261-
    90 000001B4 6D0A00             
    91 000001B7 496E76616C69642069-     print_bad_input db "Invalid input. Try again: ", 0
    91 000001C0 6E7075742E20547279-
    91 000001C9 20616761696E3A2000 
    92 000001D2 0A5468616E6B20796F-     thank_you_message db 10, "Thank you %s. You entered %1.6lf %1.6lf and %1.6lf", 10, 0
    92 000001DB 752025732E20596F75-
    92 000001E4 20656E746572656420-
    92 000001ED 25312E366C66202531-
    92 000001F6 2E366C6620616E6420-
    92 000001FF 25312E366C660A00   
    93 00000207 0A5468652073746172-     starting_time db 10, "The starting time on the clock is %lu tics", 10, 0
    93 00000210 74696E672074696D65-
    93 00000219 206F6E207468652063-
    93 00000222 6C6F636B2069732025-
    93 0000022B 6C7520746963730A00 
    94 00000234 0A5468652066696E61-     ending_time db 10, "The final time on the system clock is %lu tics", 10, 0
    94 0000023D 6C2074696D65206F6E-
    94 00000246 207468652073797374-
    94 0000024F 656D20636C6F636B20-
    94 00000258 697320256C75207469-
    94 00000261 63730A00           
    95 00000265 0A4861766520612067-     good_bye_msg db 10, "Have a good day %s %s.", 10, 0
    95 0000026E 6F6F64206461792025-
    95 00000277 732025732E0A00     
    96                                  
    97 0000027E 0000000000000040        two dq 2.0
    98 00000286 0000000000806640        angle_180 dq 180.0
    99 0000028E EA2E4454FB210940        pi dq 3.14159265359
   100                                  
   101                                  
   102                                  segment .bss
   103                                  ;This section (or segment) is for declaring empty arrays
   104                                  
   105                                  align 64
   106 00000000 <res 340h>              backup_storage_area resb 832
   107                                  
   108 00000340 <res 30h>               user_name resb name_string_size
   109                                  
   110 00000370 <res 30h>               user_title resb title_string_size
   111                                  
   112                                  segment .text
   113                                  
   114                                  triangle_SAS:
   115                                  
   116                                      ;Back up the GPRs (General Purpose Registers)
   117 00000000 55                          push rbp
   118 00000001 4889E5                      mov rbp, rsp
   119 00000004 53                          push rbx
   120 00000005 51                          push rcx
   121 00000006 52                          push rdx
   122 00000007 57                          push rdi
   123 00000008 56                          push rsi
   124 00000009 4150                        push r8
   125 0000000B 4151                        push r9
   126 0000000D 4152                        push r10
   127 0000000F 4153                        push r11
   128 00000011 4154                        push r12
   129 00000013 4155                        push r13
   130 00000015 4156                        push r14
   131 00000017 4157                        push r15
   132 00000019 9C                          pushf
   133                                  
   134                                      ;Backup the registers other than the GPRs
   135 0000001A B807000000                  mov rax,7
   136 0000001F BA00000000                  mov rdx,0
   137 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   138                                  
   139                                  
   140                                      ;Get the starting time on the system clock
   141 0000002C 0FA2                        cpuid
   142 0000002E 0F31                        rdtsc
   143 00000030 48C1E220                    shl rdx, 32
   144 00000034 4801C2                      add rdx, rax
   145 00000037 4989C4                      mov r12, rax
   146                                  
   147                                      ;Output starting time on system clock
   148 0000003A B800000000                  mov rax, 0
   149 0000003F 48BF-                       mov rdi, starting_time ;"The starting time on the clock is %lu tics"
   149 00000041 [0702000000000000] 
   150 00000049 4C89E6                      mov rsi, r12
   151 0000004C E8(00000000)                call printf
   152                                  
   153                                      ;Output prompt for first and last name
   154 00000051 B800000000                  mov rax, 0
   155 00000056 48BF-                       mov rdi, name_prompt ;"Please enter your name: "
   155 00000058 [0000000000000000] 
   156 00000060 E8(00000000)                call printf
   157                                  
   158                                      ;Input user names
   159 00000065 B800000000                  mov rax, 0
   160 0000006A 48BF-                       mov rdi, user_name
   160 0000006C [4003000000000000] 
   161 00000074 BE30000000                  mov rsi, name_string_size ;48
   162 00000079 488B1425[00000000]          mov rdx, [stdin]
   163 00000081 E8(00000000)                call fgets
   164                                  
   165                                      ;Remove newline
   166 00000086 B800000000                  mov rax, 0
   167 0000008B 48BF-                       mov rdi, user_name
   167 0000008D [4003000000000000] 
   168 00000095 E8(00000000)                call strlen
   169 0000009A C680[3F030000]00            mov [user_name+rax-1], byte 0
   170                                  
   171                                      ;Ask user for their title
   172 000000A1 B800000000                  mov rax, 0
   173 000000A6 48BF-                       mov rdi, title_prompt ;"Please enter your title (Sergeant, Chief, CEO, President, Teacher, etc): "
   173 000000A8 [1A00000000000000] 
   174 000000B0 E8(00000000)                call printf
   175                                  
   176                                      ;Input user title
   177 000000B5 B800000000                  mov rax, 0
   178 000000BA 48BF-                       mov rdi, user_title
   178 000000BC [7003000000000000] 
   179 000000C4 BE30000000                  mov rsi, title_string_size ;48
   180 000000C9 488B1425[00000000]          mov rdx, [stdin]
   181 000000D1 E8(00000000)                call fgets
   182                                  
   183                                      ;Remove newline
   184 000000D6 B800000000                  mov rax, 0
   185 000000DB 48BF-                       mov rdi, user_title
   185 000000DD [7003000000000000] 
   186 000000E5 E8(00000000)                call strlen
   187 000000EA C680[6F030000]00            mov [user_title+rax-1], byte 0
   188                                  
   189                                  
   190                                  
   191                                      ;Say good morning to the user
   192 000000F1 B800000000                  mov rax, 0
   193 000000F6 48BF-                       mov rdi, good_morning_msg ;"Good morning %s %s. We take care of all your triangles."
   193 000000F8 [6500000000000000] 
   194 00000100 48BE-                       mov rsi, user_title
   194 00000102 [7003000000000000] 
   195 0000010A 48BA-                       mov rdx, user_name
   195 0000010C [4003000000000000] 
   196 00000114 E8(00000000)                call printf
   197                                  
   198 00000119 41BF00000000                mov r15, 0 ;r15 is used to determine which input block to jump to (0 = first side, 1 = second side, 2 = angle)
   199                                  
   200                                  get_first_side:
   201                                      ;Ask for length of first side
   202 0000011F B800000000                  mov rax, 0
   203 00000124 48BF-                       mov rdi, first_side_prompt ;"Please enter the length of the first side: "
   203 00000126 [A000000000000000] 
   204 0000012E E8(00000000)                call printf
   205                                  
   206                                  
   207                                      ;Gets user input for first side
   208 00000133 B800000000                  mov rax, 0
   209 00000138 4881EC00100000              sub rsp, 4096
   210 0000013F 4889E7                      mov rdi, rsp
   211 00000142 BE00100000                  mov rsi, 4096
   212 00000147 488B1425[00000000]          mov rdx, [stdin]
   213 0000014F E8(00000000)                call fgets
   214                                  
   215                                      ;Remove newline
   216 00000154 B800000000                  mov rax, 0
   217 00000159 4889E7                      mov rdi, rsp
   218 0000015C E8(00000000)                call strlen
   219 00000161 C64404FF00                  mov [rsp + rax - 1], byte 0
   220                                  
   221                                      ;Check if input is a postive float
   222 00000166 B800000000                  mov rax, 0
   223 0000016B 4889E7                      mov rdi, rsp
   224 0000016E E8(00000000)                call isfloat
   225 00000173 4883F800                    cmp rax, false
   226 00000177 0F8414010000                je bad_input
   227                                  
   228                                      ;Convert the input from string to float
   229 0000017D B800000000                  mov rax, 0
   230 00000182 4889E7                      mov rdi, rsp
   231 00000185 E8(00000000)                call atof
   232 0000018A F2440F10D0                  movsd xmm10, xmm0
   233                                  
   234                                      ;Adds 1 to r15, which enables the program to jump to get_second_side after invalid inputs
   235 0000018F 4983C701                    add r15, 1
   236                                  
   237                                      ;Fixes the stack
   238 00000193 4881C400100000              add rsp, 4096
   239                                  
   240 0000019A EB00                        jmp get_second_side
   241                                  
   242                                  
   243                                  
   244                                  get_second_side:
   245                                      ;Ask for length of second side
   246 0000019C B800000000                  mov rax, 0
   247 000001A1 48BF-                       mov rdi, second_side_prompt ;"Please enter the length of the second side: "
   247 000001A3 [CC00000000000000] 
   248 000001AB E8(00000000)                call printf
   249                                  
   250                                  
   251                                      ;Gets user input for second side
   252 000001B0 B800000000                  mov rax, 0
   253 000001B5 4881EC00100000              sub rsp, 4096
   254 000001BC 4889E7                      mov rdi, rsp
   255 000001BF BE00100000                  mov rsi, 4096
   256 000001C4 488B1425[00000000]          mov rdx, [stdin]
   257 000001CC E8(00000000)                call fgets
   258                                  
   259                                      ;Remove newline
   260 000001D1 B800000000                  mov rax, 0
   261 000001D6 4889E7                      mov rdi, rsp
   262 000001D9 E8(00000000)                call strlen
   263 000001DE C64404FF00                  mov [rsp + rax - 1], byte 0
   264                                  
   265                                      ;Check if input is a float
   266 000001E3 B800000000                  mov rax, 0
   267 000001E8 4889E7                      mov rdi, rsp
   268 000001EB E8(00000000)                call isfloat
   269 000001F0 4883F800                    cmp rax, false
   270 000001F4 0F8497000000                je bad_input
   271                                  
   272                                      ;Convert the input from string to float
   273 000001FA B800000000                  mov rax, 0
   274 000001FF 4889E7                      mov rdi, rsp
   275 00000202 E8(00000000)                call atof
   276 00000207 F2440F10D8                  movsd xmm11, xmm0
   277                                  
   278                                      ;Adds 1 to r15, which enables the program to jump to get_angle after invalid inputs
   279 0000020C 4983C701                    add r15, 1
   280                                  
   281                                      ;Fixes the stack
   282 00000210 4881C400100000              add rsp, 4096
   283                                  
   284 00000217 EB00                        jmp get_angle
   285                                  
   286                                  
   287                                  
   288                                  get_angle:
   289                                      ;Ask for size of the angle
   290 00000219 B800000000                  mov rax, 0
   291 0000021E 48BF-                       mov rdi, angle_prompt ;"Please enter the angle in degrees: "
   291 00000220 [F900000000000000] 
   292 00000228 E8(00000000)                call printf
   293                                  
   294                                  
   295                                      ;Gets user input for angle
   296 0000022D B800000000                  mov rax, 0
   297 00000232 4881EC00100000              sub rsp, 4096
   298 00000239 4889E7                      mov rdi, rsp
   299 0000023C BE00100000                  mov rsi, 4096
   300 00000241 488B1425[00000000]          mov rdx, [stdin]
   301 00000249 E8(00000000)                call fgets
   302                                  
   303                                      ;Remove newline
   304 0000024E B800000000                  mov rax, 0
   305 00000253 4889E7                      mov rdi, rsp
   306 00000256 E8(00000000)                call strlen
   307 0000025B C64404FF00                  mov [rsp + rax - 1], byte 0
   308                                  
   309                                      ;Check if input is a float
   310 00000260 B800000000                  mov rax, 0
   311 00000265 4889E7                      mov rdi, rsp
   312 00000268 E8(00000000)                call isfloat
   313 0000026D 4883F800                    cmp rax, false
   314 00000271 741E                        je bad_input
   315                                  
   316                                      ;Convert the input from string to float
   317 00000273 B800000000                  mov rax, 0
   318 00000278 4889E7                      mov rdi, rsp
   319 0000027B E8(00000000)                call atof
   320 00000280 F2440F10E0                  movsd xmm12, xmm0
   321                                  
   322                                  
   323                                      ;Fixes stack
   324 00000285 4881C400100000              add rsp, 4096
   325                                  
   326                                      ;Jumps to exit
   327 0000028C E9D2000000                  jmp exit
   328                                  
   329                                  
   330                                  
   331                                  bad_input:
   332                                  ;bad_input will have a tracker for which input the user is on (first side, second side, angle) and
   333                                  ;depending on the number in the register (will use 0 for first side, 1 for second side, and 2 for angle)
   334                                  ;the program will jump to the correct code block
   335                                  
   336                                  ;if(tracker == 0)
   337                                      ;jump to first side input
   338                                  ;elseif(tracker == 1)
   339                                      ;jump to second side input
   340                                  ;elseif(tracker == 2)
   341                                      ;jump to angle input
   342                                  
   343                                      ;Fixes stack
   344 00000291 4881C400100000              add rsp, 4096
   345                                  
   346                                      ;Tell the user their input is invalid and have them enter another input
   347 00000298 B800000000                  mov rax, 0
   348 0000029D 48BF-                       mov rdi, print_bad_input ;"Invalid input. Try again"
   348 0000029F [B701000000000000] 
   349 000002A7 E8(00000000)                call printf
   350                                  
   351                                  
   352                                      ;Gets user input (for either angle or side)
   353 000002AC B800000000                  mov rax, 0
   354 000002B1 4881EC00100000              sub rsp, 4096
   355 000002B8 4889E7                      mov rdi, rsp
   356 000002BB BE00100000                  mov rsi, 4096
   357 000002C0 488B1425[00000000]          mov rdx, [stdin]
   358 000002C8 E8(00000000)                call fgets
   359                                  
   360                                      ;Remove newline
   361 000002CD B800000000                  mov rax, 0
   362 000002D2 4889E7                      mov rdi, rsp
   363 000002D5 E8(00000000)                call strlen
   364 000002DA C64404FF00                  mov [rsp + rax - 1], byte 0
   365                                  
   366                                      ;Check if input is a postive float
   367 000002DF B800000000                  mov rax, 0
   368 000002E4 4889E7                      mov rdi, rsp
   369 000002E7 E8(00000000)                call isfloat
   370 000002EC 4883F800                    cmp rax, false
   371 000002F0 749F                        je bad_input
   372                                  
   373                                      ;Jump back to correct input block depending on value of r15
   374 000002F2 4983FF00                    cmp r15, 0
   375 000002F6 740C                        je first_side_bad
   376                                  
   377 000002F8 4983FF01                    cmp r15, 1
   378 000002FC 7428                        je second_side_bad
   379                                  
   380 000002FE 4983FF02                    cmp r15, 2
   381 00000302 7444                        je angle_bad
   382                                  
   383                                  
   384                                  ;The following three blocks (first_side_bad, second_side_bad, and angle_bad) are used to 
   385                                  ;take in another user input without outputting the whole prompt again
   386                                  first_side_bad:
   387                                      ;Convert the input from string to float
   388 00000304 B800000000                  mov rax, 0
   389 00000309 4889E7                      mov rdi, rsp
   390 0000030C E8(00000000)                call atof
   391 00000311 F2440F10D0                  movsd xmm10, xmm0
   392                                  
   393 00000316 4983C701                    add r15, 1
   394                                  
   395                                      ;Fixes stack
   396 0000031A 4881C400100000              add rsp, 4096
   397                                  
   398 00000321 E976FEFFFF                  jmp get_second_side
   399                                  
   400                                  
   401                                  
   402                                  second_side_bad:
   403                                      ;Convert the input from string to float
   404 00000326 B800000000                  mov rax, 0
   405 0000032B 4889E7                      mov rdi, rsp
   406 0000032E E8(00000000)                call atof
   407 00000333 F2440F10D8                  movsd xmm11, xmm0
   408                                  
   409 00000338 4983C701                    add r15, 1
   410                                  
   411                                      ;Fixes stack
   412 0000033C 4881C400100000              add rsp, 4096
   413                                  
   414 00000343 E9D1FEFFFF                  jmp get_angle
   415                                  
   416                                  
   417                                  angle_bad:
   418                                      ;Convert the input from string to float
   419 00000348 B800000000                  mov rax, 0
   420 0000034D 4889E7                      mov rdi, rsp
   421 00000350 E8(00000000)                call atof
   422 00000355 F2440F10E0                  movsd xmm12, xmm0
   423                                  
   424                                      ;Fixes stack
   425 0000035A 4881C400100000              add rsp, 4096
   426                                  
   427 00000361 EB00                        jmp exit
   428                                  
   429                                  exit:
   430                                      ;Output thank you message along with values the user entered
   431 00000363 B803000000                  mov rax, 3
   432 00000368 48BF-                       mov rdi, thank_you_message ;"Thank you %s. You entered %1.6lf %1.6lf and %1.6lf"
   432 0000036A [D201000000000000] 
   433 00000372 48BE-                       mov rsi, user_name
   433 00000374 [4003000000000000] 
   434 0000037C 48B9-                       mov rcx, format
   434 0000037E [1D01000000000000] 
   435 00000386 F2410F10C2                  movsd xmm0, xmm10
   436 0000038B F2410F10CB                  movsd xmm1, xmm11
   437 00000390 F2410F10D4                  movsd xmm2, xmm12
   438 00000395 E8(00000000)                call printf
   439                                  
   440                                      ;Moves values for sides and angles to lower registers for use on the next block
   441 0000039A F2450F10C2                  movsd xmm8, xmm10
   442 0000039F F2450F10CB                  movsd xmm9, xmm11
   443 000003A4 F2450F10D4                  movsd xmm10, xmm12
   444                                  
   445                                  
   446                                  
   447                                      ;Calculate the length of the third side
   448                                      ;Formula for SAS Triangles: a = sqrt(b^2 + c^2 - 2bc(cosA))
   449                                      ;The following registers and their respective values they hold:
   450                                      ;b = xmm8
   451                                      ;c = xmm9
   452                                      ;A = xmm10
   453                                      ;b^2 = xmm11
   454                                      ;c^2 = xmm12
   455                                      ;2 = xmm13
   456                                      ;2*b*c = xmm13 (values will be multiplied into xmm13, which already holds 2)
   457                                      ;cos(A) = xmm14
   458                                      ;a = xmm15 (value of third side being calculated)
   459                                      ;xmm11 will hold the cosine of the angle
   460                                  
   461                                  
   462                                  
   463                                  
   464                                      ;Square value of b (xmm8) and store value in xmm11
   465 000003A9 F2450F10D8                  movsd xmm11, xmm8
   466 000003AE F2450F59DB                  mulsd xmm11, xmm11
   467                                  
   468                                  
   469                                      ;Square value of c (xmm9) and store value in xmm12
   470 000003B3 F2450F10E1                  movsd xmm12, xmm9
   471 000003B8 F2450F59E4                  mulsd xmm12, xmm12
   472                                  
   473                                  
   474                                      ;Add b^2 and c^2 (xmm8 + xmm9) and store result in xmm11
   475 000003BD F2450F58DC                  addsd xmm11, xmm12
   476                                  
   477                                  
   478                                      ;Block of code for 2*b*c
   479                                      ;2 will be stored in xmm13
   480                                      ;Product of 2*b*c
   481 000003C2 F2440F102C25-               movsd xmm13, qword [two]
   481 000003C8 [7E020000]         
   482 000003CC F2450F59E8                  mulsd xmm13, xmm8
   483 000003D1 F2450F59E9                  mulsd xmm13, xmm9
   484                                  
   485                                  
   486                                      ;Convert degrees to radians before calling cosine
   487 000003D6 F2440F100425-               movsd xmm8, qword [angle_180]
   487 000003DC [86020000]         
   488 000003E0 F2440F100C25-               movsd xmm9, qword [pi]
   488 000003E6 [8E020000]         
   489 000003EA F2450F5EC8                  divsd xmm9, xmm8
   490 000003EF F2450F59D1                  mulsd xmm10, xmm9
   491                                  
   492                                      ;Cosine function
   493 000003F4 B801000000                  mov rax, 1
   494 000003F9 F2410F10C2                  movsd xmm0, xmm10
   495 000003FE E8(00000000)                call cos
   496 00000403 F2440F10F0                  movsd xmm14, xmm0
   497                                  
   498                                  
   499                                  
   500                                      ;Multiply (2*b*c) * cos(A)
   501 00000408 F2450F59F5                  mulsd xmm14, xmm13
   502                                  
   503                                  
   504                                      ;Subtract b^2 + c^2 - 2bc(cosA) (xmm11 - xmm14)
   505 0000040D F2450F5CDE                  subsd xmm11, xmm14
   506                                  
   507                                  
   508                                      ;Move the difference into xmm15 and square root the value
   509 00000412 F2450F10FB                  movsd xmm15, xmm11
   510 00000417 F2450F51FF                  sqrtsd xmm15, xmm15
   511                                  
   512                                  
   513                                      ;Output length of third side
   514 0000041C B801000000                  mov rax, 1
   515 00000421 48BF-                       mov rdi, output_third_length ;"The length of the third side is %1.6lf"
   515 00000423 [5E01000000000000] 
   516 0000042B 48BE-                       mov rsi, format
   516 0000042D [1D01000000000000] 
   517 00000435 F2410F10C7                  movsd xmm0, xmm15
   518 0000043A E8(00000000)                call printf
   519                                  
   520                                  
   521                                  
   522                                      ;Output confirmation that the third length is being sent to driver
   523 0000043F B801000000                  mov rax, 1
   524 00000444 48BF-                       mov rdi, length_send_message ;"The length will be sent to the driver program"
   524 00000446 [8701000000000000] 
   525 0000044E 48BE-                       mov rsi, format
   525 00000450 [1D01000000000000] 
   526 00000458 F2410F10C7                  movsd xmm0, xmm15
   527 0000045D E8(00000000)                call printf
   528                                  
   529                                  
   530                                      ;Get the ending time on the system clock
   531 00000462 0FA2                        cpuid
   532 00000464 0F31                        rdtsc
   533 00000466 48C1E220                    shl rdx, 32
   534 0000046A 4801C2                      add rdx, rax
   535 0000046D 4989C4                      mov r12, rax
   536                                  
   537                                  
   538                                      ;Output ending time on system clock
   539 00000470 B800000000                  mov rax, 0
   540 00000475 48BF-                       mov rdi, ending_time ;"The final time on the system clock is %lu tics"
   540 00000477 [3402000000000000] 
   541 0000047F 4C89E6                      mov rsi, r12
   542 00000482 E8(00000000)                call printf
   543                                  
   544                                  
   545                                      ;Output a goodbye message for the user
   546 00000487 B800000000                  mov rax, 0
   547 0000048C 48BF-                       mov rdi, good_bye_msg ;"Have a good day %s %s."
   547 0000048E [6502000000000000] 
   548 00000496 48BE-                       mov rsi, user_title
   548 00000498 [7003000000000000] 
   549 000004A0 48BA-                       mov rdx, user_name
   549 000004A2 [4003000000000000] 
   550 000004AA E8(00000000)                call printf
   551                                  
   552                                  
   553                                      ;Back up value in xmm15 before restoring registers
   554 000004AF 6A00                        push qword 0
   555 000004B1 F2440F113C24                movsd [rsp], xmm15
   556                                  
   557                                  
   558                                      ;Restore the values to non-GPRs
   559 000004B7 B807000000                  mov rax, 7
   560 000004BC BA00000000                  mov rdx, 0
   561 000004C1 0FAE2C25[00000000]          xrstor [backup_storage_area]
   562                                  
   563                                  
   564 000004C9 F20F100424                  movsd xmm0, [rsp]
   565 000004CE 58                          pop rax
   566                                  
   567                                  
   568                                      ;Restore the GPRs
   569 000004CF 9D                          popf
   570 000004D0 415F                        pop r15
   571 000004D2 415E                        pop r14
   572 000004D4 415D                        pop r13
   573 000004D6 415C                        pop r12
   574 000004D8 415B                        pop r11
   575 000004DA 415A                        pop r10
   576 000004DC 4159                        pop r9
   577 000004DE 4158                        pop r8
   578 000004E0 5E                          pop rsi
   579 000004E1 5F                          pop rdi
   580 000004E2 5A                          pop rdx
   581 000004E3 59                          pop rcx
   582 000004E4 5B                          pop rbx
   583 000004E5 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   584 000004E6 C3                          ret
   585                                  ;End of the function triangle.asm ====================================================================
