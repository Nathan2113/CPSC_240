     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Driving Time". This program will take in the user's full name, their title, and the distances they have     *
     3                                  ;traveled from Fullerton -> Santa Ana, Santa Ana -> Long Beach, and Long Beach -> Fullerton, as well as their average       *
     4                                  ;speed for each trip. Once the program has the total distance traveled and the average speed of the entire trip, the        *
     5                                  ;program will calculate the total time of the trip, then the assembly file will send the average speed back to the driver
     6                                  ;function                                                                                                                   *
     7                                  ;                                                                                                                           *
     8                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     9                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    10                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    11                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    12                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    13                                  ;****************************************************************************************************************************
    14                                  
    15                                  
    16                                  
    17                                  
    18                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    19                                  ;Author information
    20                                  ;  Author name: Nathan Warner
    21                                  ;  Author email: nwarner4@csu.fullerton.edu
    22                                  ;
    23                                  ;Program information
    24                                  ;  Program name: Driving Time
    25                                  ;  Programming languages: One module in C, one in X86, and one in bash.
    26                                  ;  Date program began: 2024-Jan-30
    27                                  ;  Date of last update: 2024-Feb-2
    28                                  ;  Files in this program: driving_time.c, average.asm, r.sh.
    29                                  ;  Testing: Alpha testing completed.  All functions are correct.
    30                                  ;  Status: Ready for release to customers
    31                                  ;
    32                                  ;Purpose
    33                                  ;  This program will take in total distance traveled and average speed and find the total time of the trip,
    34                                  ;  as well as sending the average speed of the entirety of the trip back to the driver
    35                                  ;
    36                                  ;This file:
    37                                  ;  File name: average.asm
    38                                  ;  Language: X86-64
    39                                  ;  Max page width: 124 columns
    40                                  ;  Assemble (standard): nasm -l average.lis -o average.o average.asm
    41                                  ;  Assemble (debug): nasm -g dwarf -l average.lis -o average.o average.asm
    42                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    43                                  ;  Prototype of this function: double average();
    44                                  ; 
    45                                  ;
    46                                  ;
    47                                  ;
    48                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    49                                  
    50                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    51                                  ;not have its own place of declaration
    52                                  
    53                                  extern printf
    54                                  
    55                                  extern fgets
    56                                  
    57                                  extern stdin
    58                                  
    59                                  extern strlen
    60                                  
    61                                  extern scanf
    62                                  
    63                                  global average
    64                                  
    65                                  name_string_size equ 48
    66                                  
    67                                  title_string_size equ 48
    68                                  
    69                                  segment .data
    70                                  ;This section (or segment) is for declaring initialized arrays
    71                                  
    72 00000000 506C6561736520656E-     name_prompt db "Please enter your first and last names: ", 0
    72 00000009 74657220796F757220-
    72 00000012 666972737420616E64-
    72 0000001B 206C617374206E616D-
    72 00000024 65733A2000         
    73 00000029 506C6561736520656E-     title_prompt db "Please enter your title such as Lieutenant, Chief, Mr, Ms, Influencer, Chairman, Freshman,", 10, "Foreman, Project Leader, etc: ", 0
    73 00000032 74657220796F757220-
    73 0000003B 7469746C6520737563-
    73 00000044 68206173204C696575-
    73 0000004D 74656E616E742C2043-
    73 00000056 686965662C204D722C-
    73 0000005F 204D732C20496E666C-
    73 00000068 75656E6365722C2043-
    73 00000071 686169726D616E2C20-
    73 0000007A 46726573686D616E2C-
    73 00000083 0A466F72656D616E2C-
    73 0000008C 2050726F6A65637420-
    73 00000095 4C65616465722C2065-
    73 0000009E 74633A2000         
    74 000000A3 5468616E6B20796F75-     thank_you_p1 db "Thank you %s", 0
    74 000000AC 20257300           
    75 000000B0 2025730A00              thank_you_p2 db " %s", 10, 0
    76 000000B5 0A456E746572207468-     fullerton_prompt db 10, "Enter the number of miles traveled from Fullerton to Santa Ana: ", 0
    76 000000BE 65206E756D62657220-
    76 000000C7 6F66206D696C657320-
    76 000000D0 74726176656C656420-
    76 000000D9 66726F6D2046756C6C-
    76 000000E2 6572746F6E20746F20-
    76 000000EB 53616E746120416E61-
    76 000000F4 3A2000             
    77 000000F7 0A456E746572207468-     santa_ana_prompt db 10, "Enter the number of miles traveled from Santa Ana to Long Beach: ", 0
    77 00000100 65206E756D62657220-
    77 00000109 6F66206D696C657320-
    77 00000112 74726176656C656420-
    77 0000011B 66726F6D2053616E74-
    77 00000124 6120416E6120746F20-
    77 0000012D 4C6F6E672042656163-
    77 00000136 683A2000           
    78 0000013A 0A456E746572207468-     long_beach_prompt db 10, "Enter the number of miles traveled from Long Beach to Fullerton: ", 0
    78 00000143 65206E756D62657220-
    78 0000014C 6F66206D696C657320-
    78 00000155 74726176656C656420-
    78 0000015E 66726F6D204C6F6E67-
    78 00000167 20426561636820746F-
    78 00000170 2046756C6C6572746F-
    78 00000179 6E3A2000           
    79 0000017D 456E74657220796F75-     speed_prompt db "Enter your average speed during that leg of the trip: ", 0
    79 00000186 722061766572616765-
    79 0000018F 207370656564206475-
    79 00000198 72696E672074686174-
    79 000001A1 206C6567206F662074-
    79 000001AA 686520747269703A20-
    79 000001B3 00                 
    80 000001B4 256C6600                format db "%lf", 0
    81 000001B8 54686520696E707574-     process_message db "The inputted data are being processed", 10, 10, 0
    81 000001C1 746564206461746120-
    81 000001CA 617265206265696E67-
    81 000001D3 2070726F6365737365-
    81 000001DC 640A0A00           
    82 000001E0 54686520746F74616C-     total_distance db "The total distance traveled is %1.1lf miles.", 10, 0
    82 000001E9 2064697374616E6365-
    82 000001F2 2074726176656C6564-
    82 000001FB 2069732025312E316C-
    82 00000204 66206D696C65732E0A-
    82 0000020D 00                 
    83 0000020E 5468652074696D6520-     trip_time db "The time of trip is %1.8lf", 10, 0
    83 00000217 6F6620747269702069-
    83 00000220 732025312E386C660A-
    83 00000229 00                 
    84 0000022A 546865206176657261-     average_speed db "The average speed during the trip is %1.8lf mph.", 10, 0
    84 00000233 676520737065656420-
    84 0000023C 647572696E67207468-
    84 00000245 652074726970206973-
    84 0000024E 2025312E386C66206D-
    84 00000257 70682E0A00         
    85 0000025C 0000000000000840        val dq 3.0
    86                                  
    87                                  
    88                                  
    89                                  
    90                                  segment .bss
    91                                  ;This section (or segment) is for declaring empty arrays
    92                                  
    93                                  align 64
    94 00000000 <res 340h>              backup_storage_area resb 832
    95                                  
    96 00000340 <res 30h>               user_name resb name_string_size
    97                                  
    98 00000370 <res 30h>               user_title resb title_string_size
    99                                  
   100                                  segment .text
   101                                  
   102                                  average:
   103                                  
   104                                  ;Back up the GPRs (General Purpose Registers)
   105 00000000 55                      push rbp
   106 00000001 4889E5                  mov rbp, rsp
   107 00000004 53                      push rbx
   108 00000005 51                      push rcx
   109 00000006 52                      push rdx
   110 00000007 57                      push rdi
   111 00000008 56                      push rsi
   112 00000009 4150                    push r8
   113 0000000B 4151                    push r9
   114 0000000D 4152                    push r10
   115 0000000F 4153                    push r11
   116 00000011 4154                    push r12
   117 00000013 4155                    push r13
   118 00000015 4156                    push r14
   119 00000017 4157                    push r15
   120 00000019 9C                      pushf
   121                                  
   122                                  ;Backup the registers other than the GPRs
   123 0000001A B807000000              mov rax,7
   124 0000001F BA00000000              mov rdx,0
   125 00000024 0FAE2425[00000000]      xsave [backup_storage_area]
   126                                  
   127                                  ;Output prompt for first and last name
   128 0000002C B800000000              mov rax, 0
   129 00000031 48BF-                   mov rdi, name_prompt
   129 00000033 [0000000000000000] 
   130 0000003B E8(00000000)            call printf
   131                                  
   132                                  ;Input user names
   133 00000040 B800000000              mov rax, 0
   134 00000045 48BF-                   mov rdi, user_name
   134 00000047 [4003000000000000] 
   135 0000004F BE30000000              mov rsi, name_string_size
   136 00000054 488B1425[00000000]      mov rdx, [stdin]
   137 0000005C E8(00000000)            call fgets
   138                                  
   139                                  ;Remove newline
   140 00000061 B800000000              mov rax, 0
   141 00000066 48BF-                   mov rdi, user_name
   141 00000068 [4003000000000000] 
   142 00000070 E8(00000000)            call strlen
   143 00000075 C680[3F030000]00        mov [user_name+rax-1], byte 0
   144                                  
   145                                  ;Output prompt for user's title
   146 0000007C B800000000              mov rax, 0
   147 00000081 48BF-                   mov rdi, title_prompt
   147 00000083 [2900000000000000] 
   148 0000008B E8(00000000)            call printf
   149                                  
   150                                  ;Input user title
   151 00000090 B800000000              mov rax, 0
   152 00000095 48BF-                   mov rdi, user_title
   152 00000097 [7003000000000000] 
   153 0000009F BE30000000              mov rsi, title_string_size
   154 000000A4 488B1425[00000000]      mov rdx, [stdin]
   155 000000AC E8(00000000)            call fgets
   156                                  
   157                                  ;Remove newline
   158 000000B1 B800000000              mov rax, 0
   159 000000B6 48BF-                   mov rdi, user_title
   159 000000B8 [7003000000000000] 
   160 000000C0 E8(00000000)            call strlen
   161 000000C5 C680[6F030000]00        mov [user_title+rax-1], byte 0
   162                                  
   163                                  ;Say thank you part 1
   164 000000CC B800000000              mov rax, 0
   165 000000D1 48BF-                   mov rdi, thank_you_p1
   165 000000D3 [A300000000000000] 
   166 000000DB 48BE-                   mov rsi, user_title
   166 000000DD [7003000000000000] 
   167 000000E5 E8(00000000)            call printf
   168                                  
   169                                  ;Say thank you part 2
   170 000000EA B800000000              mov rax, 0
   171 000000EF 48BF-                   mov rdi, thank_you_p2
   171 000000F1 [B000000000000000] 
   172 000000F9 48BE-                   mov rsi, user_name
   172 000000FB [4003000000000000] 
   173 00000103 E8(00000000)            call printf
   174                                  
   175                                  
   176                                  
   177                                  
   178                                  ;Ask for number of miles from Fullerton to Santa Ana
   179 00000108 B800000000              mov rax, 0
   180 0000010D 48BF-                   mov rdi, fullerton_prompt
   180 0000010F [B500000000000000] 
   181 00000117 E8(00000000)            call printf
   182                                  
   183                                  ;Input number of miles from Fullerton to Santa Ana
   184 0000011C 48BF-                   mov rdi, format
   184 0000011E [B401000000000000] 
   185 00000126 6AF7                    push qword -9
   186 00000128 6AF7                    push qword -9
   187 0000012A 4889E6                  mov rsi, rsp
   188 0000012D E8(00000000)            call scanf
   189 00000132 F2440F101424            movsd xmm10, [rsp]
   190 00000138 58                      pop rax
   191 00000139 58                      pop rax
   192                                  
   193                                  
   194                                  ;Ask for average speed from Fullerton to Santa Ana
   195 0000013A B800000000              mov rax, 0
   196 0000013F 48BF-                   mov rdi, speed_prompt
   196 00000141 [7D01000000000000] 
   197 00000149 E8(00000000)            call printf
   198                                  
   199                                  ;Input average speed from Fullerton to Santa Ana
   200 0000014E 48BF-                   mov rdi, format
   200 00000150 [B401000000000000] 
   201 00000158 6AF7                    push qword -9
   202 0000015A 6AF7                    push qword -9
   203 0000015C 4889E6                  mov rsi, rsp
   204 0000015F E8(00000000)            call scanf
   205 00000164 F2440F101C24            movsd xmm11, [rsp]
   206 0000016A 58                      pop rax
   207 0000016B 58                      pop rax
   208                                  
   209                                  
   210                                  
   211                                  ;Ask for number of miles from Santa Ana to Long Beach
   212 0000016C B800000000              mov rax, 0
   213 00000171 48BF-                   mov rdi, santa_ana_prompt
   213 00000173 [F700000000000000] 
   214 0000017B E8(00000000)            call printf
   215                                  
   216                                  ;Input number of miles from Santa Ana to Long Beach
   217 00000180 48BF-                   mov rdi, format
   217 00000182 [B401000000000000] 
   218 0000018A 6AF7                    push qword -9
   219 0000018C 6AF7                    push qword -9
   220 0000018E 4889E6                  mov rsi, rsp
   221 00000191 E8(00000000)            call scanf
   222 00000196 F2440F102424            movsd xmm12, [rsp]
   223 0000019C 58                      pop rax
   224 0000019D 58                      pop rax
   225                                  
   226                                  
   227                                  
   228                                  ;Ask for average speed from Santa Ana to Long Beach
   229 0000019E B800000000              mov rax, 0
   230 000001A3 48BF-                   mov rdi, speed_prompt
   230 000001A5 [7D01000000000000] 
   231 000001AD E8(00000000)            call printf
   232                                  
   233                                  ;Input average speed from Santa Ana to Long Beach
   234 000001B2 48BF-                   mov rdi, format
   234 000001B4 [B401000000000000] 
   235 000001BC 6AF7                    push qword -9
   236 000001BE 6AF7                    push qword -9
   237 000001C0 4889E6                  mov rsi, rsp
   238 000001C3 E8(00000000)            call scanf
   239 000001C8 F2440F102C24            movsd xmm13, [rsp]
   240 000001CE 58                      pop rax
   241 000001CF 58                      pop rax
   242                                  
   243                                  
   244                                  
   245                                  ;Ask for number of miles from Long Beach to Fullerton
   246 000001D0 B800000000              mov rax, 0
   247 000001D5 48BF-                   mov rdi, long_beach_prompt
   247 000001D7 [3A01000000000000] 
   248 000001DF E8(00000000)            call printf
   249                                  
   250                                  ;Input number of miles from Long Beach to Fullerton
   251 000001E4 48BF-                   mov rdi, format
   251 000001E6 [B401000000000000] 
   252 000001EE 6AF7                    push qword -9
   253 000001F0 6AF7                    push qword -9
   254 000001F2 4889E6                  mov rsi, rsp
   255 000001F5 E8(00000000)            call scanf
   256 000001FA F2440F103424            movsd xmm14, [rsp]
   257 00000200 58                      pop rax
   258 00000201 58                      pop rax
   259                                  
   260                                  
   261                                  
   262                                  ;Ask for average speed from Long Beach to Fullerton
   263 00000202 B800000000              mov rax, 0
   264 00000207 48BF-                   mov rdi, speed_prompt
   264 00000209 [7D01000000000000] 
   265 00000211 E8(00000000)            call printf
   266                                  
   267                                  ;Input average speed from Long Beach to Fullerton
   268 00000216 48BF-                   mov rdi, format
   268 00000218 [B401000000000000] 
   269 00000220 6AF7                    push qword -9
   270 00000222 6AF7                    push qword -9
   271 00000224 4889E6                  mov rsi, rsp
   272 00000227 E8(00000000)            call scanf
   273 0000022C F2440F103C24            movsd xmm15, [rsp]
   274 00000232 58                      pop rax
   275 00000233 58                      pop rax
   276                                  
   277                                  
   278                                  
   279                                  ;Get total distance traveled
   280                                  ; movsd xmm14, xmm8
   281                                  ; addsd xmm14, xmm10
   282                                  ; addsd xmm14, xmm12
   283 00000234 F2410F10FA              movsd xmm7, xmm10
   284 00000239 F2410F58FC              addsd xmm7, xmm12
   285 0000023E F2410F58FE              addsd xmm7, xmm14
   286                                  
   287                                  
   288                                  ;Get total time
   289                                  ;Get first trip time
   290 00000243 F2410F10C2              movsd xmm0, xmm10
   291 00000248 F2410F5EC3              divsd xmm0, xmm11
   292                                  
   293                                  ;Get second trip time
   294 0000024D F2410F10CC              movsd xmm1, xmm12
   295 00000252 F2410F5ECD              divsd xmm1, xmm13
   296                                  
   297                                  ;Get third trip time
   298 00000257 F2410F10D6              movsd xmm2, xmm14
   299 0000025C F2410F5ED7              divsd xmm2, xmm15
   300                                  
   301                                  ;Add them together
   302 00000261 F20F58C1                addsd xmm0, xmm1
   303 00000265 F20F58C2                addsd xmm0, xmm2
   304                                  
   305                                  
   306                                  
   307                                  ;Get average speed
   308 00000269 F20F10DF                movsd xmm3, xmm7
   309 0000026D F20F5ED8                divsd xmm3, xmm0
   310                                  
   311                                  
   312                                  ;Get total time
   313                                  ; movsd xmm9, xmm14
   314                                  ; divsd xmm9, xmm15
   315                                  
   316                                  ;movsd xmm9, xmm7
   317                                  ;divsd xmm9, xmm8
   318                                  
   319                                  ;Get average speed
   320                                  ; movsd xmm15, xmm9
   321                                  ; addsd xmm15, xmm11
   322                                  ; addsd xmm15, xmm13
   323                                  ; movsd xmm7, qword [val]
   324                                  ; divsd xmm15, xmm7
   325                                  
   326                                  ;movsd xmm8, xmm11
   327                                  ;addsd xmm8, xmm13
   328                                  ;addsd xmm8, xmm15
   329                                  ;movsd xmm15, qword [val]
   330                                  ;divsd xmm8, xmm15
   331                                  
   332                                  
   333                                  ;Store output values in registers xmm13-xmm15
   334                                  ;Total Distance
   335 00000271 F2440F10EF              movsd xmm13, xmm7
   336                                  ;Average Speed
   337 00000276 F2440F10F3              movsd xmm14, xmm3
   338                                  ;Total time
   339 0000027B F2440F10F8              movsd xmm15, xmm0
   340                                  
   341                                  
   342                                  ;Output to let user know that data is being processed
   343 00000280 B800000000              mov rax, 0
   344 00000285 48BF-                   mov rdi, process_message
   344 00000287 [B801000000000000] 
   345 0000028F E8(00000000)            call printf
   346                                  
   347                                  
   348                                  ;Output total distance traveled
   349 00000294 B801000000              mov rax, 1
   350 00000299 48BF-                   mov rdi, total_distance
   350 0000029B [E001000000000000] 
   351 000002A3 48BE-                   mov rsi, format
   351 000002A5 [B401000000000000] 
   352 000002AD F2410F10C5              movsd xmm0, xmm13
   353 000002B2 E8(00000000)            call printf
   354                                  
   355                                  
   356                                  
   357                                  ;Output total time of trip
   358 000002B7 B801000000              mov rax, 1
   359 000002BC 48BF-                   mov rdi, trip_time
   359 000002BE [0E02000000000000] 
   360 000002C6 48BE-                   mov rsi, format
   360 000002C8 [B401000000000000] 
   361 000002D0 F2410F10C7              movsd xmm0, xmm15
   362 000002D5 E8(00000000)            call printf
   363                                  
   364                                  
   365                                  
   366                                  ;Output average speed
   367 000002DA B801000000              mov rax, 1
   368 000002DF 48BF-                   mov rdi, average_speed
   368 000002E1 [2A02000000000000] 
   369 000002E9 48BE-                   mov rsi, format
   369 000002EB [B401000000000000] 
   370 000002F3 F2410F10C6              movsd xmm0, xmm14
   371 000002F8 E8(00000000)            call printf
   372                                  
   373                                  
   374                                  
   375                                  ;Back up value in xmm14 before restoring registers
   376 000002FD 6A00                    push qword 0
   377 000002FF F2440F113424            movsd [rsp], xmm14
   378                                  
   379                                  
   380                                  ;Restore the values to non-GPRs
   381 00000305 B807000000              mov rax, 7
   382 0000030A BA00000000              mov rdx, 0
   383 0000030F 0FAE2C25[00000000]      xrstor [backup_storage_area]
   384                                  
   385                                  
   386 00000317 F20F100424              movsd xmm0, [rsp]
   387 0000031C 58                      pop rax
   388                                  
   389                                  
   390                                  ;Restore the GPRs
   391 0000031D 9D                      popf
   392 0000031E 415F                    pop r15
   393 00000320 415E                    pop r14
   394 00000322 415D                    pop r13
   395 00000324 415C                    pop r12
   396 00000326 415B                    pop r11
   397 00000328 415A                    pop r10
   398 0000032A 4159                    pop r9
   399 0000032C 4158                    pop r8
   400 0000032E 5E                      pop rsi
   401 0000032F 5F                      pop rdi
   402 00000330 5A                      pop rdx
   403 00000331 59                      pop rcx
   404 00000332 5B                      pop rbx
   405 00000333 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   406 00000334 C3                      ret
   407                                  ;End of the function average.asm ====================================================================
