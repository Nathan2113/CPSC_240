     1                                  ; Nathan Warner
     2                                  ; nwarner4@csu.fullerton.edu
     3                                  ; CPSC 240-3
     4                                  ; Mar 20, 2024
     5                                  
     6                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
     7                                  ;not have its own place of declaration
     8                                  
     9                                  global electricity
    10                                  
    11                                  extern printf
    12                                  extern stdin
    13                                  extern scanf
    14                                  extern current
    15                                  extern atof
    16                                  extern strlen
    17                                  extern isfloat
    18                                  extern fgets
    19                                  
    20                                  float_size equ 60
    21                                  true equ -1
    22                                  false equ 0
    23                                  
    24                                  segment .data
    25                                  ;This section (or segment) is for declaring initialized arrays
    26                                  
    27 00000000 506C6561736520656E-     electric_force_prompt db "Please enter the electric force in the circuit (volts): ", 0
    27 00000009 746572207468652065-
    27 00000012 6C6563747269632066-
    27 0000001B 6F72636520696E2074-
    27 00000024 686520636972637569-
    27 0000002D 742028766F6C747329-
    27 00000036 3A2000             
    28 00000039 506C6561736520656E-     resistance_1_prompt db "Please enter the resistance in circuit number 1 (ohms): ", 0
    28 00000042 746572207468652072-
    28 0000004B 6573697374616E6365-
    28 00000054 20696E206369726375-
    28 0000005D 6974206E756D626572-
    28 00000066 203120286F686D7329-
    28 0000006F 3A2000             
    29 00000072 506C6561736520656E-     resistance_2_prompt db "Please enter the resistance in circuit number 2 (ohms): ", 0
    29 0000007B 746572207468652072-
    29 00000084 6573697374616E6365-
    29 0000008D 20696E206369726375-
    29 00000096 6974206E756D626572-
    29 0000009F 203220286F686D7329-
    29 000000A8 3A2000             
    30 000000AB 5468616E6B20796F75-     thank_you_message db "Thank you.", 10, 0
    30 000000B4 2E0A00             
    31 000000B7 256C6600                format db "%lf", 0
    32 000000BB 496E76616C69642069-     print_bad_input db "Invalid input. Try again: ", 0
    32 000000C4 6E7075742E20547279-
    32 000000CD 20616761696E3A2000 
    33                                  
    34                                  
    35                                  segment .bss
    36                                  ;This section (or segment) is for declaring empty arrays
    37                                  
    38                                  align 64
    39 00000000 <res 340h>              backup_storage_area resb 832
    40                                  
    41                                  
    42                                  segment .text
    43                                  
    44                                  electricity:
    45                                  
    46                                      ;Back up the GPRs (General Purpose Registers)
    47 00000000 55                          push rbp
    48 00000001 4889E5                      mov rbp, rsp
    49 00000004 53                          push rbx
    50 00000005 51                          push rcx
    51 00000006 52                          push rdx
    52 00000007 57                          push rdi
    53 00000008 56                          push rsi
    54 00000009 4150                        push r8
    55 0000000B 4151                        push r9
    56 0000000D 4152                        push r10
    57 0000000F 4153                        push r11
    58 00000011 4154                        push r12
    59 00000013 4155                        push r13
    60 00000015 4156                        push r14
    61 00000017 4157                        push r15
    62 00000019 9C                          pushf
    63                                  
    64                                      ;Backup the registers other than the GPRs
    65 0000001A B807000000                  mov rax,7
    66 0000001F BA00000000                  mov rdx,0
    67 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
    68                                  
    69                                      ;The following values will be stored in the following registers
    70                                      ;xmm10 -> volts
    71                                      ;xmm11 -> resistance in circuit 1
    72                                      ;xmm12 -> resistance in circuit 2
    73                                  
    74 0000002C 41BF00000000                mov r15, 0
    75                                  
    76                                  get_electric_force:
    77                                      ;Ask for electric force
    78 00000032 B800000000                  mov rax, 0
    79 00000037 48BF-                       mov rdi, electric_force_prompt
    79 00000039 [0000000000000000] 
    80 00000041 E8(00000000)                call printf
    81                                  
    82                                  
    83                                      ;Gets user input for first side
    84 00000046 B800000000                  mov rax, 0
    85 0000004B 4881EC00100000              sub rsp, 4096
    86 00000052 4889E7                      mov rdi, rsp
    87 00000055 BE00100000                  mov rsi, 4096
    88 0000005A 488B1425[00000000]          mov rdx, [stdin]
    89 00000062 E8(00000000)                call fgets
    90                                  
    91                                      ;Remove newline
    92 00000067 B800000000                  mov rax, 0
    93 0000006C 4889E7                      mov rdi, rsp
    94 0000006F E8(00000000)                call strlen
    95 00000074 C64404FF00                  mov [rsp + rax - 1], byte 0
    96                                  
    97                                      ;Check if input is a postive float
    98 00000079 B800000000                  mov rax, 0
    99 0000007E 4889E7                      mov rdi, rsp
   100 00000081 E8(00000000)                call isfloat
   101 00000086 4883F800                    cmp rax, false
   102 0000008A 0F8414010000                je bad_input
   103                                  
   104                                      ;Convert the input from string to float
   105 00000090 B800000000                  mov rax, 0
   106 00000095 4889E7                      mov rdi, rsp
   107 00000098 E8(00000000)                call atof
   108 0000009D F2440F10D0                  movsd xmm10, xmm0
   109                                  
   110                                      ;Adds 1 to r15, which enables the program to jump to get_resistance_1 after invalid inputs
   111 000000A2 4983C701                    add r15, 1
   112                                  
   113                                      ;Fixes the stack
   114 000000A6 4881C400100000              add rsp, 4096
   115                                  
   116 000000AD EB00                        jmp get_resistance_1
   117                                  
   118                                  
   119                                  
   120                                  get_resistance_1:
   121                                      ;Ask for resistance 1
   122 000000AF B800000000                  mov rax, 0
   123 000000B4 48BF-                       mov rdi, resistance_1_prompt
   123 000000B6 [3900000000000000] 
   124 000000BE E8(00000000)                call printf
   125                                  
   126                                  
   127                                      ;Gets user input for second side
   128 000000C3 B800000000                  mov rax, 0
   129 000000C8 4881EC00100000              sub rsp, 4096
   130 000000CF 4889E7                      mov rdi, rsp
   131 000000D2 BE00100000                  mov rsi, 4096
   132 000000D7 488B1425[00000000]          mov rdx, [stdin]
   133 000000DF E8(00000000)                call fgets
   134                                  
   135                                      ;Remove newline
   136 000000E4 B800000000                  mov rax, 0
   137 000000E9 4889E7                      mov rdi, rsp
   138 000000EC E8(00000000)                call strlen
   139 000000F1 C64404FF00                  mov [rsp + rax - 1], byte 0
   140                                  
   141                                      ;Check if input is a float
   142 000000F6 B800000000                  mov rax, 0
   143 000000FB 4889E7                      mov rdi, rsp
   144 000000FE E8(00000000)                call isfloat
   145 00000103 4883F800                    cmp rax, false
   146 00000107 0F8497000000                je bad_input
   147                                  
   148                                      ;Convert the input from string to float
   149 0000010D B800000000                  mov rax, 0
   150 00000112 4889E7                      mov rdi, rsp
   151 00000115 E8(00000000)                call atof
   152 0000011A F2440F10D8                  movsd xmm11, xmm0
   153                                  
   154                                      ;Adds 1 to r15, which enables the program to jump to get_resistance_2 after invalid inputs
   155 0000011F 4983C701                    add r15, 1
   156                                  
   157                                      ;Fixes the stack
   158 00000123 4881C400100000              add rsp, 4096
   159                                  
   160 0000012A EB00                        jmp get_resistance_2
   161                                  
   162                                  
   163                                  
   164                                  get_resistance_2:
   165                                      ;Ask for resistance 2
   166 0000012C B800000000                  mov rax, 0
   167 00000131 48BF-                       mov rdi, resistance_2_prompt
   167 00000133 [7200000000000000] 
   168 0000013B E8(00000000)                call printf
   169                                  
   170                                  
   171                                      ;Gets user input for resistance 2
   172 00000140 B800000000                  mov rax, 0
   173 00000145 4881EC00100000              sub rsp, 4096
   174 0000014C 4889E7                      mov rdi, rsp
   175 0000014F BE00100000                  mov rsi, 4096
   176 00000154 488B1425[00000000]          mov rdx, [stdin]
   177 0000015C E8(00000000)                call fgets
   178                                  
   179                                      ;Remove newline
   180 00000161 B800000000                  mov rax, 0
   181 00000166 4889E7                      mov rdi, rsp
   182 00000169 E8(00000000)                call strlen
   183 0000016E C64404FF00                  mov [rsp + rax - 1], byte 0
   184                                  
   185                                      ;Check if input is a float
   186 00000173 B800000000                  mov rax, 0
   187 00000178 4889E7                      mov rdi, rsp
   188 0000017B E8(00000000)                call isfloat
   189 00000180 4883F800                    cmp rax, false
   190 00000184 741E                        je bad_input
   191                                  
   192                                      ;Convert the input from string to float
   193 00000186 B800000000                  mov rax, 0
   194 0000018B 4889E7                      mov rdi, rsp
   195 0000018E E8(00000000)                call atof
   196 00000193 F2440F10E0                  movsd xmm12, xmm0
   197                                  
   198                                  
   199                                      ;Fixes stack
   200 00000198 4881C400100000              add rsp, 4096
   201                                  
   202                                      ;Jumps to exit
   203 0000019F E9D2000000                  jmp exit
   204                                  
   205                                  
   206                                  
   207                                  bad_input:
   208                                  ;bad_input will have a tracker for which input the user is on (electric force, resistance 1, resistance 2) and
   209                                  ;depending on the number in the register (will use 0 for electric force, 1 for resistance 1, and 2 for resistance 2)
   210                                  ;the program will jump to the correct code block
   211                                  
   212                                  ;if(tracker == 0)
   213                                      ;jump to electric force input
   214                                  ;elseif(tracker == 1)
   215                                      ;jump to resistance 1 input
   216                                  ;elseif(tracker == 2)
   217                                      ;jump to resistance 2 input
   218                                  
   219                                      ;Fixes stack
   220 000001A4 4881C400100000              add rsp, 4096
   221                                  
   222                                      ;Tell the user their input is invalid and have them enter another input
   223 000001AB B800000000                  mov rax, 0
   224 000001B0 48BF-                       mov rdi, print_bad_input ;"Invalid input. Try again"
   224 000001B2 [BB00000000000000] 
   225 000001BA E8(00000000)                call printf
   226                                  
   227                                  
   228                                      ;Gets user input (for electric force or resistance)
   229 000001BF B800000000                  mov rax, 0
   230 000001C4 4881EC00100000              sub rsp, 4096
   231 000001CB 4889E7                      mov rdi, rsp
   232 000001CE BE00100000                  mov rsi, 4096
   233 000001D3 488B1425[00000000]          mov rdx, [stdin]
   234 000001DB E8(00000000)                call fgets
   235                                  
   236                                      ;Remove newline
   237 000001E0 B800000000                  mov rax, 0
   238 000001E5 4889E7                      mov rdi, rsp
   239 000001E8 E8(00000000)                call strlen
   240 000001ED C64404FF00                  mov [rsp + rax - 1], byte 0
   241                                  
   242                                      ;Check if input is a postive float
   243 000001F2 B800000000                  mov rax, 0
   244 000001F7 4889E7                      mov rdi, rsp
   245 000001FA E8(00000000)                call isfloat
   246 000001FF 4883F800                    cmp rax, false
   247 00000203 749F                        je bad_input
   248                                  
   249                                      ;Jump back to correct input block depending on value of r15
   250 00000205 4983FF00                    cmp r15, 0
   251 00000209 740C                        je elec_force_bad
   252                                  
   253 0000020B 4983FF01                    cmp r15, 1
   254 0000020F 7428                        je resistance_1_bad
   255                                  
   256 00000211 4983FF02                    cmp r15, 2
   257 00000215 7444                        je resistance_2_bad
   258                                  
   259                                  
   260                                  ;The following three blocks (elec_force_bad, resistance_1_bad, and resistance_2_bad) are used to 
   261                                  ;take in another user input without outputting the whole prompt again
   262                                  elec_force_bad:
   263                                      ;Convert the input from string to float
   264 00000217 B800000000                  mov rax, 0
   265 0000021C 4889E7                      mov rdi, rsp
   266 0000021F E8(00000000)                call atof
   267 00000224 F2440F10D0                  movsd xmm10, xmm0
   268                                  
   269 00000229 4983C701                    add r15, 1
   270                                  
   271                                      ;Fixes stack
   272 0000022D 4881C400100000              add rsp, 4096
   273                                  
   274 00000234 E976FEFFFF                  jmp get_resistance_1
   275                                  
   276                                  
   277                                  
   278                                  resistance_1_bad:
   279                                      ;Convert the input from string to float
   280 00000239 B800000000                  mov rax, 0
   281 0000023E 4889E7                      mov rdi, rsp
   282 00000241 E8(00000000)                call atof
   283 00000246 F2440F10D8                  movsd xmm11, xmm0
   284                                  
   285 0000024B 4983C701                    add r15, 1
   286                                  
   287                                      ;Fixes stack
   288 0000024F 4881C400100000              add rsp, 4096
   289                                  
   290 00000256 E9D1FEFFFF                  jmp get_resistance_2
   291                                  
   292                                  
   293                                  resistance_2_bad:
   294                                      ;Convert the input from string to float
   295 0000025B B800000000                  mov rax, 0
   296 00000260 4889E7                      mov rdi, rsp
   297 00000263 E8(00000000)                call atof
   298 00000268 F2440F10E0                  movsd xmm12, xmm0
   299                                  
   300                                      ;Fixes stack
   301 0000026D 4881C400100000              add rsp, 4096
   302                                  
   303 00000274 EB00                        jmp exit
   304                                  
   305                                  exit:
   306                                      ; ;Moves values for electric force and resistances to lower registers for use on the next block
   307                                      ; movsd xmm8, xmm10
   308                                      ; movsd xmm9, xmm11
   309                                      ; movsd xmm10, xmm12
   310                                  
   311                                  
   312                                      ;Thank you message
   313 00000276 B800000000                  mov rax, 0
   314 0000027B 48BF-                       mov rdi, thank_you_message
   314 0000027D [AB00000000000000] 
   315 00000285 E8(00000000)                call printf
   316                                  
   317                                  
   318                                  
   319                                      ;Block to call current
   320 0000028A B803000000                  mov rax, 3
   321 0000028F F2410F10C2                  movsd xmm0, xmm10
   322 00000294 F2410F10CB                  movsd xmm1, xmm11
   323 00000299 F2410F10D4                  movsd xmm2, xmm12
   324 0000029E E8(00000000)                call current
   325 000002A3 F2440F10F0                  movsd xmm14, xmm0 ;moves value of total current to xmm14
   326                                  
   327                                  
   328                                      ;Back up value in xmm14 before restoring registers
   329 000002A8 6A00                        push qword 0
   330 000002AA F2440F113424                movsd [rsp], xmm14
   331                                  
   332                                  
   333                                  
   334                                      ;Restore the values to non-GPRs
   335 000002B0 B807000000                  mov rax, 7
   336 000002B5 BA00000000                  mov rdx, 0
   337 000002BA 0FAE2C25[00000000]          xrstor [backup_storage_area]
   338                                  
   339                                  
   340 000002C2 F20F100424                  movsd xmm0, [rsp]
   341 000002C7 58                          pop rax
   342                                      
   343                                  
   344                                  
   345                                      ;Restore the GPRs
   346 000002C8 9D                          popf
   347 000002C9 415F                        pop r15
   348 000002CB 415E                        pop r14
   349 000002CD 415D                        pop r13
   350 000002CF 415C                        pop r12
   351 000002D1 415B                        pop r11
   352 000002D3 415A                        pop r10
   353 000002D5 4159                        pop r9
   354 000002D7 4158                        pop r8
   355 000002D9 5E                          pop rsi
   356 000002DA 5F                          pop rdi
   357 000002DB 5A                          pop rdx
   358 000002DC 59                          pop rcx
   359 000002DD 5B                          pop rbx
   360 000002DE 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   361 000002DF C3                          ret
   362                                  ;End of the function electricity.asm ====================================================================
