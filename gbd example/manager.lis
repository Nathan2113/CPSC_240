     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays" - This program will first welcome the user to the program, as well as outputting its developer.     *
     3                                  ;After this initial message, the program will let the user know the directions of the program, which is as follows:         *
     4                                  ;                                                                                                                           *
     5                                  ;"This program will manage your arrays of 64-bit floats                                                                     *
     6                                  ;For the array enter a sequence of 64-bit floats separated by white space.                                                  *
     7                                  ;After the last input press enter followed by Control+D:"                                                                   *
     8                                  ;                                                                                                                           *
     9                                  ;The program will then take in user input, validating each input to make sure they are entering valid float numbers, and    *
    10                                  ;this process is done through the input_array.asm file, using isfloat.asm to validate their inputs. If the user inputs an   *
    11                                  ;invalid input, the program will let them know with the following message:                                                  *
    12                                  ;                                                                                                                           *
    13                                  ;"The last input was invalid and not entered into the array.""                                                              *
    14                                  ;                                                                                                                           *
    15                                  ;Once the array has been fully entered, the program will output the entire array to the screen, which is done in the        *
    16                                  ;output_array.c file using the C language. Once the array has been output, the program will then compute the mean of the    *
    17                                  ;array using compute_mean.asm, and will then use the mean it found to compute the variance using compute_variance.cpp,      *
    18                                  ;which uses C++. Once the variance has been found, the program will output the variance to the screen for the user, and     *
    19                                  ;will then send the variance to main.c, where the program will let the user know that the variance will be kept for         *
    20                                  ;future use, and that a 0 will be sent to the operating system.                                                             *
    21                                  ;                                                                                                                           *
    22                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    23                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    24                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    25                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    26                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    27                                  ;****************************************************************************************************************************
    28                                  
    29                                  
    30                                  
    31                                  
    32                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    33                                  ;Author information
    34                                  ;  Author name: Nathan Warner
    35                                  ;  Author email: nwarner4@csu.fullerton.edu
    36                                  ;
    37                                  ;Program information
    38                                  ;  Program name: Arrays
    39                                  ;  Programming languages: Two modules in C, four modules in x86_64, one module in C++, and one module in bash
    40                                  ;  Date program began: 2024-Mar-3
    41                                  ;  Date of last update: 2024-Mar-7
    42                                  ;  Files in this program: main.c, manager.asm, r.sh, output_array.c, compute_mean.asm, compute_variance.cpp, input_array.asm, isfloat.asm
    43                                  ;  Testing: Alpha testing completed.  All functions are correct.
    44                                  ;  Status: Ready for release to customers
    45                                  ;
    46                                  ;Purpose
    47                                  ;  The program will take in an array of valid floating point numbers from the user, find the mean of the array, 
    48                                  ;       and find the variance, which it will output to the screen and send to main.c
    49                                  ;
    50                                  ;This file:
    51                                  ;  File name: manager.asm
    52                                  ;  Language: X86-64
    53                                  ;  Max page width: 124 columns
    54                                  ;  Assemble (standard): nasm -f elf64 -l manager.lis -o manager.o manager.asm
    55                                  ;  Assemble (debug): nasm -g dwarf -l manager.lis -o manager.o manager.asm
    56                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    57                                  ;  Prototype of this function: double manager();
    58                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    59                                  
    60                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    61                                  ;not have its own place of declaration
    62                                  
    63                                  global manager
    64                                  
    65                                  extern printf
    66                                  
    67                                  
    68                                  float_size equ 60
    69                                  
    70                                  segment .data
    71                                  ;This section (or segment) is for declaring initialized arrays
    72                                  
    73 00000000 0A546869732070726F-     program_desc db 10, "This program will manage your arrays of 64-bit floats", 10, 0
    73 00000009 6772616D2077696C6C-
    73 00000012 206D616E6167652079-
    73 0000001B 6F7572206172726179-
    73 00000024 73206F662036342D62-
    73 0000002D 697420666C6F617473-
    73 00000036 0A00               
    74                                  
    75                                  
    76                                  segment .bss
    77                                  ;This section (or segment) is for declaring empty arrays
    78                                  
    79                                  align 64
    80 00000000 <res 340h>              backup_storage_area resb 832
    81 00000340 <res 60h>               array resq 12 ;Array of 12 qwords, will be used to take in user inputs for floats, as well as computing the mean and variance
    82                                  
    83                                  
    84                                  segment .text
    85                                  
    86                                  manager:
    87                                  
    88                                      ;Back up the GPRs (General Purpose Registers)
    89 00000000 55                          push rbp
    90 00000001 4889E5                      mov rbp, rsp
    91 00000004 53                          push rbx
    92 00000005 51                          push rcx
    93 00000006 52                          push rdx
    94 00000007 57                          push rdi
    95 00000008 56                          push rsi
    96 00000009 4150                        push r8
    97 0000000B 4151                        push r9
    98 0000000D 4152                        push r10
    99 0000000F 4153                        push r11
   100 00000011 4154                        push r12
   101 00000013 4155                        push r13
   102 00000015 4156                        push r14
   103 00000017 4157                        push r15
   104 00000019 9C                          pushf
   105                                  
   106                                      ;Backup the registers other than the GPRs
   107 0000001A B807000000                  mov rax,7
   108 0000001F BA00000000                  mov rdx,0
   109 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   110                                  
   111                                  
   112                                  
   113                                  
   114                                  
   115                                  
   116                                      ;Back up value in xmm15 (variance) before restoring registers
   117 0000002C 6A00                        push qword 0
   118 0000002E F2440F113C24                movsd [rsp], xmm15
   119                                  
   120                                  
   121                                  
   122                                      ;Restore the values to non-GPRs
   123 00000034 B807000000                  mov rax, 7
   124 00000039 BA00000000                  mov rdx, 0
   125 0000003E 0FAE2C25[00000000]          xrstor [backup_storage_area]
   126                                  
   127                                  
   128 00000046 F20F100424                  movsd xmm0, [rsp]
   129 0000004B 58                          pop rax
   130                                      
   131                                  
   132                                  
   133                                      ;Restore the GPRs
   134 0000004C 9D                          popf
   135 0000004D 415F                        pop r15
   136 0000004F 415E                        pop r14
   137 00000051 415D                        pop r13
   138 00000053 415C                        pop r12
   139 00000055 415B                        pop r11
   140 00000057 415A                        pop r10
   141 00000059 4159                        pop r9
   142 0000005B 4158                        pop r8
   143 0000005D 5E                          pop rsi
   144 0000005E 5F                          pop rdi
   145 0000005F 5A                          pop rdx
   146 00000060 59                          pop rcx
   147 00000061 5B                          pop rbx
   148 00000062 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   149 00000063 C3                          ret
   150                                  ;End of the function manager.asm ====================================================================
