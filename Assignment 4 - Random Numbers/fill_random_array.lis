     1                                  ; /***************************************************************************************************************************
     2                                  ; Program name: "Non-deterministic Random Numbers" - This program will welcome the user to the program, then will ask        *
     3                                  ; for their name and title. After welcoming the user, the program will give a description of what it does for the user       *
     4                                  ;                                                                                                                            *
     5                                  ; This program will generate 64-bit IEEE float numbers.                                                                      *
     6                                  ; How many numbers do you want. Today's limit is 100 per customer:                                                           *
     7                                  ; Your numbers have been stored in an array. Here is that array.                                                             *
     8                                  ;                                                                                                                            *
     9                                  ; The program will then take in user input for the size of the array that they want, if the user inputs a number greater     *
    10                                  ; than 100, or a negative number, the program will tell them that they have entered an invalid input, and to try again       *
    11                                  ;                                                                                                                            *
    12                                  ; "Invalid array size...Try again:                                                                                           *
    13                                  ;                                                                                                                            *
    14                                  ; Once the user has input a valid array size, the program lets them know it is generating n random numbers, where n is the   *
    15                                  ; array size the user input above. Once the array has been filled with random numbers, the program will output the entire    *
    16                                  ; array, then it will normalize the array to be between the values 1.0 and 2.0, and will output the entire array again.      *
    17                                  ; After this second array output, the program will then sort the array (using C++ library functions) and will output the     *
    18                                  ; array one last time for the user, this time sorted from least to greatest                                                  *
    19                                  ;                                                                                                                            *
    20                                  ; The program will then say goodbye to the user, and terminate the program                                                   *
    21                                  ;                                                                                                                            *
    22                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    23                                  ; version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    24                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    25                                  ; the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    26                                  ; <https://www.gnu.org/licenses/>.                                                                                           *
    27                                  ; ****************************************************************************************************************************/
    28                                  
    29                                  
    30                                  ; /**********************************************************************************************************************************
    31                                  ; Author information
    32                                  ;   Author name: Nathan Warner
    33                                  ;   Author email: nwarner4@csu.fullerton.edu
    34                                  
    35                                  ; Program information
    36                                  ;   Program name: Non-deterministic Random Numbers
    37                                  ;   Programming languages: One module in C, one module in C++, five modules in x86_64 assembly, and one module in bash
    38                                  ;   Date program began: 2024-Apr-8
    39                                  ;   Date of last update: 2024-Apr-11
    40                                  ;   Files in this program: main.c, sort.cpp, manager.asm, fill_random_array.asm, isnan.asm, show_array.asm, normalize_array.asm, r.sh
    41                                  ;   Testing: Alpha testing completed.  All functions are correct.
    42                                  ;   Status: Ready for release to customers
    43                                  
    44                                  ; Purpose
    45                                  ;   The program will create an array of size n, where n is input by the user, and between 1 and 100, and will create a random number
    46                                  ;     array, will normalize the array between 1.0 and 2.0, and then sort the array
    47                                  
    48                                  ; This file:
    49                                  ;   File name: fill_random_array.asm
    50                                  ;   Language: x86_64 assembly
    51                                  ;   Max page width: 124 columns
    52                                  ;   Assemble (standard): nasm -f elf64 -l fill_random_array.lis -o fill_random_array.o fill_random_array.asm
    53                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    54                                  ;   Prototype of this function: void fill_random_array(double *arr, int size);
    55                                  ; ***********************************************************************************************************************************/
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global fill_random_array
    61                                  
    62                                  extern printf
    63                                  extern isnan
    64                                  
    65                                  float_size equ 60
    66                                  
    67                                  segment .data
    68                                  ;This section (or segment) is for declaring initialized arrays
    69                                  
    70                                  
    71                                  segment .bss
    72                                  ;This section (or segment) is for declaring empty arrays
    73                                  
    74                                  align 64
    75 00000000 <res 340h>              backup_storage_area resb 832
    76                                  
    77                                  segment .text
    78                                  
    79                                  fill_random_array:
    80                                  
    81                                      ;Back up the GPRs (General Purpose Registers)
    82 00000000 55                          push rbp
    83 00000001 4889E5                      mov rbp, rsp
    84 00000004 53                          push rbx
    85 00000005 51                          push rcx
    86 00000006 52                          push rdx
    87 00000007 57                          push rdi
    88 00000008 56                          push rsi
    89 00000009 4150                        push r8
    90 0000000B 4151                        push r9
    91 0000000D 4152                        push r10
    92 0000000F 4153                        push r11
    93 00000011 4154                        push r12
    94 00000013 4155                        push r13
    95 00000015 4156                        push r14
    96 00000017 4157                        push r15
    97 00000019 9C                          pushf
    98                                  
    99                                      ;Backup the registers other than the GPRs
   100 0000001A B807000000                  mov rax,7
   101 0000001F BA00000000                  mov rdx,0
   102 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   103                                  
   104                                  
   105                                  
   106                                      ;Setting up values for input_array execution
   107 0000002C 4989FD                      mov r13, rdi ;r13 is the array
   108 0000002F 4989F6                      mov r14, rsi ;r14 is the max number of values that can be in the array (input from user)
   109 00000032 41BF00000000                mov r15, 0 ;r15 is the current index of the array
   110                                  
   111                                  
   112                                  begin:
   113                                  
   114                                      ;Ends the loop if the current array index is the same as user input
   115 00000038 4D39F7                      cmp r15, r14
   116 0000003B 7424                        je quit_loop
   117                                  
   118 0000003D 4D31E4                      xor r12, r12 ;Initializes r12 to 0
   119                                  
   120                                  
   121                                      ;Random number generator
   122 00000040 490FC7F4                    rdrand r12
   123                                  
   124                                      ;Check if the random number is a nan
   125 00000044 B800000000                  mov rax, 0
   126 00000049 4C89E7                      mov rdi, r12
   127 0000004C E8(00000000)                call isnan
   128 00000051 4883F8FF                    cmp rax, -1
   129 00000055 74E1                        je begin
   130                                      
   131                                  
   132                                      ;copy number into the array
   133 00000057 4F8964FD00                  mov [r13+r15*8], r12 ;r12 is the random number
   134 0000005C 49FFC7                      inc r15
   135                                  
   136 0000005F EBD7                        jmp begin
   137                                  
   138                                  
   139                                  quit_loop: ;No more looping - restore regs, but save r13 (the array)
   140                                  
   141                                      ; Restore the values to non-GPRs
   142 00000061 B807000000                  mov rax, 7
   143 00000066 BA00000000                  mov rdx, 0
   144 0000006B 0FAE2C25[00000000]          xrstor [backup_storage_area]
   145                                  
   146                                  
   147                                      ;Restore the values to non-GPRs
   148 00000073 B807000000                  mov rax, 7
   149 00000078 BA00000000                  mov rdx, 0
   150 0000007D 0FAE2C25[00000000]          xrstor [backup_storage_area]
   151                                      
   152                                  
   153                                      ;Restore the GPRs
   154 00000085 9D                          popf
   155 00000086 415F                        pop r15
   156 00000088 415E                        pop r14
   157 0000008A 415D                        pop r13
   158 0000008C 415C                        pop r12
   159 0000008E 415B                        pop r11
   160 00000090 415A                        pop r10
   161 00000092 4159                        pop r9
   162 00000094 4158                        pop r8
   163 00000096 5E                          pop rsi
   164 00000097 5F                          pop rdi
   165 00000098 5A                          pop rdx
   166 00000099 59                          pop rcx
   167 0000009A 5B                          pop rbx
   168 0000009B 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   169 0000009C C3                          ret
   170                                  ;End of the function fill_random_array.asm ====================================================================
