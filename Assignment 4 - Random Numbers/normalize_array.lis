     1                                  ; /***************************************************************************************************************************
     2                                  ; Program name: "Non-deterministic Random Numbers" - This program will welcome the user to the program, then will ask        *
     3                                  ; for their name and title. After welcoming the user, the program will give a description of what it does for the user       *
     4                                  ;                                                                                                                            *
     5                                  ; This program will generate 64-bit IEEE float numbers.                                                                      *
     6                                  ; How many numbers do you want. Today's limit is 100 per customer:                                                           *
     7                                  ; Your numbers have been stored in an array. Here is that array.                                                             *
     8                                  ;                                                                                                                            *
     9                                  ; The program will then take in user input for the size of the array that they want, if the user inputs a number greater     *
    10                                  ; than 100, or a negative number, the program will tell them that they have entered an invalid input, and to try again       *
    11                                  ;                                                                                                                            *
    12                                  ; "Invalid array size...Try again:                                                                                           *
    13                                  ;                                                                                                                            *
    14                                  ; Once the user has input a valid array size, the program lets them know it is generating n random numbers, where n is the   *
    15                                  ; array size the user input above. Once the array has been filled with random numbers, the program will output the entire    *
    16                                  ; array, then it will normalize the array to be between the values 1.0 and 2.0, and will output the entire array again.      *
    17                                  ; After this second array output, the program will then sort the array (using C++ library functions) and will output the     *
    18                                  ; array one last time for the user, this time sorted from least to greatest                                                  *
    19                                  ;                                                                                                                            *
    20                                  ; The program will then say goodbye to the user, and terminate the program                                                   *
    21                                  ;                                                                                                                            *
    22                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    23                                  ; version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    24                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    25                                  ; the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    26                                  ; <https://www.gnu.org/licenses/>.                                                                                           *
    27                                  ; ****************************************************************************************************************************/
    28                                  
    29                                  
    30                                  ; /**********************************************************************************************************************************
    31                                  ; Author information
    32                                  ;   Author name: Nathan Warner
    33                                  ;   Author email: nwarner4@csu.fullerton.edu
    34                                  
    35                                  ; Program information
    36                                  ;   Program name: Non-deterministic Random Numbers
    37                                  ;   Programming languages: One module in C, one module in C++, five modules in x86_64 assembly, and one module in bash
    38                                  ;   Date program began: 2024-Apr-8
    39                                  ;   Date of last update: 2024-Apr-11
    40                                  ;   Files in this program: main.c, sort.cpp, manager.asm, fill_random_array.asm, isnan.asm, show_array.asm, normalize_array.asm, r.sh
    41                                  ;   Testing: Alpha testing completed.  All functions are correct.
    42                                  ;   Status: Ready for release to customers
    43                                  
    44                                  ; Purpose
    45                                  ;   The program will create an array of size n, where n is input by the user, and between 1 and 100, and will create a random number
    46                                  ;     array, will normalize the array between 1.0 and 2.0, and then sort the array
    47                                  
    48                                  ; This file:
    49                                  ;   File name: normalize_array.asm
    50                                  ;   Language: x86_64 assembly
    51                                  ;   Max page width: 124 columns
    52                                  ;   Assemble (standard): nasm -f elf64 -l normalize_array.lis -o normalize_array.o normalize_array.asm
    53                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    54                                  ;   Prototype of this function: void normalize_array(double *arr, int size);
    55                                  ; ***********************************************************************************************************************************/
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global normalize_array
    61                                  
    62                                  
    63                                  float_size equ 60
    64                                  
    65                                  segment .data
    66                                  ;This section (or segment) is for declaring initialized arrays
    67                                  
    68                                  
    69                                  segment .bss
    70                                  ;This section (or segment) is for declaring empty arrays
    71                                  
    72                                  align 64
    73 00000000 <res 340h>              backup_storage_area resb 832
    74                                  
    75                                  
    76                                  segment .text
    77                                  
    78                                  normalize_array:
    79                                  
    80                                      ;Back up the GPRs (General Purpose Registers)
    81 00000000 55                          push rbp
    82 00000001 4889E5                      mov rbp, rsp
    83 00000004 53                          push rbx
    84 00000005 51                          push rcx
    85 00000006 52                          push rdx
    86 00000007 57                          push rdi
    87 00000008 56                          push rsi
    88 00000009 4150                        push r8
    89 0000000B 4151                        push r9
    90 0000000D 4152                        push r10
    91 0000000F 4153                        push r11
    92 00000011 4154                        push r12
    93 00000013 4155                        push r13
    94 00000015 4156                        push r14
    95 00000017 4157                        push r15
    96 00000019 9C                          pushf
    97                                  
    98                                      ;Backup the registers other than the GPRs
    99 0000001A B807000000                  mov rax,7
   100 0000001F BA00000000                  mov rdx,0
   101 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   102                                  
   103                                  
   104                                  
   105                                  
   106 0000002C 4989FD                      mov r13, rdi ;the array itself
   107 0000002F 4989F6                      mov r14, rsi ;array size
   108 00000032 41BF00000000                mov r15, 0 ;r15 is the current index of the array
   109                                  
   110                                  begin:
   111                                  
   112                                      ;Ends the loop if the current array index is the same as user input
   113 00000038 4D39F7                      cmp r15, r14
   114 0000003B 7424                        je quit
   115                                  
   116 0000003D 4F8B5CFD00                  mov r11, [r13+r15*8] ;Moves the current index into r11
   117 00000042 49C1E30C                    shl r11, 12 ;shifts the current index of the array 12 bits to the left
   118 00000046 49C1EB0C                    shr r11, 12 ;shifts the current index of the array 12 bits to the right
   119 0000004A 48B8000000000000F0-         mov rax, 0x3FF0000000000000 ;Creates an empty number with 3FF at the front
   119 00000053 3F                 
   120 00000054 4901C3                      add r11, rax ;Adds the numbers together so that the index of the array is normalized to 3FF
   121                                  
   122 00000057 4F895CFD00                  mov [r13+r15*8], r11
   123                                  
   124                                  
   125 0000005C 49FFC7                      inc r15
   126 0000005F EBD7                        jmp begin
   127                                  
   128                                  
   129                                  quit:
   130                                  
   131                                      ;Restore the values to non-GPRs
   132 00000061 B807000000                  mov rax, 7
   133 00000066 BA00000000                  mov rdx, 0
   134 0000006B 0FAE2C25[00000000]          xrstor [backup_storage_area]
   135                                  
   136                                  
   137                                      ;Restore the GPRs
   138 00000073 9D                          popf
   139 00000074 415F                        pop r15
   140 00000076 415E                        pop r14
   141 00000078 415D                        pop r13
   142 0000007A 415C                        pop r12
   143 0000007C 415B                        pop r11
   144 0000007E 415A                        pop r10
   145 00000080 4159                        pop r9
   146 00000082 4158                        pop r8
   147 00000084 5E                          pop rsi
   148 00000085 5F                          pop rdi
   149 00000086 5A                          pop rdx
   150 00000087 59                          pop rcx
   151 00000088 5B                          pop rbx
   152 00000089 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   153 0000008A C3                          ret
   154                                  ;End of the function normalize_array.asm ====================================================================
