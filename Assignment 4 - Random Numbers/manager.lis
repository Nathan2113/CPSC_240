     1                                  ; /***************************************************************************************************************************
     2                                  ; Program name: "Non-deterministic Random Numbers" - This program will welcome the user to the program, then will ask        *
     3                                  ; for their name and title. After welcoming the user, the program will give a description of what it does for the user       *
     4                                  ;                                                                                                                            *
     5                                  ; This program will generate 64-bit IEEE float numbers.                                                                      *
     6                                  ; How many numbers do you want. Today's limit is 100 per customer:                                                           *
     7                                  ; Your numbers have been stored in an array. Here is that array.                                                             *
     8                                  ;                                                                                                                            *
     9                                  ; The program will then take in user input for the size of the array that they want, if the user inputs a number greater     *
    10                                  ; than 100, or a negative number, the program will tell them that they have entered an invalid input, and to try again       *
    11                                  ;                                                                                                                            *
    12                                  ; "Invalid array size...Try again:                                                                                           *
    13                                  ;                                                                                                                            *
    14                                  ; Once the user has input a valid array size, the program lets them know it is generating n random numbers, where n is the   *
    15                                  ; array size the user input above. Once the array has been filled with random numbers, the program will output the entire    *
    16                                  ; array, then it will normalize the array to be between the values 1.0 and 2.0, and will output the entire array again.      *
    17                                  ; After this second array output, the program will then sort the array (using C++ library functions) and will output the     *
    18                                  ; array one last time for the user, this time sorted from least to greatest                                                  *
    19                                  ;                                                                                                                            *
    20                                  ; The program will then say goodbye to the user, and terminate the program                                                   *
    21                                  ;                                                                                                                            *
    22                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    23                                  ; version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    24                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    25                                  ; the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    26                                  ; <https://www.gnu.org/licenses/>.                                                                                           *
    27                                  ; ****************************************************************************************************************************/
    28                                  
    29                                  
    30                                  ; /**********************************************************************************************************************************
    31                                  ; Author information
    32                                  ;   Author name: Nathan Warner
    33                                  ;   Author email: nwarner4@csu.fullerton.edu
    34                                  
    35                                  ; Program information
    36                                  ;   Program name: Non-deterministic Random Numbers
    37                                  ;   Programming languages: One module in C, one module in C++, five modules in x86_64 assembly, and one module in bash
    38                                  ;   Date program began: 2024-Apr-8
    39                                  ;   Date of last update: 2024-Apr-11
    40                                  ;   Files in this program: main.c, sort.cpp, manager.asm, fill_random_array.asm, isnan.asm, show_array.asm, normalize_array.asm, r.sh
    41                                  ;   Testing: Alpha testing completed.  All functions are correct.
    42                                  ;   Status: Ready for release to customers
    43                                  
    44                                  ; Purpose
    45                                  ;   The program will create an array of size n, where n is input by the user, and between 1 and 100, and will create a random number
    46                                  ;     array, will normalize the array between 1.0 and 2.0, and then sort the array
    47                                  
    48                                  ; This file:
    49                                  ;   File name: manager.asm
    50                                  ;   Language: x86_64 assembly
    51                                  ;   Max page width: 124 columns
    52                                  ;   Assemble (standard): nasm -f elf64 -l manager.lis -o manager.o manager.asm
    53                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    54                                  ;   Prototype of this function: char* manager();
    55                                  ; ***********************************************************************************************************************************/
    56                                  
    57                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    58                                  ;not have its own place of declaration
    59                                  
    60                                  global manager
    61                                  
    62                                  extern printf
    63                                  extern stdin
    64                                  extern scanf
    65                                  extern fgets
    66                                  extern strlen
    67                                  extern isdigit
    68                                  extern fill_random_array
    69                                  extern show_array
    70                                  extern normalize_array
    71                                  extern sort
    72                                  
    73                                  
    74                                  name_string_size equ 48
    75                                  title_string_size equ 48
    76                                  
    77                                  
    78                                  segment .data
    79                                  ;This section (or segment) is for declaring initialized arrays
    80                                  
    81 00000000 0A506C656173652065-     name_prompt db 10, "Please enter your name: ", 0
    81 00000009 6E74657220796F7572-
    81 00000012 206E616D653A2000   
    82 0000001A 506C6561736520656E-     title_prompt db "Please enter your title (Mr, Ms, Sergeant, Chief, Project Leader, etc): ", 0
    82 00000023 74657220796F757220-
    82 0000002C 7469746C6520284D72-
    82 00000035 2C204D732C20536572-
    82 0000003E 6765616E742C204368-
    82 00000047 6965662C2050726F6A-
    82 00000050 656374204C65616465-
    82 00000059 722C20657463293A20-
    82 00000062 00                 
    83 00000063 4E69636520746F206D-     meeting_msg db "Nice to meet you %s %s", 10, 0
    83 0000006C 65657420796F752025-
    83 00000075 732025730A00       
    84 0000007B 0A546869732070726F-     program_desc db 10, "This program will generate 64-bit IEEE float numbers.", 10, 0
    84 00000084 6772616D2077696C6C-
    84 0000008D 2067656E6572617465-
    84 00000096 2036342D6269742049-
    84 0000009F 45454520666C6F6174-
    84 000000A8 206E756D626572732E-
    84 000000B1 0A00               
    85 000000B3 486F77206D616E7920-     array_size_prompt db "How many numbers do you want? Today's limit is 100 per customer: ", 0
    85 000000BC 6E756D626572732064-
    85 000000C5 6F20796F752077616E-
    85 000000CE 743F20546F64617927-
    85 000000D7 73206C696D69742069-
    85 000000E0 732031303020706572-
    85 000000E9 20637573746F6D6572-
    85 000000F2 3A2000             
    86 000000F5 596F7572206E756D62-     values_stored db "Your numbers have been stored in an array. Here is that array.", 10, 10, 0
    86 000000FE 657273206861766520-
    86 00000107 6265656E2073746F72-
    86 00000110 656420696E20616E20-
    86 00000119 61727261792E204865-
    86 00000122 726520697320746861-
    86 0000012B 742061727261792E0A-
    86 00000134 0A00               
    87 00000136 496E76616C69642061-     invalid_arr_size db "Invalid array size...Try again: ", 0
    87 0000013F 727261792073697A65-
    87 00000148 2E2E2E547279206167-
    87 00000151 61696E3A2000       
    88 00000157 0A5468652061727261-     normalize_array_output db 10, "The array will now be normalized to the range of 1.0 to 2.0. Here is the normalized array", 10, 10, 0
    88 00000160 792077696C6C206E6F-
    88 00000169 77206265206E6F726D-
    88 00000172 616C697A656420746F-
    88 0000017B 207468652072616E67-
    88 00000184 65206F6620312E3020-
    88 0000018D 746F20322E302E2048-
    88 00000196 657265206973207468-
    88 0000019F 65206E6F726D616C69-
    88 000001A8 7A6564206172726179-
    88 000001B1 0A0A00             
    89 000001B4 0A5468652061727261-     sort_array_output db 10, "The array will now be sorted", 10, 10, 0
    89 000001BD 792077696C6C206E6F-
    89 000001C6 7720626520736F7274-
    89 000001CF 65640A0A00         
    90 000001D4 0A476F6F6420627965-     goodbye_msg db 10, "Good bye %s. You are welcome any time.", 10, 0
    90 000001DD 2025732E20596F7520-
    90 000001E6 6172652077656C636F-
    90 000001EF 6D6520616E79207469-
    90 000001F8 6D652E0A00         
    91 000001FD 256C6400                format_int db "%ld", 0
    92                                  
    93 00000201 0A546865206E756D62-     test_output db 10, "The number input is %lu", 10, 0
    93 0000020A 657220696E70757420-
    93 00000213 697320256C750A00   
    94                                  
    95                                  
    96                                  segment .bss
    97                                  ;This section (or segment) is for declaring empty arrays
    98                                  
    99                                  align 64
   100 00000000 <res 340h>              backup_storage_area resb 832
   101 00000340 <res 320h>              array resq 100 ;Array of 100 qwords
   102                                  
   103 00000660 <res 30h>               user_name resb name_string_size
   104 00000690 <res 30h>               user_title resb title_string_size
   105                                  
   106                                  segment .text
   107                                  
   108                                  manager:
   109                                  
   110                                      ;Back up the GPRs (General Purpose Registers)
   111 00000000 55                          push rbp
   112 00000001 4889E5                      mov rbp, rsp
   113 00000004 53                          push rbx
   114 00000005 51                          push rcx
   115 00000006 52                          push rdx
   116 00000007 57                          push rdi
   117 00000008 56                          push rsi
   118 00000009 4150                        push r8
   119 0000000B 4151                        push r9
   120 0000000D 4152                        push r10
   121 0000000F 4153                        push r11
   122 00000011 4154                        push r12
   123 00000013 4155                        push r13
   124 00000015 4156                        push r14
   125 00000017 4157                        push r15
   126 00000019 9C                          pushf
   127                                  
   128                                      ;Backup the registers other than the GPRs
   129 0000001A B807000000                  mov rax,7
   130 0000001F BA00000000                  mov rdx,0
   131 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   132                                  
   133                                  
   134                                  
   135                                      ;Output prompt for first and last name
   136 0000002C B800000000                  mov rax, 0
   137 00000031 48BF-                       mov rdi, name_prompt ;"Please enter your name: "
   137 00000033 [0000000000000000] 
   138 0000003B E8(00000000)                call printf
   139                                  
   140                                      ;Input user names
   141 00000040 B800000000                  mov rax, 0
   142 00000045 48BF-                       mov rdi, user_name
   142 00000047 [6006000000000000] 
   143 0000004F BE30000000                  mov rsi, name_string_size ;48
   144 00000054 488B1425[00000000]          mov rdx, [stdin]
   145 0000005C E8(00000000)                call fgets
   146                                  
   147                                      ;Remove newline
   148 00000061 B800000000                  mov rax, 0
   149 00000066 48BF-                       mov rdi, user_name
   149 00000068 [6006000000000000] 
   150 00000070 E8(00000000)                call strlen
   151 00000075 C680[5F060000]00            mov [user_name+rax-1], byte 0
   152                                  
   153                                      ;Ask user for their title
   154 0000007C B800000000                  mov rax, 0
   155 00000081 48BF-                       mov rdi, title_prompt ;"Please enter your title (Sergeant, Chief, CEO, President, Teacher, etc): "
   155 00000083 [1A00000000000000] 
   156 0000008B E8(00000000)                call printf
   157                                  
   158                                      ;Input user title
   159 00000090 B800000000                  mov rax, 0
   160 00000095 48BF-                       mov rdi, user_title
   160 00000097 [9006000000000000] 
   161 0000009F BE30000000                  mov rsi, title_string_size ;48
   162 000000A4 488B1425[00000000]          mov rdx, [stdin]
   163 000000AC E8(00000000)                call fgets
   164                                  
   165                                      ;Remove newline
   166 000000B1 B800000000                  mov rax, 0
   167 000000B6 48BF-                       mov rdi, user_title
   167 000000B8 [9006000000000000] 
   168 000000C0 E8(00000000)                call strlen
   169 000000C5 C680[8F060000]00            mov [user_title+rax-1], byte 0
   170                                  
   171                                  
   172                                      ;Say good morning to the user
   173 000000CC B800000000                  mov rax, 0
   174 000000D1 48BF-                       mov rdi, meeting_msg ;"Nice to meet you %s %s"
   174 000000D3 [6300000000000000] 
   175 000000DB 48BE-                       mov rsi, user_title
   175 000000DD [9006000000000000] 
   176 000000E5 48BA-                       mov rdx, user_name
   176 000000E7 [6006000000000000] 
   177 000000EF E8(00000000)                call printf
   178                                  
   179                                  
   180                                      ;Output the program description for the user
   181 000000F4 B800000000                  mov rax, 0
   182 000000F9 48BF-                       mov rdi, program_desc ;"This program will generate 64-bit IEEE float numbers."
   182 000000FB [7B00000000000000] 
   183 00000103 E8(00000000)                call printf
   184                                  
   185                                      
   186                                      ;Ask the user how many numbers they want to store into the array
   187 00000108 B800000000                  mov rax, 0
   188 0000010D 48BF-                       mov rdi, array_size_prompt ;"How many numbers do you want? Today's limit is 100 per customer: "
   188 0000010F [B300000000000000] 
   189 00000117 E8(00000000)                call printf
   190                                  
   191                                      ;Get user input for array size
   192 0000011C B800000000                  mov rax, 0
   193 00000121 48BF-                       mov rdi, format_int ;"%ld"
   193 00000123 [FD01000000000000] 
   194 0000012B 6AF7                        push qword -9 ;rsp points to -9
   195 0000012D 6AF7                        push qword -9 ;rsp points to -9
   196 0000012F 4889E6                      mov rsi, rsp
   197 00000132 E8(00000000)                call scanf
   198 00000137 415F                        pop r15
   199 00000139 4158                        pop r8
   200                                  
   201                                  
   202                                  
   203                                      ;Check if the input is in the range
   204 0000013B 4983FF64                    cmp r15, 100
   205 0000013F 7F08                        jg bad_array_size
   206                                  
   207 00000141 4983FF01                    cmp r15, 1
   208 00000145 7C02                        jl bad_array_size
   209                                  
   210 00000147 EB41                        jmp array_size_exit
   211                                  
   212                                  ;If the array size entered by the user is not valid, the program jumps here, which reprompts them for a valid input
   213                                  bad_array_size:
   214 00000149 B800000000                  mov rax, 0
   215 0000014E 48BF-                       mov rdi, invalid_arr_size
   215 00000150 [3601000000000000] 
   216 00000158 E8(00000000)                call printf
   217                                  
   218                                  
   219                                      ;Get user input for array size
   220 0000015D B800000000                  mov rax, 0
   221 00000162 48BF-                       mov rdi, format_int ;"%ld"
   221 00000164 [FD01000000000000] 
   222 0000016C 6AF7                        push qword -9 ;rsp points to -9
   223 0000016E 6AF7                        push qword -9 ;rsp points to -9
   224 00000170 4889E6                      mov rsi, rsp
   225 00000173 E8(00000000)                call scanf
   226 00000178 415F                        pop r15
   227 0000017A 4158                        pop r8
   228                                  
   229 0000017C 4983FF64                    cmp r15, 100
   230 00000180 7FC7                        jg bad_array_size
   231                                  
   232 00000182 4983FF01                    cmp r15, 1
   233 00000186 7CC1                        jl bad_array_size
   234                                  
   235 00000188 EB00                        jmp array_size_exit
   236                                  
   237                                  
   238                                  array_size_exit:
   239                                  
   240                                      ;Calling fill_random_array
   241 0000018A B800000000                  mov rax, 0
   242 0000018F 48BF-                       mov rdi, array
   242 00000191 [4003000000000000] 
   243 00000199 4C89FE                      mov rsi, r15 ;array size
   244 0000019C E8(00000000)                call fill_random_array
   245                                  
   246                                  
   247                                      ;Output that the array size has been stored
   248 000001A1 B800000000                  mov rax, 0
   249 000001A6 48BF-                       mov rdi, values_stored ;"Your numbers have been stored in an array. Here is that array."
   249 000001A8 [F500000000000000] 
   250 000001B0 E8(00000000)                call printf
   251                                  
   252                                  
   253                                      ;Calling show array, which outputs the entire array to the screen in hex and scientific format
   254 000001B5 B800000000                  mov rax, 0
   255 000001BA 48BF-                       mov rdi, array
   255 000001BC [4003000000000000] 
   256 000001C4 4C89FE                      mov rsi, r15 ;array size
   257 000001C7 E8(00000000)                call show_array
   258                                  
   259                                  
   260                                      ;Output to let the user know the array will now be normalized
   261 000001CC B800000000                  mov rax, 0
   262 000001D1 48BF-                       mov rdi, normalize_array_output ;"The array will now be normalized to the range of 1.0 to 2.0. Here is the normalized array"
   262 000001D3 [5701000000000000] 
   263 000001DB E8(00000000)                call printf
   264                                  
   265                                      ;Calling normalize_array
   266 000001E0 B800000000                  mov rax, 0
   267 000001E5 48BF-                       mov rdi, array
   267 000001E7 [4003000000000000] 
   268 000001EF 4C89FE                      mov rsi, r15 ;array size
   269 000001F2 E8(00000000)                call normalize_array
   270                                  
   271                                      ;Calling show array, which outputs the entire array to the screen in hex and scientific format
   272 000001F7 B800000000                  mov rax, 0
   273 000001FC 48BF-                       mov rdi, array
   273 000001FE [4003000000000000] 
   274 00000206 4C89FE                      mov rsi, r15 ;array size
   275 00000209 E8(00000000)                call show_array
   276                                  
   277                                  
   278                                      ;Output to let the user know the array is being sorted
   279 0000020E B800000000                  mov rax, 0
   280 00000213 48BF-                       mov rdi, sort_array_output ;"The array will now be sorted"
   280 00000215 [B401000000000000] 
   281 0000021D E8(00000000)                call printf
   282                                  
   283                                      ;Calling sort_array
   284 00000222 B800000000                  mov rax, 0
   285 00000227 48BF-                       mov rdi, array
   285 00000229 [4003000000000000] 
   286 00000231 4C89FE                      mov rsi, r15 ;array size
   287 00000234 E8(00000000)                call sort
   288                                  
   289                                  
   290                                      ;Calling show array, which outputs the entire array to the screen in hex and scientific format
   291 00000239 B800000000                  mov rax, 0
   292 0000023E 48BF-                       mov rdi, array
   292 00000240 [4003000000000000] 
   293 00000248 4C89FE                      mov rsi, r15 ;array size
   294 0000024B E8(00000000)                call show_array
   295                                  
   296                                  
   297                                      ;Output goodbye message
   298 00000250 B800000000                  mov rax, 0
   299 00000255 48BF-                       mov rdi, goodbye_msg ;"Good bye %s. You are welcome any time."
   299 00000257 [D401000000000000] 
   300 0000025F 48BE-                       mov rsi, user_title
   300 00000261 [9006000000000000] 
   301 00000269 E8(00000000)                call printf
   302                                  
   303                                  
   304                                      ;Restore the values to non-GPRs
   305 0000026E B807000000                  mov rax, 7
   306 00000273 BA00000000                  mov rdx, 0
   307 00000278 0FAE2C25[00000000]          xrstor [backup_storage_area]
   308                                  
   309 00000280 48B8-                       mov rax, user_name
   309 00000282 [6006000000000000] 
   310                                  
   311                                      ;Restore the GPRs
   312 0000028A 9D                          popf
   313 0000028B 415F                        pop r15
   314 0000028D 415E                        pop r14
   315 0000028F 415D                        pop r13
   316 00000291 415C                        pop r12
   317 00000293 415B                        pop r11
   318 00000295 415A                        pop r10
   319 00000297 4159                        pop r9
   320 00000299 4158                        pop r8
   321 0000029B 5E                          pop rsi
   322 0000029C 5F                          pop rdi
   323 0000029D 5A                          pop rdx
   324 0000029E 59                          pop rcx
   325 0000029F 5B                          pop rbx
   326 000002A0 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   327 000002A1 C3                          ret
   328                                  ;End of the function manager.asm ====================================================================
