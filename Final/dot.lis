     1                                  ; Nathan Warner
     2                                  ; nwarner4@csu.fullerton.edu
     3                                  ; CPSC 240-3
     4                                  ; May 13, 2024
     5                                  
     6                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
     7                                  ;not have its own place of declaration
     8                                  
     9                                  global dot
    10                                  
    11                                  extern printf
    12                                  extern isfloat
    13                                  extern scanf
    14                                  extern atof
    15                                  extern fgets
    16                                  extern stdin
    17                                  extern strlen
    18                                  
    19                                  
    20                                  
    21                                  float_size equ 60
    22                                  true equ -1
    23                                  false equ 0
    24                                  
    25                                  segment .data
    26                                  ;This section (or segment) is for declaring initialized arrays
    27                                  
    28 00000000 0A506C656173652065-     first_input db 10, "Please enter the first number of the first vector: ", 0
    28 00000009 6E7465722074686520-
    28 00000012 6669727374206E756D-
    28 0000001B 626572206F66207468-
    28 00000024 652066697273742076-
    28 0000002D 6563746F723A2000   
    29 00000035 506C6561736520656E-     second_input db "Please enter the second number of the first vector: ", 0
    29 0000003E 746572207468652073-
    29 00000047 65636F6E64206E756D-
    29 00000050 626572206F66207468-
    29 00000059 652066697273742076-
    29 00000062 6563746F723A2000   
    30 0000006A 506C6561736520656E-     third_input db "Please enter the third number of the second vector: ", 0
    30 00000073 746572207468652074-
    30 0000007C 68697264206E756D62-
    30 00000085 6572206F6620746865-
    30 0000008E 207365636F6E642076-
    30 00000097 6563746F723A2000   
    31 0000009F 506C6561736520656E-     fourth_input db "Please enter the fourth number of the second vector: ", 0
    31 000000A8 746572207468652066-
    31 000000B1 6F75727468206E756D-
    31 000000BA 626572206F66207468-
    31 000000C3 65207365636F6E6420-
    31 000000CC 766563746F723A2000 
    32 000000D5 5468616E6B20796F75-     thank_you_msg db "Thank you.", 10, 0
    32 000000DE 2E0A00             
    33 000000E1 0A54686520646F7420-     dot_product db 10, "The dot product is %1.1lf", 10, 0
    33 000000EA 70726F647563742069-
    33 000000F3 732025312E316C660A-
    33 000000FC 00                 
    34 000000FD 456E6A6F7920796F75-     goobye_msg db "Enjoy your dot product.", 10, 0
    34 00000106 7220646F742070726F-
    34 0000010F 647563742E0A00     
    35 00000116 256C6600                format db "%lf", 0
    36 0000011A 257300                  string_format db "%s", 0
    37 0000011D 546865206E756D6265-     invalid db "The number input is invalid...Please try again: ", 0
    37 00000126 7220696E7075742069-
    37 0000012F 7320696E76616C6964-
    37 00000138 2E2E2E506C65617365-
    37 00000141 207472792061676169-
    37 0000014A 6E3A2000           
    38                                  ; input_format db "%s %s", 0
    39                                  
    40 0000014E 14                      buffer db 20 ; buffer to store the input
    41                                  
    42 0000014F 0000000000000000        num1 dq 0
    43 00000157 0000000000000000        num2 dq 0
    44                                  
    45                                  
    46                                  segment .bss
    47                                  ;This section (or segment) is for declaring empty arrays
    48                                  
    49                                  align 64
    50 00000000 <res 340h>              backup_storage_area resb 832
    51 00000340 <res 10h>               array_1 resq 2; array of 2 qwords
    52                                  
    53                                  
    54                                  segment .text
    55                                  
    56                                  dot:
    57                                  
    58                                      ;Back up the GPRs (General Purpose Registers)
    59 00000000 55                          push rbp
    60 00000001 4889E5                      mov rbp, rsp
    61 00000004 53                          push rbx
    62 00000005 51                          push rcx
    63 00000006 52                          push rdx
    64 00000007 57                          push rdi
    65 00000008 56                          push rsi
    66 00000009 4150                        push r8
    67 0000000B 4151                        push r9
    68 0000000D 4152                        push r10
    69 0000000F 4153                        push r11
    70 00000011 4154                        push r12
    71 00000013 4155                        push r13
    72 00000015 4156                        push r14
    73 00000017 4157                        push r15
    74 00000019 9C                          pushf
    75                                  
    76                                      ;Backup the registers other than the GPRs
    77 0000001A B807000000                  mov rax,7
    78 0000001F BA00000000                  mov rdx,0
    79 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
    80                                  
    81                                  
    82                                  get_first_vector:
    83                                      ;Output first vector prompt
    84 0000002C B800000000                  mov rax, 0
    85 00000031 48BF-                       mov rdi, first_input
    85 00000033 [0000000000000000] 
    86 0000003B E8(00000000)                call printf
    87                                  
    88                                  
    89                                      ;Get user input for the first vector
    90 00000040 B800000000                  mov rax, 0
    91 00000045 4881EC00100000              sub rsp, 4096
    92 0000004C 4889E7                      mov rdi, rsp
    93 0000004F BE00100000                  mov rsi, 4096
    94 00000054 488B1425[00000000]          mov rdx, [stdin]
    95 0000005C E8(00000000)                call fgets
    96                                  
    97                                      ;Remove newline
    98 00000061 B800000000                  mov rax, 0
    99 00000066 4889E7                      mov rdi, rsp
   100 00000069 E8(00000000)                call strlen
   101 0000006E C64404FF00                  mov [rsp + rax - 1], byte 0
   102                                  
   103                                  
   104                                      ;Check if input is a float
   105 00000073 B800000000                  mov rax, 0
   106 00000078 4889E7                      mov rdi, rsp
   107 0000007B E8(00000000)                call isfloat
   108 00000080 4883F800                    cmp rax, false
   109 00000084 741B                        je bad_input
   110                                  
   111                                      ;Convert the input from string to float
   112 00000086 B800000000                  mov rax, 0
   113 0000008B 4889E7                      mov rdi, rsp
   114 0000008E E8(00000000)                call atof
   115 00000093 F2440F10E0                  movsd xmm12, xmm0
   116                                  
   117                                      ;Fixes the stack
   118 00000098 4881C400100000              add rsp, 4096
   119                                  
   120 0000009F EB7A                        jmp exit
   121                                  
   122                                  
   123                                  bad_input:
   124 000000A1 4881C400100000              add rsp, 4096
   125                                  
   126                                      ;Tell the user their input is invalid and have them enter another input
   127 000000A8 B800000000                  mov rax, 0
   128 000000AD 48BF-                       mov rdi, invalid
   128 000000AF [1D01000000000000] 
   129 000000B7 E8(00000000)                call printf
   130                                  
   131                                      ;Gets user input (for either angle or side)
   132 000000BC B800000000                  mov rax, 0
   133 000000C1 4881EC00100000              sub rsp, 4096
   134 000000C8 4889E7                      mov rdi, rsp
   135 000000CB BE00100000                  mov rsi, 4096
   136 000000D0 488B1425[00000000]          mov rdx, [stdin]
   137 000000D8 E8(00000000)                call fgets
   138                                  
   139                                      ;Remove newline
   140 000000DD B800000000                  mov rax, 0
   141 000000E2 4889E7                      mov rdi, rsp
   142 000000E5 E8(00000000)                call strlen
   143 000000EA C64404FF00                  mov [rsp + rax - 1], byte 0
   144                                  
   145                                  
   146                                      ;Check if input is a float
   147 000000EF B800000000                  mov rax, 0
   148 000000F4 4889E7                      mov rdi, rsp
   149 000000F7 E8(00000000)                call isfloat
   150 000000FC 4883F800                    cmp rax, false
   151 00000100 749F                        je bad_input
   152                                      
   153                                      ;Convert the input from string to float
   154 00000102 B800000000                  mov rax, 0
   155 00000107 4889E7                      mov rdi, rsp
   156 0000010A E8(00000000)                call atof
   157 0000010F F2440F10E0                  movsd xmm12, xmm0
   158                                  
   159                                      ;Fixes stack
   160 00000114 4881C400100000              add rsp, 4096
   161                                  
   162                                  exit:
   163                                  
   164                                      ;Prompt for second number of first vector
   165 0000011B B800000000                  mov rax, 0
   166 00000120 48BF-                       mov rdi, second_input
   166 00000122 [3500000000000000] 
   167 0000012A E8(00000000)                call printf
   168                                  
   169                                      ;Gets user input for second number of first vector
   170 0000012F B800000000                  mov rax, 0
   171 00000134 4881EC00100000              sub rsp, 4096
   172 0000013B 4889E7                      mov rdi, rsp
   173 0000013E BE00100000                  mov rsi, 4096
   174 00000143 488B1425[00000000]          mov rdx, [stdin]
   175 0000014B E8(00000000)                call fgets
   176                                  
   177                                      ;Remove newline
   178 00000150 B800000000                  mov rax, 0
   179 00000155 4889E7                      mov rdi, rsp
   180 00000158 E8(00000000)                call strlen
   181 0000015D C64404FF00                  mov [rsp + rax - 1], byte 0
   182                                  
   183                                      ;Check if input is a float
   184 00000162 B800000000                  mov rax, 0
   185 00000167 4889E7                      mov rdi, rsp
   186 0000016A E8(00000000)                call isfloat
   187 0000016F 4883F800                    cmp rax, false
   188 00000173 0F8428FFFFFF                je bad_input
   189                                  
   190                                      ;Convert the input from string to float
   191 00000179 B800000000                  mov rax, 0
   192 0000017E 4889E7                      mov rdi, rsp
   193 00000181 E8(00000000)                call atof
   194 00000186 F2440F10E8                  movsd xmm13, xmm0
   195                                  
   196                                  
   197                                      ;Fixes the stack
   198 0000018B 4881C400100000              add rsp, 4096
   199                                  
   200                                  
   201                                  
   202                                  
   203                                      ;Prompt for first number of second vector
   204 00000192 B800000000                  mov rax, 0
   205 00000197 48BF-                       mov rdi, third_input
   205 00000199 [6A00000000000000] 
   206 000001A1 E8(00000000)                call printf
   207                                  
   208                                      ;Gets user input for first number of second vector
   209 000001A6 B800000000                  mov rax, 0
   210 000001AB 4881EC00100000              sub rsp, 4096
   211 000001B2 4889E7                      mov rdi, rsp
   212 000001B5 BE00100000                  mov rsi, 4096
   213 000001BA 488B1425[00000000]          mov rdx, [stdin]
   214 000001C2 E8(00000000)                call fgets
   215                                  
   216                                      ;Remove newline
   217 000001C7 B800000000                  mov rax, 0
   218 000001CC 4889E7                      mov rdi, rsp
   219 000001CF E8(00000000)                call strlen
   220 000001D4 C64404FF00                  mov [rsp + rax - 1], byte 0
   221                                  
   222                                      ;Check if input is a float
   223 000001D9 B800000000                  mov rax, 0
   224 000001DE 4889E7                      mov rdi, rsp
   225 000001E1 E8(00000000)                call isfloat
   226 000001E6 4883F800                    cmp rax, false
   227 000001EA 0F84B1FEFFFF                je bad_input
   228                                  
   229                                      ;Convert the input from string to float
   230 000001F0 B800000000                  mov rax, 0
   231 000001F5 4889E7                      mov rdi, rsp
   232 000001F8 E8(00000000)                call atof
   233 000001FD F2440F10F0                  movsd xmm14, xmm0
   234                                  
   235                                  
   236                                      ;Fixes the stack
   237 00000202 4881C400100000              add rsp, 4096
   238                                  
   239                                  
   240                                  
   241                                  
   242                                      ;Prompt for second number of second vector
   243 00000209 B800000000                  mov rax, 0
   244 0000020E 48BF-                       mov rdi, fourth_input
   244 00000210 [9F00000000000000] 
   245 00000218 E8(00000000)                call printf
   246                                  
   247                                      ;Gets user input for second number of second vector
   248 0000021D B800000000                  mov rax, 0
   249 00000222 4881EC00100000              sub rsp, 4096
   250 00000229 4889E7                      mov rdi, rsp
   251 0000022C BE00100000                  mov rsi, 4096
   252 00000231 488B1425[00000000]          mov rdx, [stdin]
   253 00000239 E8(00000000)                call fgets
   254                                  
   255                                      ;Remove newline
   256 0000023E B800000000                  mov rax, 0
   257 00000243 4889E7                      mov rdi, rsp
   258 00000246 E8(00000000)                call strlen
   259 0000024B C64404FF00                  mov [rsp + rax - 1], byte 0
   260                                  
   261                                      ;Check if input is a float
   262 00000250 B800000000                  mov rax, 0
   263 00000255 4889E7                      mov rdi, rsp
   264 00000258 E8(00000000)                call isfloat
   265 0000025D 4883F800                    cmp rax, false
   266 00000261 0F843AFEFFFF                je bad_input
   267                                  
   268                                      ;Convert the input from string to float
   269 00000267 B800000000                  mov rax, 0
   270 0000026C 4889E7                      mov rdi, rsp
   271 0000026F E8(00000000)                call atof
   272 00000274 F2440F10F8                  movsd xmm15, xmm0
   273                                  
   274                                  
   275                                      ;Fixes the stack
   276 00000279 4881C400100000              add rsp, 4096
   277                                  
   278                                      
   279                                      ;Output thank you message
   280 00000280 B800000000                  mov rax, 0
   281 00000285 48BF-                       mov rdi, thank_you_msg
   281 00000287 [D500000000000000] 
   282 0000028F E8(00000000)                call printf
   283                                  
   284                                  
   285                                      ;Now computing the dot product
   286 00000294 F2450F59E6                  mulsd xmm12, xmm14
   287 00000299 F2450F59EF                  mulsd xmm13, xmm15
   288 0000029E F2450F58E5                  addsd xmm12, xmm13
   289                                  
   290                                  
   291                                      ;Output the dot product
   292 000002A3 B801000000                  mov rax, 1
   293 000002A8 48BF-                       mov rdi, dot_product
   293 000002AA [E100000000000000] 
   294 000002B2 48BE-                       mov rsi, format
   294 000002B4 [1601000000000000] 
   295 000002BC F2410F10C4                  movsd xmm0, xmm12
   296 000002C1 E8(00000000)                call printf
   297                                  
   298                                      ;Output goodbye message
   299 000002C6 B800000000                  mov rax, 0
   300 000002CB 48BF-                       mov rdi, goobye_msg
   300 000002CD [FD00000000000000] 
   301 000002D5 E8(00000000)                call printf
   302                                  
   303                                  
   304                                      ;Back up value in xmm12 before restoring registers
   305 000002DA 6A00                        push qword 0
   306 000002DC F2440F112424                movsd [rsp], xmm12
   307                                  
   308                                  
   309                                  
   310                                      ;Restore the values to non-GPRs
   311 000002E2 B807000000                  mov rax, 7
   312 000002E7 BA00000000                  mov rdx, 0
   313 000002EC 0FAE2C25[00000000]          xrstor [backup_storage_area]
   314                                  
   315                                  
   316 000002F4 F20F100424                  movsd xmm0, [rsp]
   317 000002F9 58                          pop rax
   318                                      
   319                                  
   320                                  
   321                                      ;Restore the GPRs
   322 000002FA 9D                          popf
   323 000002FB 415F                        pop r15
   324 000002FD 415E                        pop r14
   325 000002FF 415D                        pop r13
   326 00000301 415C                        pop r12
   327 00000303 415B                        pop r11
   328 00000305 415A                        pop r10
   329 00000307 4159                        pop r9
   330 00000309 4158                        pop r8
   331 0000030B 5E                          pop rsi
   332 0000030C 5F                          pop rdi
   333 0000030D 5A                          pop rdx
   334 0000030E 59                          pop rcx
   335 0000030F 5B                          pop rbx
   336 00000310 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   337 00000311 C3                          ret
   338                                  ;End of the function dot.asm ====================================================================
