     1                                  ;/****************************************************************************************************************************
     2                                  ;Program name: "Areas of Triangles" - This program will prompt the user for the lengths of 2 sides of a triangle and the 
     3                                  ;size of the angle between them. All I/O in this program will be handled in pure assembly using syscalls. The conversions
     4                                  ;atof (string to float) and ftoa (float to string) both use built-in library functions. When computing the area of the 
     5                                  ;triangle, sin(x), where x is the angle, is used in the formula, and sin(x) is computed using a Taylor series, programmed in 
     6                                  ;x86_64. When the user has input 2 sides and the angle between, the program will convert the strings input by the user into
     7                                  ;floats, calculate the area, then convert the area into a string and output the area to the screen. Once the area has been  
     8                                  ;output to the screen, the program will then return the area to the driver function, written in C, and will confirm its 
     9                                  ;retrieval and convey a goobye message to the user.
    10                                  
    11                                  ;WARNING: THIS PROGRAM DOES NOT VALIDATE USER INPUT
    12                                  ;****************************************************************************************************************************/
    13                                  
    14                                  
    15                                  
    16                                  ;/**********************************************************************************************************************************
    17                                  ;Author information
    18                                  ;  Author name: Nathan Warner
    19                                  ;  Author email: nwarner4@csu.fullerton.edu
    20                                  
    21                                  ;Program information
    22                                  ;  Program name: Areas of Triangles
    23                                  ;  Programming languages: One module in C, four modules in x86_64, and one module in bash
    24                                  ;  Date program began: 2024-May-4
    25                                  ;  Date of last update: 2024-Mar-8
    26                                  ;  Files in this program: main.c, producer.asm multiplier.asm sin.asm strlen.asm r.sh
    27                                  ;  Testing: Alpha testing completed.  All functions are correct.
    28                                  ;  Status: Ready for release to customers
    29                                  
    30                                  ;Purpose
    31                                  ;  The program will take in 2 sides of a triangle, as well as the angle between them in degrees from the user.
    32                                  ;    Using the above information, the program will then compute the area of the triangle and output it to the screen.
    33                                  ;    All I/O in this program will be done in pure x86_64 assembly using syscalls
    34                                  
    35                                  ;This file:
    36                                  ;  File name: sin.asm
    37                                  ;  Language: x86_64
    38                                  ;  Max page width: 124 columns
    39                                  ;  Assemble (standard): nasm -f elf64 -l sin.lis -o sin.o sin.asm
    40                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;  Prototype of this function: int main(int argc, const char * argv[]);
    42                                  ;***********************************************************************************************************************************/
    43                                  
    44                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    45                                  ;not have its own place of declaration
    46                                  
    47                                  global sin
    48                                  
    49                                  extern multiplier
    50                                  
    51                                  segment .data
    52                                  ;This section (or segment) is for declaring initialized arrays
    53                                  
    54                                  segment .bss
    55                                  ;This section (or segment) is for declaring empty arrays
    56                                  
    57                                  align 64
    58 00000000 <res 340h>              backup_storage_area resb 832
    59                                  
    60                                  segment .text
    61                                  
    62                                  sin:
    63                                      ;Back up the GPRs (General Purpose Registers)
    64 00000000 55                          push rbp
    65 00000001 4889E5                      mov rbp, rsp
    66 00000004 53                          push rbx
    67 00000005 51                          push rcx
    68 00000006 52                          push rdx
    69 00000007 57                          push rdi
    70 00000008 56                          push rsi
    71 00000009 4150                        push r8
    72 0000000B 4151                        push r9
    73 0000000D 4152                        push r10
    74 0000000F 4153                        push r11
    75 00000011 4154                        push r12
    76 00000013 4155                        push r13
    77 00000015 4156                        push r14
    78 00000017 4157                        push r15
    79 00000019 9C                          pushf
    80                                  
    81                                      ;Backup the registers other than the GPRs
    82 0000001A B807000000                  mov rax,7
    83 0000001F BA00000000                  mov rdx,0
    84 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
    85                                  
    86                                  
    87                                      ;Setting up registers for sin
    88 0000002C 41BE00000000                mov r14, 0 ;Term counter
    89 00000032 F2440F10C8                  movsd xmm9, xmm0 ;Permanent (constant)
    90 00000037 F2440F10C0                  movsd xmm8, xmm0 ;Current term
    91 0000003C 66450FEFD2                  pxor xmm10, xmm10 ;xmm10 will hold sin(x)
    92                                  
    93                                  
    94                                  multiplier_loop:   
    95                                      ;Calling multiplier
    96 00000041 B801000000                  mov rax, 1
    97 00000046 4C89F7                      mov rdi, r14 ;Term counter
    98 00000049 F2410F10C1                  movsd xmm0, xmm9 ;Value for x
    99 0000004E E8(00000000)                call multiplier
   100 00000053 F2440F10E0                  movsd xmm12, xmm0
   101                                  
   102                                  
   103 00000058 F2450F59C4                  mulsd xmm8, xmm12
   104 0000005D 49FFC6                      inc r14
   105                                  
   106                                  
   107 00000060 F2450F58D0                  addsd xmm10, xmm8
   108                                  
   109                                  
   110 00000065 4983FE14                    cmp r14, 20
   111 00000069 7ED6                        jle multiplier_loop
   112                                  
   113                                  exit:
   114 0000006B F2450F58CA                  addsd xmm9, xmm10
   115                                  
   116                                  
   117                                      ;Back up value in xmm9 before restoring registers
   118 00000070 6A00                        push qword 0
   119 00000072 F2440F110C24                movsd [rsp], xmm9
   120                                  
   121                                  
   122                                      ;Restore the values to non-GPRs
   123 00000078 B807000000                  mov rax, 7
   124 0000007D BA00000000                  mov rdx, 0
   125 00000082 0FAE2C25[00000000]          xrstor [backup_storage_area]
   126                                  
   127                                  
   128 0000008A F20F100424                  movsd xmm0, [rsp]
   129 0000008F 58                          pop rax
   130                                      
   131                                  
   132                                      ;Restore the GPRs
   133 00000090 9D                          popf
   134 00000091 415F                        pop r15
   135 00000093 415E                        pop r14
   136 00000095 415D                        pop r13
   137 00000097 415C                        pop r12
   138 00000099 415B                        pop r11
   139 0000009B 415A                        pop r10
   140 0000009D 4159                        pop r9
   141 0000009F 4158                        pop r8
   142 000000A1 5E                          pop rsi
   143 000000A2 5F                          pop rdi
   144 000000A3 5A                          pop rdx
   145 000000A4 59                          pop rcx
   146 000000A5 5B                          pop rbx
   147 000000A6 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   148 000000A7 C3                          ret
   149                                  ;End of the function sin.asm ====================================================================
