     1                                  ;/****************************************************************************************************************************
     2                                  ;Program name: "Areas of Triangles" - This program will prompt the user for the lengths of 2 sides of a triangle and the 
     3                                  ;size of the angle between them. All I/O in this program will be handled in pure assembly using syscalls. The conversions
     4                                  ;atof (string to float) and ftoa (float to string) both use built-in library functions. When computing the area of the 
     5                                  ;triangle, sin(x), where x is the angle, is used in the formula, and sin(x) is computed using a Taylor series, programmed in 
     6                                  ;x86_64. When the user has input 2 sides and the angle between, the program will convert the strings input by the user into
     7                                  ;floats, calculate the area, then convert the area into a string and output the area to the screen. Once the area has been  
     8                                  ;output to the screen, the program will then return the area to the driver function, written in C, and will confirm its 
     9                                  ;retrieval and convey a goobye message to the user.
    10                                  
    11                                  ;WARNING: THIS PROGRAM DOES NOT VALIDATE USER INPUT
    12                                  ;****************************************************************************************************************************/
    13                                  
    14                                  
    15                                  
    16                                  ;/**********************************************************************************************************************************
    17                                  ;Author information
    18                                  ;  Author name: Nathan Warner
    19                                  ;  Author email: nwarner4@csu.fullerton.edu
    20                                  
    21                                  ;Program information
    22                                  ;  Program name: Areas of Triangles
    23                                  ;  Programming languages: One module in C, four modules in x86_64, and one module in bash
    24                                  ;  Date program began: 2024-May-4
    25                                  ;  Date of last update: 2024-Mar-8
    26                                  ;  Files in this program: main.c, producer.asm multiplier.asm sin.asm strlen.asm r.sh
    27                                  ;  Testing: Alpha testing completed.  All functions are correct.
    28                                  ;  Status: Ready for release to customers
    29                                  
    30                                  ;Purpose
    31                                  ;  The program will take in 2 sides of a triangle, as well as the angle between them in degrees from the user.
    32                                  ;    Using the above information, the program will then compute the area of the triangle and output it to the screen.
    33                                  ;    All I/O in this program will be done in pure x86_64 assembly using syscalls
    34                                  
    35                                  ;This file:
    36                                  ;  File name: multiplier.asm
    37                                  ;  Language: x86_64
    38                                  ;  Max page width: 124 columns
    39                                  ;  Assemble (standard): nasm -f elf64 -l multiplier.lis -o multiplier.o multiplier.asm
    40                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;  Prototype of this function: int main(int argc, const char * argv[]);
    42                                  ;***********************************************************************************************************************************/
    43                                  
    44                                  
    45                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    46                                  ;not have its own place of declaration
    47                                  
    48                                  global multiplier
    49                                  
    50                                  extern printf
    51                                  
    52                                  segment .data
    53                                  ;This section (or segment) is for declaring initialized arrays
    54                                  
    55                                  segment .bss
    56                                  ;This section (or segment) is for declaring empty arrays
    57                                  
    58                                  align 64
    59 00000000 <res 340h>              backup_storage_area resb 832
    60                                  
    61                                  segment .text
    62                                  
    63                                  multiplier:
    64                                  
    65                                      ;Back up the GPRs (General Purpose Registers)
    66 00000000 55                          push rbp
    67 00000001 4889E5                      mov rbp, rsp
    68 00000004 53                          push rbx
    69 00000005 51                          push rcx
    70 00000006 52                          push rdx
    71 00000007 57                          push rdi
    72 00000008 56                          push rsi
    73 00000009 4150                        push r8
    74 0000000B 4151                        push r9
    75 0000000D 4152                        push r10
    76 0000000F 4153                        push r11
    77 00000011 4154                        push r12
    78 00000013 4155                        push r13
    79 00000015 4156                        push r14
    80 00000017 4157                        push r15
    81 00000019 9C                          pushf
    82                                  
    83                                      ;Backup the registers other than the GPRs
    84 0000001A B807000000                  mov rax,7
    85 0000001F BA00000000                  mov rdx,0
    86 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
    87                                  
    88                                  
    89                                      ;Setting up registers for multiplier
    90 0000002C 4889FB                      mov rbx, rdi ;term counter
    91 0000002F F2440F10E8                  movsd xmm13, xmm0 ;xmm13 = x(constant)
    92 00000034 F2450F59ED                  mulsd xmm13, xmm13 ;xmm13 = x^2
    93 00000039 49C7C0FFFFFFFF              mov r8, -1
    94                                  
    95 00000040 F24D0F2AE0                  cvtsi2sd xmm12, r8 ;Converting -1 to -1.0 and storing it into xmm12
    96                                  
    97 00000045 F2450F59EC                  mulsd xmm13, xmm12 ;xmm13 = -x^2
    98                                  
    99                                      ;work on denominator
   100                                      ;mov the value of 2 into rax to correctly use mul, which multiplies the specified register by rax
   101 0000004A 486BDB02                    imul rbx, 2
   102 0000004E 4883C302                    add rbx, 2 ;rbx = 2n + 2
   103 00000052 4889D9                      mov rcx, rbx
   104 00000055 48FFC1                      inc rcx ;rcx = 2n + 3
   105 00000058 480FAFD9                    imul rbx, rcx
   106                                      
   107                                  
   108 0000005C F24C0F2AF3                  cvtsi2sd xmm14, rbx ;xmm14 is now the denominator
   109                                  
   110                                  
   111 00000061 F2450F5EEE                  divsd xmm13, xmm14 ;Final division
   112                                  
   113                                  
   114                                      ;Back up value in xmm13 before restoring registers
   115 00000066 6A00                        push qword 0
   116 00000068 F2440F112C24                movsd [rsp], xmm13
   117                                  
   118                                  
   119                                  
   120                                      ;Restore the values to non-GPRs
   121 0000006E B807000000                  mov rax, 7
   122 00000073 BA00000000                  mov rdx, 0
   123 00000078 0FAE2C25[00000000]          xrstor [backup_storage_area]
   124                                  
   125                                  
   126 00000080 F20F100424                  movsd xmm0, [rsp]
   127 00000085 58                          pop rax
   128                                      
   129                                  
   130                                      ;Restore the GPRs
   131 00000086 9D                          popf
   132 00000087 415F                        pop r15
   133 00000089 415E                        pop r14
   134 0000008B 415D                        pop r13
   135 0000008D 415C                        pop r12
   136 0000008F 415B                        pop r11
   137 00000091 415A                        pop r10
   138 00000093 4159                        pop r9
   139 00000095 4158                        pop r8
   140 00000097 5E                          pop rsi
   141 00000098 5F                          pop rdi
   142 00000099 5A                          pop rdx
   143 0000009A 59                          pop rcx
   144 0000009B 5B                          pop rbx
   145 0000009C 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   146 0000009D C3                          ret
   147                                  ;End of the function multiplier.asm ====================================================================
