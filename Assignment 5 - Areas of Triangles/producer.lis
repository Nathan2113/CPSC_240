     1                                  ;/****************************************************************************************************************************
     2                                  ;Program name: "Areas of Triangles" - This program will prompt the user for the lengths of 2 sides of a triangle and the 
     3                                  ;size of the angle between them. All I/O in this program will be handled in pure assembly using syscalls. The conversions
     4                                  ;atof (string to float) and ftoa (float to string) both use built-in library functions. When computing the area of the 
     5                                  ;triangle, sin(x), where x is the angle, is used in the formula, and sin(x) is computed using a Taylor series, programmed in 
     6                                  ;x86_64. When the user has input 2 sides and the angle between, the program will convert the strings input by the user into
     7                                  ;floats, calculate the area, then convert the area into a string and output the area to the screen. Once the area has been  
     8                                  ;output to the screen, the program will then return the area to the driver function, written in C, and will confirm its 
     9                                  ;retrieval and convey a goobye message to the user.
    10                                  
    11                                  ;WARNING: THIS PROGRAM DOES NOT VALIDATE USER INPUT
    12                                  ;****************************************************************************************************************************/
    13                                  
    14                                  
    15                                  
    16                                  ;/**********************************************************************************************************************************
    17                                  ;Author information
    18                                  ;  Author name: Nathan Warner
    19                                  ;  Author email: nwarner4@csu.fullerton.edu
    20                                  
    21                                  ;Program information
    22                                  ;  Program name: Areas of Triangles
    23                                  ;  Programming languages: One module in C, four modules in x86_64, and one module in bash
    24                                  ;  Date program began: 2024-May-4
    25                                  ;  Date of last update: 2024-Mar-8
    26                                  ;  Files in this program: main.c, producer.asm multiplier.asm sin.asm strlen.asm r.sh
    27                                  ;  Testing: Alpha testing completed.  All functions are correct.
    28                                  ;  Status: Ready for release to customers
    29                                  
    30                                  ;Purpose
    31                                  ;  The program will take in 2 sides of a triangle, as well as the angle between them in degrees from the user.
    32                                  ;    Using the above information, the program will then compute the area of the triangle and output it to the screen.
    33                                  ;    All I/O in this program will be done in pure x86_64 assembly using syscalls
    34                                  
    35                                  ;This file:
    36                                  ;  File name: producer.asm
    37                                  ;  Language: x86_64
    38                                  ;  Max page width: 124 columns
    39                                  ;  Assemble (standard): nasm -f elf64 -l producer.lis -o producer.o producer.asm
    40                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    41                                  ;  Prototype of this function: int main(int argc, const char * argv[]);
    42                                  ;***********************************************************************************************************************************/
    43                                  
    44                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    45                                  ;not have its own place of declaration
    46                                  
    47                                  global producer
    48                                  
    49                                  extern sin
    50                                  extern atof
    51                                  extern strlen
    52                                  extern gcvt
    53                                  
    54                                  numeric_string_array_size equ 32
    55                                  line_feed equ 10
    56                                  null equ 0
    57                                  
    58                                  segment .data
    59                                  ;This section (or segment) is for declaring initialized arrays
    60                                  
    61 00000000 506C6561736520656E-     side_1_prompt db "Please enter the length of side 1: ", 0 ;String size: 35
    61 00000009 74657220746865206C-
    61 00000012 656E677468206F6620-
    61 0000001B 7369646520313A2000 
    62 00000024 506C6561736520656E-     side_2_prompt db "Please enter the length of side 2: ", 0 ;String size: 35
    62 0000002D 74657220746865206C-
    62 00000036 656E677468206F6620-
    62 0000003F 7369646520323A2000 
    63 00000048 506C6561736520656E-     angle_prompt db "Please enter the degrees of the angle between: ", 0 ;String size: 47
    63 00000051 746572207468652064-
    63 0000005A 656772656573206F66-
    63 00000063 2074686520616E676C-
    63 0000006C 65206265747765656E-
    63 00000075 3A2000             
    64 00000078 546865206172656120-     output_area db "The area of the triangle is %1.5lf square feet.", 0 ;String size: 47
    64 00000081 6F6620746865207472-
    64 0000008A 69616E676C65206973-
    64 00000093 2025312E356C662073-
    64 0000009C 717561726520666565-
    64 000000A5 742E00             
    65 000000A8 546865206172656120-     area_output_1 db "The area of the triangle is ", 0
    65 000000B1 6F6620746865207472-
    65 000000BA 69616E676C65206973-
    65 000000C3 2000               
    66 000000C5 207371756172652066-     area_output_2 db " square feet.", 0
    66 000000CE 6565742E00         
    67 000000D3 5468616E6B20796F75-     thank_you_message db "Thank you for using Nathan's product.", 0 ;String size: 37
    67 000000DC 20666F72207573696E-
    67 000000E5 67204E617468616E27-
    67 000000EE 732070726F64756374-
    67 000000F7 2E00               
    68 000000F9 0A                      newline db 10
    69                                  
    70                                  
    71 000000FA 0000000000806640        angle_180 dq 180.0
    72 00000102 EA2E4454FB210940        pi dq 3.14159265359
    73 0000010A 0000000000000040        two dq 2.0
    74                                  
    75                                  segment .bss
    76                                  ;This section (or segment) is for declaring empty arrays
    77                                  
    78                                  align 64
    79 00000000 <res 340h>              backup_storage_area resb 832
    80 00000340 <res 20h>               first_side resb numeric_string_array_size
    81 00000360 <res 20h>               second_side resb numeric_string_array_size
    82 00000380 <res 20h>               angle resb numeric_string_array_size
    83 000003A0 <res 20h>               area_output resb numeric_string_array_size
    84                                  
    85                                  segment .text
    86                                  
    87                                  producer:
    88                                  
    89                                      ;Back up the GPRs (General Purpose Registers)
    90 00000000 55                          push rbp
    91 00000001 4889E5                      mov rbp, rsp
    92 00000004 53                          push rbx
    93 00000005 51                          push rcx
    94 00000006 52                          push rdx
    95 00000007 57                          push rdi
    96 00000008 56                          push rsi
    97 00000009 4150                        push r8
    98 0000000B 4151                        push r9
    99 0000000D 4152                        push r10
   100 0000000F 4153                        push r11
   101 00000011 4154                        push r12
   102 00000013 4155                        push r13
   103 00000015 4156                        push r14
   104 00000017 4157                        push r15
   105 00000019 9C                          pushf
   106                                  
   107                                      ;Backup the registers other than the GPRs
   108 0000001A B807000000                  mov rax,7
   109 0000001F BA00000000                  mov rdx,0
   110 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   111                                  
   112                                      ;Block that outputs a newline
   113 0000002C C60425[F9000000]0A          mov byte [newline], 0xa
   114 00000034 C60425[FA000000]00          mov byte [newline+1], 0
   115 0000003C B801000000                  mov rax, 1
   116 00000041 BF01000000                  mov rdi, 1
   117 00000046 48BE-                       mov rsi, newline
   117 00000048 [F900000000000000] 
   118 00000050 BA01000000                  mov rdx, 1
   119 00000055 0F05                        syscall
   120                                  
   121                                      
   122                                      ;Block to obtain the string length of the first side prompt
   123 00000057 B800000000                  mov rax, 0
   124 0000005C 48BF-                       mov rdi, side_1_prompt
   124 0000005E [0000000000000000] 
   125 00000066 E8(00000000)                call strlen
   126 0000006B 4989C4                      mov r12, rax ;r12 holds the string length of the first side prompt
   127                                  
   128                                  
   129                                      ;Block that outputs the first side prompt
   130 0000006E B801000000                  mov rax, 1 ;1 is the write code
   131 00000073 BF01000000                  mov rdi, 1 ;stdout
   132 00000078 48BE-                       mov rsi, side_1_prompt ;"Please enter the length of side 1: "
   132 0000007A [0000000000000000] 
   133 00000082 4C89E2                      mov rdx, r12 ;String size
   134 00000085 0F05                        syscall
   135                                  
   136                                      ;Preloop initialization
   137 00000087 48BB-                       mov rbx, first_side
   137 00000089 [4003000000000000] 
   138 00000091 41BC00000000                mov r12, 0 ;r12 is the counter of number of bytes inputted
   139 00000097 6A00                        push qword 0 ;Storage for incoming bytes
   140                                  
   141                                  first_side_loop:
   142 00000099 B800000000                  mov rax, 0 ;0 = read
   143 0000009E BF00000000                  mov rdi, 0 ;0 = stdin
   144 000000A3 4889E6                      mov rsi, rsp
   145 000000A6 BA01000000                  mov rdx, 1 ;one byte will be read from the input buffer
   146 000000AB 0F05                        syscall
   147                                  
   148 000000AD 8A0424                      mov al, byte [rsp]
   149                                  
   150 000000B0 3C0A                        cmp al, line_feed
   151 000000B2 7410                        je exit_side_1
   152                                  
   153 000000B4 49FFC4                      inc r12
   154                                  
   155 000000B7 4983FC20                    cmp r12, numeric_string_array_size
   156                                      ;if(r12 >= input_array_size)
   157 000000BB 7D05                            jge end_side_1_if_else
   158                                      ;else (r12 < numeric_string_array_size)
   159 000000BD 8803                            mov byte [rbx], al
   160 000000BF 48FFC3                          inc rbx
   161                                      end_side_1_if_else:
   162                                  
   163 000000C2 EBD5                    jmp first_side_loop
   164                                  
   165                                  exit_side_1:
   166 000000C4 C60300                      mov byte [rbx], null ;Append the null character
   167                                  
   168 000000C7 58                          pop rax
   169                                  
   170                                  
   171                                      ;Block to obtain the string length of the second side prompt
   172 000000C8 B800000000                  mov rax, 0
   173 000000CD 48BF-                       mov rdi, side_2_prompt
   173 000000CF [2400000000000000] 
   174 000000D7 E8(00000000)                call strlen
   175 000000DC 4989C4                      mov r12, rax ;r12 holds the string length of the first side prompt
   176                                  
   177                                  
   178                                      ;Block that outputs the second side prompt
   179 000000DF B801000000                  mov rax, 1 ;1 is the write code
   180 000000E4 BF01000000                  mov rdi, 1 ;stdout
   181 000000E9 48BE-                       mov rsi, side_2_prompt ;"Please enter the length of side 2: "
   181 000000EB [2400000000000000] 
   182 000000F3 4C89E2                      mov rdx, r12 ;String size
   183 000000F6 0F05                        syscall
   184                                  
   185                                      ;Preloop initialization
   186 000000F8 48BB-                       mov rbx, second_side
   186 000000FA [6003000000000000] 
   187 00000102 41BC00000000                mov r12, 0 ;r12 is the counter of number of bytes inputted
   188 00000108 6A00                        push qword 0 ;Storage for incoming bytes
   189                                  
   190                                  second_side_loop:
   191 0000010A B800000000                  mov rax, 0 ;0 = read
   192 0000010F BF00000000                  mov rdi, 0 ;0 = stdin
   193 00000114 4889E6                      mov rsi, rsp
   194 00000117 BA01000000                  mov rdx, 1 ;one byte will be read from the input buffer
   195 0000011C 0F05                        syscall
   196                                  
   197 0000011E 8A0424                      mov al, byte [rsp]
   198                                  
   199 00000121 3C0A                        cmp al, line_feed
   200 00000123 7410                        je exit_side_2
   201                                  
   202 00000125 49FFC4                      inc r12
   203                                  
   204 00000128 4983FC20                    cmp r12, numeric_string_array_size
   205                                      ;if(r12 >= input_array_size)
   206 0000012C 7D05                            jge end_side_2_if_else
   207                                      ;else (r12 < numeric_string_array_size)
   208 0000012E 8803                            mov byte [rbx], al
   209 00000130 48FFC3                          inc rbx
   210                                      end_side_2_if_else:
   211                                  
   212 00000133 EBD5                    jmp second_side_loop
   213                                  
   214                                  exit_side_2:
   215 00000135 C60300                      mov byte [rbx], null ;Append the null character
   216                                  
   217 00000138 58                          pop rax
   218                                  
   219                                  
   220                                      ;Block to obtain the string length of the angle prompt
   221 00000139 B800000000                  mov rax, 0
   222 0000013E 48BF-                       mov rdi, angle_prompt
   222 00000140 [4800000000000000] 
   223 00000148 E8(00000000)                call strlen
   224 0000014D 4989C4                      mov r12, rax ;r12 holds the string length of the angle prompt
   225                                  
   226                                  
   227                                      ;Block that outputs the angle prompt
   228 00000150 B801000000                  mov rax, 1 ;1 is the write code
   229 00000155 BF01000000                  mov rdi, 1 ;stdout
   230 0000015A 48BE-                       mov rsi, angle_prompt ;"Please enter the degree of the angle between: "
   230 0000015C [4800000000000000] 
   231 00000164 4C89E2                      mov rdx, r12 ;String size
   232 00000167 0F05                        syscall
   233                                  
   234                                      ;Preloop initialization
   235 00000169 48BB-                       mov rbx, angle
   235 0000016B [8003000000000000] 
   236 00000173 41BC00000000                mov r12, 0 ;r12 is the counter of number of bytes inputted
   237 00000179 6A00                        push qword 0 ;Storage for incoming bytes
   238                                  
   239                                  angle_loop:
   240 0000017B B800000000                  mov rax, 0 ;0 = read
   241 00000180 BF00000000                  mov rdi, 0 ;0 = stdin
   242 00000185 4889E6                      mov rsi, rsp
   243 00000188 BA01000000                  mov rdx, 1 ;one byte will be read from the input buffer
   244 0000018D 0F05                        syscall
   245                                  
   246 0000018F 8A0424                      mov al, byte [rsp]
   247                                  
   248 00000192 3C0A                        cmp al, line_feed
   249 00000194 7410                        je exit_angle
   250                                  
   251 00000196 49FFC4                      inc r12
   252                                  
   253 00000199 4983FC20                    cmp r12, numeric_string_array_size
   254                                      ;if(r12 >= input_array_size)
   255 0000019D 7D05                            jge end_angle_if_else
   256                                      ;else (r12 < numeric_string_array_size)
   257 0000019F 8803                            mov byte [rbx], al
   258 000001A1 48FFC3                          inc rbx
   259                                      end_angle_if_else:
   260                                  
   261 000001A4 EBD5                    jmp angle_loop
   262                                  
   263                                  exit_angle:
   264 000001A6 C60300                      mov byte [rbx], null ;Append the null character
   265                                  
   266 000001A9 58                          pop rax
   267                                  
   268                                  
   269                                      ;Convert side 1 to float
   270 000001AA B800000000                  mov rax, 0
   271 000001AF 48BF-                       mov rdi, first_side
   271 000001B1 [4003000000000000] 
   272 000001B9 E8(00000000)                call atof
   273 000001BE F2440F10E8                  movsd xmm13, xmm0
   274                                  
   275                                      ;Convert side 2 to float
   276 000001C3 B800000000                  mov rax, 0
   277 000001C8 48BF-                       mov rdi, second_side
   277 000001CA [6003000000000000] 
   278 000001D2 E8(00000000)                call atof
   279 000001D7 F2440F10F0                  movsd xmm14, xmm0
   280                                  
   281                                      ;Convert angle to float
   282 000001DC B800000000                  mov rax, 0
   283 000001E1 48BF-                       mov rdi, angle
   283 000001E3 [8003000000000000] 
   284 000001EB E8(00000000)                call atof
   285 000001F0 F2440F10F8                  movsd xmm15, xmm0
   286                                  
   287                                  
   288                                      ;CONVERTING FROM DEGREES TO RADIANS
   289                                      ;xmm15 is the radians
   290 000001F5 F2440F102425-               movsd xmm12, qword [angle_180]
   290 000001FB [FA000000]         
   291 000001FF F2440F101C25-               movsd xmm11, qword [pi]
   291 00000205 [02010000]         
   292 00000209 F2450F5EDC                  divsd xmm11, xmm12
   293 0000020E F2450F59FB                  mulsd xmm15, xmm11
   294                                  
   295                                  
   296                                      ;Calling sine function
   297 00000213 B801000000                  mov rax, 1
   298 00000218 F2410F10C7                  movsd xmm0, xmm15
   299 0000021D E8(00000000)                call sin
   300 00000222 F2440F10F8                  movsd xmm15, xmm0
   301                                  
   302                                  
   303                                      ;Computing the area of the triangle after finding sine
   304                                      ;The formula being used is 1/2 * a * b * sin(x) where:
   305                                      ;a = the length of the first side
   306                                      ;b = the length of the second side
   307                                      ;x = the angle in degrees
   308                                      ;xmm13 holds side 1
   309                                      ;xmm14 holds side 2
   310                                      ;xmm15 holds sin(x)
   311                                  
   312 00000227 F2450F59EE                  mulsd xmm13, xmm14
   313 0000022C F2450F59EF                  mulsd xmm13, xmm15
   314 00000231 F2440F5E2C25-               divsd xmm13, qword [two] ;xmm13 now holds the area
   314 00000237 [0A010000]         
   315                                  
   316                                  
   317                                  
   318                                      ;Convert the area into a string
   319 0000023B B801000000                  mov rax, 1
   320 00000240 F2410F10C5                  movsd xmm0, xmm13
   321 00000245 BF0A000000                  mov rdi, 10
   322 0000024A 48BE-                       mov rsi, area_output
   322 0000024C [A003000000000000] 
   323 00000254 E8(00000000)                call gcvt
   324 00000259 4989C7                      mov r15, rax
   325                                  
   326                                  
   327                                      ;Block that outputs a newline
   328 0000025C C60425[F9000000]0A          mov byte [newline], 0xa
   329 00000264 C60425[FA000000]00          mov byte [newline+1], 0
   330 0000026C B801000000                  mov rax, 1
   331 00000271 BF01000000                  mov rdi, 1
   332 00000276 48BE-                       mov rsi, newline
   332 00000278 [F900000000000000] 
   333 00000280 BA01000000                  mov rdx, 1
   334 00000285 0F05                        syscall
   335                                  
   336                                  
   337                                  
   338                                      ;Get the length of the area_output_1 string
   339 00000287 B800000000                  mov rax, 0
   340 0000028C 48BF-                       mov rdi, area_output_1
   340 0000028E [A800000000000000] 
   341 00000296 E8(00000000)                call strlen
   342 0000029B 4989C4                      mov r12, rax
   343                                  
   344                                  
   345                                      ;Output the first part of the area string
   346 0000029E B801000000                  mov rax, 1 ;1 is the write code
   347 000002A3 BF01000000                  mov rdi, 1 ;stdout
   348 000002A8 48BE-                       mov rsi, area_output_1 ;"The area of this triangle is "
   348 000002AA [A800000000000000] 
   349 000002B2 4C89E2                      mov rdx, r12 ;String size
   350 000002B5 0F05                        syscall
   351                                  
   352                                  
   353                                      ;Use strlen to get the string length of the area
   354 000002B7 B800000000                  mov rax, 0
   355 000002BC 4C89FF                      mov rdi, r15 ;r15 holds the area string
   356 000002BF E8(00000000)                call strlen
   357 000002C4 4989C4                      mov r12, rax
   358                                  
   359                                      ;Output the area string
   360 000002C7 B801000000                  mov rax, 1 ;1 is the write code
   361 000002CC BF01000000                  mov rdi, 1 ;stdout
   362 000002D1 4C89FE                      mov rsi, r15 ;r15 holds the string area
   363 000002D4 4C89E2                      mov rdx, r12 ;String size  
   364 000002D7 0F05                        syscall
   365                                  
   366                                      ;Get the length of the area_output_2 string
   367 000002D9 B800000000                  mov rax, 0
   368 000002DE 48BF-                       mov rdi, area_output_2
   368 000002E0 [C500000000000000] 
   369 000002E8 E8(00000000)                call strlen
   370 000002ED 4989C4                      mov r12, rax
   371                                  
   372                                  
   373                                      ;Output the second part of the area string
   374 000002F0 B801000000                  mov rax, 1 ;1 is the write code
   375 000002F5 BF01000000                  mov rdi, 1 ;stdout
   376 000002FA 48BE-                       mov rsi, area_output_2 ;" square feet."
   376 000002FC [C500000000000000] 
   377 00000304 4C89E2                      mov rdx, r12 ;String size
   378 00000307 0F05                        syscall
   379                                  
   380                                  
   381                                      ;Block that outputs a newline
   382 00000309 C60425[F9000000]0A          mov byte [newline], 0xa
   383 00000311 C60425[FA000000]00          mov byte [newline+1], 0
   384 00000319 B801000000                  mov rax, 1
   385 0000031E BF01000000                  mov rdi, 1
   386 00000323 48BE-                       mov rsi, newline
   386 00000325 [F900000000000000] 
   387 0000032D BA01000000                  mov rdx, 1
   388 00000332 0F05                        syscall
   389                                  
   390                                  
   391                                      ;Block that outputs thank you message
   392 00000334 B801000000                  mov rax, 1 ;1 is the write code
   393 00000339 BF01000000                  mov rdi, 1 ;Destination of the output device
   394 0000033E 48BE-                       mov rsi, thank_you_message ;"Thank you for using Nathan's product."
   394 00000340 [D300000000000000] 
   395 00000348 BA25000000                  mov rdx, 37 ;String size
   396 0000034D 0F05                        syscall
   397                                  
   398                                  
   399                                      ;Block that outputs a newline
   400 0000034F C60425[F9000000]0A          mov byte [newline], 0xa
   401 00000357 C60425[FA000000]00          mov byte [newline+1], 0
   402 0000035F B801000000                  mov rax, 1
   403 00000364 BF01000000                  mov rdi, 1
   404 00000369 48BE-                       mov rsi, newline
   404 0000036B [F900000000000000] 
   405 00000373 BA01000000                  mov rdx, 1
   406 00000378 0F05                        syscall
   407                                  
   408                                  
   409                                  
   410                                      ;Back up value in xmm8 area before restoring registers
   411 0000037A 6A00                        push qword 0
   412 0000037C F2440F112C24                movsd [rsp], xmm13
   413                                  
   414                                  
   415                                  
   416                                      ;Restore the values to non-GPRs
   417 00000382 B807000000                  mov rax, 7
   418 00000387 BA00000000                  mov rdx, 0
   419 0000038C 0FAE2C25[00000000]          xrstor [backup_storage_area]
   420                                  
   421                                  
   422 00000394 F20F100424                  movsd xmm0, [rsp]
   423 00000399 58                          pop rax
   424                                      
   425                                  
   426                                      ;Restore the GPRs
   427 0000039A 9D                          popf
   428 0000039B 415F                        pop r15
   429 0000039D 415E                        pop r14
   430 0000039F 415D                        pop r13
   431 000003A1 415C                        pop r12
   432 000003A3 415B                        pop r11
   433 000003A5 415A                        pop r10
   434 000003A7 4159                        pop r9
   435 000003A9 4158                        pop r8
   436 000003AB 5E                          pop rsi
   437 000003AC 5F                          pop rdi
   438 000003AD 5A                          pop rdx
   439 000003AE 59                          pop rcx
   440 000003AF 5B                          pop rbx
   441 000003B0 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   442 000003B1 C3                          ret
   443                                  ;End of the function producer.asm ====================================================================
