     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Arrays" - This program will first welcome the user to the program, as well as outputting its developer.     *
     3                                  ;After this initial message, the program will let the user know the directions of the program, which is as follows:         *
     4                                  ;                                                                                                                           *
     5                                  ;"This program will manage your arrays of 64-bit floats                                                                     *
     6                                  ;For the array enter a sequence of 64-bit floats separated by white space.                                                  *
     7                                  ;After the last input press enter followed by Control+D:"                                                                   *
     8                                  ;                                                                                                                           *
     9                                  ;The program will then take in user input, validating each input to make sure they are entering valid float numbers, and    *
    10                                  ;this process is done through the input_array.asm file, using isfloat.asm to validate their inputs. If the user inputs an   *
    11                                  ;invalid input, the program will let them know with the following message:                                                  *
    12                                  ;                                                                                                                           *
    13                                  ;"The last input was invalid and not entered into the array.""                                                              *
    14                                  ;                                                                                                                           *
    15                                  ;Once the array has been fully entered, the program will output the entire array to the screen, which is done in the        *
    16                                  ;output_array.c file using the C language. Once the array has been output, the program will then compute the mean of the    *
    17                                  ;array using compute_mean.asm, and will then use the mean it found to compute the variance using compute_variance.cpp,      *
    18                                  ;which uses C++. Once the variance has been found, the program will output the variance to the screen for the user, and     *
    19                                  ;will then send the variance to main.c, where the program will let the user know that the variance will be kept for         *
    20                                  ;future use, and that a 0 will be sent to the operating system.                                                             *
    21                                  ;                                                                                                                           *
    22                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
    23                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
    24                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
    25                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
    26                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    27                                  ;****************************************************************************************************************************
    28                                  
    29                                  
    30                                  
    31                                  
    32                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    33                                  ;Author information
    34                                  ;  Author name: Nathan Warner
    35                                  ;  Author email: nwarner4@csu.fullerton.edu
    36                                  ;
    37                                  ;Program information
    38                                  ;  Program name: Arrays
    39                                  ;  Programming languages: Two modules in C, four modules in x86_64, one module in C++, and one module in bash
    40                                  ;  Date program began: 2024-Mar-3
    41                                  ;  Date of last update: 2024-Mar-7
    42                                  ;  Files in this program: main.c, manager.asm, r.sh, output_array.c, compute_mean.asm, compute_variance.cpp, input_array.asm, isfloat.asm
    43                                  ;  Testing: Alpha testing completed.  All functions are correct.
    44                                  ;  Status: Ready for release to customers
    45                                  ;
    46                                  ;Purpose
    47                                  ;  The program will take in an array of valid floating point numbers from the user, find the mean of the array, 
    48                                  ;       and find the variance, which it will output to the screen and send to main.c
    49                                  ;
    50                                  ;This file:
    51                                  ;  File name: manager.asm
    52                                  ;  Language: X86-64
    53                                  ;  Max page width: 124 columns
    54                                  ;  Assemble (standard): nasm -f elf64 -l manager.lis -o manager.o manager.asm
    55                                  ;  Assemble (debug): nasm -g dwarf -l manager.lis -o manager.o manager.asm
    56                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    57                                  ;  Prototype of this function: double manager();
    58                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    59                                  
    60                                  ;Declaration section.  The section has no name other than "Declaration section".  Declare here everything that does
    61                                  ;not have its own place of declaration
    62                                  
    63                                  global producer
    64                                  
    65                                  extern sin
    66                                  extern atof
    67                                  extern ftoa
    68                                  extern strlen
    69                                  
    70                                  
    71                                  extern printf ;REMOVE
    72                                  
    73                                  
    74                                  ; float_size equ 60
    75                                  
    76                                  segment .data
    77                                  ;This section (or segment) is for declaring initialized arrays
    78                                  
    79 00000000 506C6561736520656E-     side_1_prompt db "Please enter the length of side 1: ", 0 ;String size: 35
    79 00000009 74657220746865206C-
    79 00000012 656E677468206F6620-
    79 0000001B 7369646520313A2000 
    80 00000024 506C6561736520656E-     side_2_prompt db "Please enter the length of side 2: ", 0 ;String size: 35
    80 0000002D 74657220746865206C-
    80 00000036 656E677468206F6620-
    80 0000003F 7369646520323A2000 
    81 00000048 506C6561736520656E-     angle_prompt db "Please enter the degrees of the angle between: ", 0 ;String size: 47
    81 00000051 746572207468652064-
    81 0000005A 656772656573206F66-
    81 00000063 2074686520616E676C-
    81 0000006C 65206265747765656E-
    81 00000075 3A2000             
    82 00000078 546865206172656120-     output_area db "The area of the triangle is %1.5lf square feet.", 0 ;String size: 47
    82 00000081 6F6620746865207472-
    82 0000008A 69616E676C65206973-
    82 00000093 2025312E356C662073-
    82 0000009C 717561726520666565-
    82 000000A5 742E00             
    83 000000A8 546865206172656120-     area_output db "The area of the triangle is %1.5lf square feet.", 0 ;String size: 47 (MAY BE SUBJECT TO CHANGE)
    83 000000B1 6F6620746865207472-
    83 000000BA 69616E676C65206973-
    83 000000C3 2025312E356C662073-
    83 000000CC 717561726520666565-
    83 000000D5 742E00             
    84 000000D8 5468616E6B20796F75-     thank_you_message db "Thank you for using Nathan's product.", 0 ;String size: 37
    84 000000E1 20666F72207573696E-
    84 000000EA 67204E617468616E27-
    84 000000F3 732070726F64756374-
    84 000000FC 2E00               
    85 000000FE 0A5468652073696E20-     sin_test db 10, "The sin of x is: %1.5lf", 0 ;String size 24 GET RID OF NEWLINE
    85 00000107 6F6620782069733A20-
    85 00000110 25312E356C6600     
    86 00000117 0A5468652061726561-     test_area db 10, "The area is: %1.6lf", 0 ;REMOVE
    86 00000120 2069733A2025312E36-
    86 00000129 6C6600             
    87 0000012C 0A5468652076616C75-     test_val db 10, "The value is: %1.6lf", 10, 0 ;REMOVE
    87 00000135 652069733A2025312E-
    87 0000013E 366C660A00         
    88 00000143 256C6600                format db "%lf", 0
    89 00000147 0A                      newline db 10
    90                                  
    91                                  
    92 00000148 0000000000806640        angle_180 dq 180.0
    93 00000150 EA2E4454FB210940        pi dq 3.14159265359
    94 00000158 0000000000000040        two dq 2.0
    95 00000160 6666666666662B40        side_one dq 13.7
    96 00000168 295C8FC2F5E82140        side_two dq 8.955
    97 00000170 14AE47E17A743B40        angle dq 27.455
    98                                  
    99                                  segment .bss
   100                                  ;This section (or segment) is for declaring empty arrays
   101                                  
   102                                  align 64
   103 00000000 <res 340h>              backup_storage_area resb 832
   104 00000340 <res Ch>                side_1 resb 12
   105 0000034C <res Ch>                side_2 resb 12
   106 00000358 <res Ch>                angle_input resb 12
   107                                  
   108                                  segment .text
   109                                  
   110                                  producer:
   111                                  
   112                                      ;Back up the GPRs (General Purpose Registers)
   113 00000000 55                          push rbp
   114 00000001 4889E5                      mov rbp, rsp
   115 00000004 53                          push rbx
   116 00000005 51                          push rcx
   117 00000006 52                          push rdx
   118 00000007 57                          push rdi
   119 00000008 56                          push rsi
   120 00000009 4150                        push r8
   121 0000000B 4151                        push r9
   122 0000000D 4152                        push r10
   123 0000000F 4153                        push r11
   124 00000011 4154                        push r12
   125 00000013 4155                        push r13
   126 00000015 4156                        push r14
   127 00000017 4157                        push r15
   128 00000019 9C                          pushf
   129                                  
   130                                      ;Backup the registers other than the GPRs
   131 0000001A B807000000                  mov rax,7
   132 0000001F BA00000000                  mov rdx,0
   133 00000024 0FAE2425[00000000]          xsave [backup_storage_area]
   134                                  
   135                                  
   136                                      ;Block that outputs the first side prompt
   137 0000002C B801000000                  mov rax, 1 ;1 is the write code
   138 00000031 BF01000000                  mov rdi, 1 ;Destination of the output device
   139 00000036 48BE-                       mov rsi, side_1_prompt ;"Please enter the length of side 1: "
   139 00000038 [0000000000000000] 
   140 00000040 BA23000000                  mov rdx, 35 ;String size
   141 00000045 0F05                        syscall
   142                                  
   143                                  
   144                                      ;Block that takes user input for the first side
   145 00000047 B800000000                  mov rax, 0 ;0 = read
   146 0000004C BF00000000                  mov rdi, 0 ;0 = stdin
   147 00000051 49B8-                       mov r8, side_1
   147 00000053 [4003000000000000] 
   148 0000005B BA05000000                  mov rdx, 5
   149 00000060 0F05                        syscall
   150                                  
   151                                      ; ;Block that removes the newline
   152                                      ; mov rax, 0
   153                                      ; mov rdi, rsp
   154                                      ; call strlen
   155                                      ; mov [rsp + rax - 1], byte 0
   156                                  
   157                                      ; ;Block that outputs a newline
   158                                      ; mov rax, 1 ;1 is the write code
   159                                      ; mov rdi, 1 ;Destination of the output device
   160                                      ; mov rsi, newline ;Just a newline character (10)
   161                                      ; mov rdx, 1 ;String size
   162                                      ; syscall
   163                                  
   164                                  
   165                                      ; ;Block that converts the string input by the user for the first side into a float
   166                                      ; mov rax, 0
   167                                      ; mov rdi, rcx
   168                                      ; call atof
   169                                      ; movsd xmm8, xmm0
   170                                  
   171                                      ; ;TESTING VALUE
   172                                      ; mov rax, 0
   173                                      ; mov rdi, test_val
   174                                      ; mov rsi, format
   175                                      ; movsd xmm0, xmm8
   176                                      ; call printf
   177                                  
   178                                  
   179                                  
   180                                      ;Block that outputs the second side prompt
   181 00000062 B801000000                  mov rax, 1 ;1 is the write code
   182 00000067 BF01000000                  mov rdi, 1 ;Destination of the output device
   183 0000006C 49B9-                       mov r9, side_2_prompt ;"Please enter the length of side 2: "
   183 0000006E [2400000000000000] 
   184 00000076 BA23000000                  mov rdx, 35 ;String size
   185 0000007B 0F05                        syscall
   186                                  
   187                                  
   188                                  
   189                                      ;Block that takes user input for the second side
   190 0000007D B800000000                  mov rax, 0 ;0 = read
   191 00000082 BF00000000                  mov rdi, 0 ;0 = stdin
   192 00000087 48BE-                       mov rsi, side_2
   192 00000089 [4C03000000000000] 
   193 00000091 BA08000000                  mov rdx, 8
   194 00000096 0F05                        syscall
   195                                  
   196                                  
   197                                      ;Block that outputs a newline
   198 00000098 B801000000                  mov rax, 1 ;1 is the write code
   199 0000009D BF01000000                  mov rdi, 1 ;Destination of the output device
   200 000000A2 48BE-                       mov rsi, newline ;Just a newline character (10)
   200 000000A4 [4701000000000000] 
   201 000000AC BA01000000                  mov rdx, 1 ;String size
   202 000000B1 0F05                        syscall
   203                                  
   204                                  
   205                                      ;Block that converts the string input by the user for the second side into a float
   206 000000B3 B800000000                  mov rax, 0
   207 000000B8 4889E7                      mov rdi, rsp
   208 000000BB E8(00000000)                call atof
   209 000000C0 F2440F10C8                  movsd xmm9, xmm0
   210                                  
   211                                      ;TESTING VALUE
   212 000000C5 B800000000                  mov rax, 0
   213 000000CA 48BF-                       mov rdi, test_val
   213 000000CC [2C01000000000000] 
   214 000000D4 48BE-                       mov rsi, format
   214 000000D6 [4301000000000000] 
   215 000000DE F2410F10C1                  movsd xmm0, xmm9
   216 000000E3 E8(00000000)                call printf
   217                                  
   218                                  
   219                                  
   220                                      ; ;Block that outputs a newline
   221                                      ; mov rax, 1 ;1 is the write code
   222                                      ; mov rdi, 1 ;Destination of the output device
   223                                      ; mov rsi, newline ;Just a newline character (10)
   224                                      ; mov rdx, 1 ;String size
   225                                      ; syscall
   226                                  
   227                                  
   228                                  
   229                                  
   230                                      ;Block that outputs the angle prompt
   231 000000E8 B801000000                  mov rax, 1 ;1 is the write code
   232 000000ED BF01000000                  mov rdi, 1 ;Destination of the output device
   233 000000F2 48BE-                       mov rsi, angle_prompt ;"Please enter the degrees of the angle between: "
   233 000000F4 [4800000000000000] 
   234 000000FC BA2F000000                  mov rdx, 47 ;String size
   235 00000101 0F05                        syscall
   236                                  
   237                                  
   238                                      ;Block that takes user input for the angle
   239 00000103 B800000000                  mov rax, 0 ;0 = read
   240 00000108 BF00000000                  mov rdi, 0 ;0 = stdin
   241 0000010D 49BA-                       mov r10, angle_input
   241 0000010F [5803000000000000] 
   242 00000117 BA08000000                  mov rdx, 8
   243 0000011C 0F05                        syscall
   244                                  
   245                                  
   246                                      ;Block that outputs a newline
   247 0000011E B801000000                  mov rax, 1 ;1 is the write code
   248 00000123 BF01000000                  mov rdi, 1 ;Destination of the output device
   249 00000128 48BE-                       mov rsi, newline ;Just a newline character (10)
   249 0000012A [4701000000000000] 
   250 00000132 BA01000000                  mov rdx, 1 ;String size
   251 00000137 0F05                        syscall
   252                                  
   253                                  
   254                                      ;Block that converts the string input by the user for the angle into a float
   255 00000139 B800000000                  mov rax, 0
   256 0000013E 4889E7                      mov rdi, rsp
   257 00000141 E8(00000000)                call atof
   258 00000146 F2440F10D0                  movsd xmm10, xmm0
   259                                  
   260                                  
   261                                      ;TESTING VALUE
   262 0000014B B800000000                  mov rax, 0
   263 00000150 48BF-                       mov rdi, test_val
   263 00000152 [2C01000000000000] 
   264 0000015A 48BE-                       mov rsi, format
   264 0000015C [4301000000000000] 
   265 00000164 F2410F10C2                  movsd xmm0, xmm10
   266 00000169 E8(00000000)                call printf
   267                                  
   268                                      ; ;Block that outputs a newline
   269                                      ; mov rax, 1 ;1 is the write code
   270                                      ; mov rdi, 1 ;Destination of the output device
   271                                      ; mov rsi, newline ;Just a newline character (10)
   272                                      ; mov rdx, 1 ;String size
   273                                      ; syscall
   274                                  
   275                                  
   276                                      ; ;CONVERTING FROM DEGREES TO RADIANS (OLD FUNCTION)
   277                                      ; movsd xmm8, qword [angle]
   278                                      ; movsd xmm9, qword [angle_180]
   279                                      ; movsd xmm10, qword [pi]
   280                                      ; divsd xmm10, xmm9
   281                                      ; mulsd xmm8, xmm10
   282                                  
   283                                      ;CONVERTING FROM DEGREES TO RADIANS
   284 0000016E F2440F102425-               movsd xmm12, qword [angle_180]
   284 00000174 [48010000]         
   285 00000178 F2440F101C25-               movsd xmm11, qword [pi]
   285 0000017E [50010000]         
   286 00000182 F2450F5EDC                  divsd xmm11, xmm12
   287 00000187 F2450F59D3                  mulsd xmm10, xmm11
   288                                  
   289                                      ;TESTING SIN FUNCTION
   290 0000018C B801000000                  mov rax, 1
   291 00000191 F2410F10C2                  movsd xmm0, xmm10
   292 00000196 E8(00000000)                call sin
   293 0000019B F2440F10F8                  movsd xmm15, xmm0
   294                                  
   295                                      ;BLOCK TESTING SIN FUNCTION OUTPUT
   296 000001A0 B801000000                  mov rax, 1
   297 000001A5 48BF-                       mov rdi, sin_test
   297 000001A7 [FE00000000000000] 
   298 000001AF 48BE-                       mov rsi, format
   298 000001B1 [4301000000000000] 
   299 000001B9 F2410F10C7                  movsd xmm0, xmm15
   300 000001BE E8(00000000)                call printf
   301                                  
   302                                  
   303                                      ;Computing the area of the triangle after finding sine
   304                                      ;The formula being used is 1/2 * a * b * sin(x) where:
   305                                      ;a = the length of the first side
   306                                      ;b = the length of the second side
   307                                      ;x = the angle in degrees
   308                                      ;xmm13 holds side 1
   309                                      ;xmm14 holds side 2
   310                                      ;xmm15 holds sin(x)
   311                                  
   312 000001C3 F2440F102C25-               movsd xmm13, qword [side_one]
   312 000001C9 [60010000]         
   313 000001CD F2440F103425-               movsd xmm14, qword [side_two]
   313 000001D3 [68010000]         
   314 000001D7 F2450F59EE                  mulsd xmm13, xmm14
   315 000001DC F2450F59EF                  mulsd xmm13, xmm15
   316 000001E1 F2440F5E2C25-               divsd xmm13, qword [two]
   316 000001E7 [58010000]         
   317                                  
   318                                      ;TESTING AREA
   319 000001EB B801000000                  mov rax, 1
   320 000001F0 48BF-                       mov rdi, test_area
   320 000001F2 [1701000000000000] 
   321 000001FA 48BE-                       mov rsi, format
   321 000001FC [4301000000000000] 
   322 00000204 F2410F10C5                  movsd xmm0, xmm13
   323 00000209 E8(00000000)                call printf
   324                                      
   325                                      
   326                                  
   327                                  
   328                                  
   329                                      ;Block that outputs the area
   330 0000020E B801000000                  mov rax, 1 ;1 is the write code
   331 00000213 BF01000000                  mov rdi, 1 ;Destination of the output device
   332 00000218 48BE-                       mov rsi, area_output ;"The area of this triangle is %1.5lf square feet."
   332 0000021A [A800000000000000] 
   333 00000222 BA2F000000                  mov rdx, 47 ;String size
   334 00000227 0F05                        syscall
   335                                  
   336                                  
   337                                  
   338                                      ;Block that outputs a newline
   339 00000229 B801000000                  mov rax, 1 ;1 is the write code
   340 0000022E BF01000000                  mov rdi, 1 ;Destination of the output device
   341 00000233 48BE-                       mov rsi, newline ;Just a newline character (10)
   341 00000235 [4701000000000000] 
   342 0000023D BA01000000                  mov rdx, 1 ;String size
   343 00000242 0F05                        syscall
   344                                  
   345                                  
   346                                  
   347                                  
   348                                      ;Block that outputs thank you message
   349 00000244 B801000000                  mov rax, 1 ;1 is the write code
   350 00000249 BF01000000                  mov rdi, 1 ;Destination of the output device
   351 0000024E 48BE-                       mov rsi, thank_you_message ;"Thank you for using Nathan's product."
   351 00000250 [D800000000000000] 
   352 00000258 BA25000000                  mov rdx, 37 ;String size
   353 0000025D 0F05                        syscall
   354                                  
   355                                  
   356                                  
   357                                  
   358                                      ;Block that outputs a newline
   359 0000025F B801000000                  mov rax, 1 ;1 is the write code
   360 00000264 BF01000000                  mov rdi, 1 ;Destination of the output device
   361 00000269 48BE-                       mov rsi, newline ;Just a newline character (10)
   361 0000026B [4701000000000000] 
   362 00000273 BA01000000                  mov rdx, 1 ;String size
   363 00000278 0F05                        syscall
   364                                  
   365                                  
   366                                  
   367                                  
   368                                  
   369                                      ;Back up value in xmm15 (variance) before restoring registers
   370 0000027A 6A00                        push qword 0
   371 0000027C F2440F113C24                movsd [rsp], xmm15
   372                                  
   373                                  
   374                                  
   375                                      ;Restore the values to non-GPRs
   376 00000282 B807000000                  mov rax, 7
   377 00000287 BA00000000                  mov rdx, 0
   378 0000028C 0FAE2C25[00000000]          xrstor [backup_storage_area]
   379                                  
   380                                  
   381 00000294 F20F100424                  movsd xmm0, [rsp]
   382 00000299 58                          pop rax
   383                                      
   384                                  
   385                                  
   386                                      ;Restore the GPRs
   387 0000029A 9D                          popf
   388 0000029B 415F                        pop r15
   389 0000029D 415E                        pop r14
   390 0000029F 415D                        pop r13
   391 000002A1 415C                        pop r12
   392 000002A3 415B                        pop r11
   393 000002A5 415A                        pop r10
   394 000002A7 4159                        pop r9
   395 000002A9 4158                        pop r8
   396 000002AB 5E                          pop rsi
   397 000002AC 5F                          pop rdi
   398 000002AD 5A                          pop rdx
   399 000002AE 59                          pop rcx
   400 000002AF 5B                          pop rbx
   401 000002B0 5D                          pop rbp   ;Restore rbp to the base of the activation record of the caller program
   402 000002B1 C3                          ret
   403                                  ;End of the function manager.asm ====================================================================
